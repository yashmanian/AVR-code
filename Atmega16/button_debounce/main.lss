
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000086  00000000  00000000  00000137  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000050  00000000  00000000  000001bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a8  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000073  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
int main (void)
{
  DDRB |= 1 << PINB0;   //Data direction register output on pin B0 (LED1)
  6c:	b8 9a       	sbi	0x17, 0	; 23
  PORTB ^= 1 << PINB0;
  6e:	88 b3       	in	r24, 0x18	; 24
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	89 27       	eor	r24, r25
  74:	88 bb       	out	0x18, r24	; 24
  DDRB &= ~(1 << PINB1);   //Data direction register input on pin B1 (button)
  76:	b9 98       	cbi	0x17, 1	; 23
  PORTB |= 1 << PINB1;   //Initialise Pin B1 to HIGH(5v)
  78:	c1 9a       	sbi	0x18, 1	; 24
  DDRB |= 1 << PINB2;   //Data direction register output on pin B2 (LED2)
  7a:	ba 9a       	sbi	0x17, 2	; 23
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
   if(bit_is_clear(PINB,1))   //Checks if button is pressed
   {
    //Make sure button is released first
	if(pressed == 0)
	{
	PORTB ^= 1 << PINB0;
  80:	31 e0       	ldi	r19, 0x01	; 1
	PORTB ^= 1 << PINB2;
  82:	24 e0       	ldi	r18, 0x04	; 4
  PORTB |= 1 << PINB1;   //Initialise Pin B1 to HIGH(5v)
  DDRB |= 1 << PINB2;   //Data direction register output on pin B2 (LED2)
  int pressed = 0;
  while(1)
  {
   if(bit_is_clear(PINB,1))   //Checks if button is pressed
  84:	b1 99       	sbic	0x16, 1	; 22
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
   {
    //Make sure button is released first
	if(pressed == 0)
  88:	89 2b       	or	r24, r25
  8a:	19 f0       	breq	.+6      	; 0x92 <main+0x26>
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	f9 cf       	rjmp	.-14     	; 0x84 <main+0x18>
	{
	PORTB ^= 1 << PINB0;
  92:	88 b3       	in	r24, 0x18	; 24
  94:	83 27       	eor	r24, r19
  96:	88 bb       	out	0x18, r24	; 24
	PORTB ^= 1 << PINB2;
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	82 27       	eor	r24, r18
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	f0 cf       	rjmp	.-32     	; 0x84 <main+0x18>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
