
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000b5  00800060  00800060  00001314  2**0
                  ALLOC
  2 .debug_aranges 000000c0  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000076d  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001948  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000949  00000000  00000000  00003489  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001363  00000000  00000000  00003dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005e0  00000000  00000000  00005138  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000008c8  00000000  00000000  00005718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b5a  00000000  00000000  00005fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00006b3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       c:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_3>
      10:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_4>
      14:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__vector_5>
      18:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_6>
      1c:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_7>
      20:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_8>
      24:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_9>
      28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      2c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_11>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      34:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_13>
      38:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_14>
      3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      4c:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_19>
      50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

00000054 <__c.1571>:
      54:	25 63 20 64 20 0a 00                                %c d ..

0000005b <__c.1569>:
      5b:	72 69 67 68 74 0a 00                                right..

00000062 <__c.1567>:
      62:	25 63 20 61 20 0a 00                                %c a ..

00000069 <__c.1565>:
      69:	6c 65 66 74 0a 00                                   left..

0000006f <__c.1563>:
      6f:	25 63 20 73 20 0a 00                                %c s ..

00000076 <__c.1561>:
      76:	72 65 76 65 72 73 65 0a 00                          reverse..

0000007f <__c.1559>:
      7f:	25 63 20 77 20 0a 00                                %c w ..

00000086 <__c.1557>:
      86:	66 6f 72 77 61 72 64 0a 00                          forward..

0000008f <HexChars>:
      8f:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
      9f:	00                                                  .

000000a0 <TimerPrescaleFactor>:
      a0:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

000000ac <TimerRTCPrescaleFactor>:
      ac:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf e5       	ldi	r28, 0x5F	; 95
      c2:	d4 e0       	ldi	r29, 0x04	; 4
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e6       	ldi	r26, 0x60	; 96
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a5 31       	cpi	r26, 0x15	; 21
      d4:	b1 07       	cpc	r27, r17
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 9c 00 	call	0x138	; 0x138 <main>
      dc:	0c 94 4e 09 	jmp	0x129c	; 0x129c <_exit>

000000e0 <__bad_interrupt>:
      e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <configure_ports>:

//************CONFIGURE PORTS************
//configure ports for input or output - specific to ATmega8
void configure_ports(void)
	{
	DDRC = 0x00;  //configure all C ports for input
      e4:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00; //make sure pull-up resistors are turned off
      e6:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF;  //configure all D ports for output
      e8:	8f ef       	ldi	r24, 0xFF	; 255
      ea:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xC7;  //configure B ports 0, 1, 2, 6, 7 for output (google search '0b11000111 to hex')
      ec:	87 ec       	ldi	r24, 0xC7	; 199
      ee:	87 bb       	out	0x17, r24	; 23
	}
      f0:	08 95       	ret

000000f2 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles*16;
	while(cycles > 0)
		cycles--;
	}
      f2:	08 95       	ret

000000f4 <LED_on>:
//*********SIMPLIFIED FUNCTIONS**********
//functions to make coding easier for a beginner
//but could cause port mixup confusion for intermediate users
void LED_on(void)
	{
	PORT_OFF(PORTD, 4);//turn LED on
      f4:	94 98       	cbi	0x12, 4	; 18
	}
      f6:	08 95       	ret

000000f8 <LED_off>:
void LED_off(void)
	{
	PORT_ON(PORTD, 4);//turn LED off
      f8:	94 9a       	sbi	0x12, 4	; 18
	}
      fa:	08 95       	ret

000000fc <servo_left>:
void servo_left(signed long int speed)
	{
	PORT_ON(PORTD, 2);
      fc:	92 9a       	sbi	0x12, 2	; 18
	delay_cycles(speed);
	PORT_OFF(PORTD, 2);//keep off
      fe:	92 98       	cbi	0x12, 2	; 18
	delay_cycles(200);
	}
     100:	08 95       	ret

00000102 <servo_right>:
void servo_right(signed long int speed)
	{
	PORT_ON(PORTD, 3);
     102:	93 9a       	sbi	0x12, 3	; 18
	delay_cycles(speed);		
	PORT_OFF(PORTD, 3);//keep off
     104:	93 98       	cbi	0x12, 3	; 18
	delay_cycles(200);
	}
     106:	08 95       	ret

00000108 <initpwm>:
#include "SOR_Utils.h"


void initpwm()
{
		TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);//|(1<<CS00);
     108:	83 b7       	in	r24, 0x33	; 51
     10a:	89 66       	ori	r24, 0x69	; 105
     10c:	83 bf       	out	0x33, r24	; 51

		DDRB|=(1<<PINB3); // set output for PWM timer 0
     10e:	bb 9a       	sbi	0x17, 3	; 23
		
		TCCR1A|=(1<<WGM10)|(1<<COM1A1);//|(1<<COM1A0);
     110:	8f b5       	in	r24, 0x2f	; 47
     112:	81 68       	ori	r24, 0x81	; 129
     114:	8f bd       	out	0x2f, r24	; 47
		TCCR1B|=(1<<WGM12)|(1<<CS10);
     116:	8e b5       	in	r24, 0x2e	; 46
     118:	89 60       	ori	r24, 0x09	; 9
     11a:	8e bd       	out	0x2e, r24	; 46
      
		DDRD|=(1<<PIND5); // set output for PWM timer 1
     11c:	8d 9a       	sbi	0x11, 5	; 17
		
		TCCR2|=(1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<CS20);//|(1<<COM20);
     11e:	85 b5       	in	r24, 0x25	; 37
     120:	89 66       	ori	r24, 0x69	; 105
     122:	85 bd       	out	0x25, r24	; 37

		DDRD|=(1<<PIND7); // set putput for PWM timer 2
     124:	8f 9a       	sbi	0x11, 7	; 17
}
     126:	08 95       	ret

00000128 <setpwmoutput1>:



void setpwmoutput1(int8_t duty1,int8_t duty2,int8_t duty3)
{
   OCR0 = duty1;
     128:	8c bf       	out	0x3c, r24	; 60
   OCR1A = duty2;
     12a:	77 27       	eor	r23, r23
     12c:	67 fd       	sbrc	r22, 7
     12e:	70 95       	com	r23
     130:	7b bd       	out	0x2b, r23	; 43
     132:	6a bd       	out	0x2a, r22	; 42
   OCR2 = duty3;
     134:	43 bd       	out	0x23, r20	; 35
}
     136:	08 95       	ret

00000138 <main>:

int main()
{	
     138:	2f 92       	push	r2
     13a:	3f 92       	push	r3
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	6f 92       	push	r6
     142:	7f 92       	push	r7
     144:	8f 92       	push	r8
     146:	9f 92       	push	r9
     148:	af 92       	push	r10
     14a:	bf 92       	push	r11
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	DDRB|= 0b11111111;
     15c:	87 b3       	in	r24, 0x17	; 23
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	87 bb       	out	0x17, r24	; 23
	//int8_t m1=0;
	//int8_t m2=0;
	//int8_t m3=0;
	
	
	initpwm();
     162:	0e 94 84 00 	call	0x108	; 0x108 <initpwm>
	
			uartInit();
     166:	0e 94 7d 04 	call	0x8fa	; 0x8fa <uartInit>
			uartSetBaudRate(9600);
     16a:	60 e8       	ldi	r22, 0x80	; 128
     16c:	75 e2       	ldi	r23, 0x25	; 37
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 77 03 	call	0x6ee	; 0x6ee <uartSetBaudRate>
			rprintfInit(uartSendByte);
     176:	88 e9       	ldi	r24, 0x98	; 152
     178:	93 e0       	ldi	r25, 0x03	; 3
     17a:	0e 94 83 01 	call	0x306	; 0x306 <rprintfInit>
	
		TCNT0=0;
     17e:	12 be       	out	0x32, r1	; 50
	    TCNT1=0;
     180:	1d bc       	out	0x2d, r1	; 45
     182:	1c bc       	out	0x2c, r1	; 44
	    TCNT2=0;
     184:	14 bc       	out	0x24, r1	; 36
		PORTB|= 0b00000000;
     186:	88 b3       	in	r24, 0x18	; 24
     188:	88 bb       	out	0x18, r24	; 24
		OCR0=0;
     18a:	1c be       	out	0x3c, r1	; 60
		PORTD|= 0b00000000;
     18c:	82 b3       	in	r24, 0x12	; 18
     18e:	82 bb       	out	0x12, r24	; 18
		initpwm();
		char data=uartGetByte();
		
		if(data == 'w')
		{
			rprintf("forward\n");
     190:	11 e0       	ldi	r17, 0x01	; 1



void setpwmoutput1(int8_t duty1,int8_t duty2,int8_t duty3)
{
   OCR0 = duty1;
     192:	0f ef       	ldi	r16, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     194:	c0 e6       	ldi	r28, 0x60	; 96
     196:	da ee       	ldi	r29, 0xEA	; 234
   OCR1A = duty2;
     198:	ee 24       	eor	r14, r14
     19a:	ea 94       	dec	r14
     19c:	fe 2c       	mov	r15, r14
			setpwmoutput1(255,0,255);
			_delay_ms(15);
		}
		else if(data == 'a')
		{
			rprintf("left\n");
     19e:	59 e6       	ldi	r21, 0x69	; 105
     1a0:	25 2e       	mov	r2, r21
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	35 2e       	mov	r3, r21
			rprintf("%c a \n", data);
     1a6:	42 e6       	ldi	r20, 0x62	; 98
     1a8:	44 2e       	mov	r4, r20
     1aa:	40 e0       	ldi	r20, 0x00	; 0
     1ac:	54 2e       	mov	r5, r20
     1ae:	31 e6       	ldi	r19, 0x61	; 97
     1b0:	63 2e       	mov	r6, r19
     1b2:	71 2c       	mov	r7, r1
			setpwmoutput1(255,0,255);
			_delay_ms(15);
		}
		else if(data == 's')
		{
			rprintf("reverse\n");
     1b4:	26 e7       	ldi	r18, 0x76	; 118
     1b6:	82 2e       	mov	r8, r18
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	92 2e       	mov	r9, r18
			rprintf("%c s \n", data);
     1bc:	9f e6       	ldi	r25, 0x6F	; 111
     1be:	a9 2e       	mov	r10, r25
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	b9 2e       	mov	r11, r25
     1c4:	83 e7       	ldi	r24, 0x73	; 115
     1c6:	c8 2e       	mov	r12, r24
     1c8:	d1 2c       	mov	r13, r1
	
   //Do this forever

   while(1)
   {
		initpwm();
     1ca:	0e 94 84 00 	call	0x108	; 0x108 <initpwm>
		char data=uartGetByte();
     1ce:	0e 94 56 04 	call	0x8ac	; 0x8ac <uartGetByte>
		
		if(data == 'w')
     1d2:	87 37       	cpi	r24, 0x77	; 119
     1d4:	21 f5       	brne	.+72     	; 0x21e <main+0xe6>
		{
			rprintf("forward\n");
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0xa0>
     1d8:	0f 92       	push	r0
     1da:	ad b7       	in	r26, 0x3d	; 61
     1dc:	be b7       	in	r27, 0x3e	; 62
     1de:	11 96       	adiw	r26, 0x01	; 1
     1e0:	1c 93       	st	X, r17
     1e2:	11 97       	sbiw	r26, 0x01	; 1
     1e4:	e6 e8       	ldi	r30, 0x86	; 134
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	13 96       	adiw	r26, 0x03	; 3
     1ea:	fc 93       	st	X, r31
     1ec:	ee 93       	st	-X, r30
     1ee:	12 97       	sbiw	r26, 0x02	; 2
     1f0:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			rprintf("%c w \n", data);
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <main+0xbe>
     1f6:	ed b7       	in	r30, 0x3d	; 61
     1f8:	fe b7       	in	r31, 0x3e	; 62
     1fa:	31 96       	adiw	r30, 0x01	; 1
     1fc:	ad b7       	in	r26, 0x3d	; 61
     1fe:	be b7       	in	r27, 0x3e	; 62
     200:	11 96       	adiw	r26, 0x01	; 1
     202:	1c 93       	st	X, r17
     204:	8f e7       	ldi	r24, 0x7F	; 127
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	92 83       	std	Z+2, r25	; 0x02
     20a:	81 83       	std	Z+1, r24	; 0x01
     20c:	a7 e7       	ldi	r26, 0x77	; 119
     20e:	b0 e0       	ldi	r27, 0x00	; 0
     210:	b4 83       	std	Z+4, r27	; 0x04
     212:	a3 83       	std	Z+3, r26	; 0x03
     214:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			PORTB|= (1<<PINB0)|(1<<PINB7); //(1<<PINB5)|
     218:	88 b3       	in	r24, 0x18	; 24
     21a:	81 68       	ori	r24, 0x81	; 129
     21c:	1b c0       	rjmp	.+54     	; 0x254 <main+0x11c>
			setpwmoutput1(255,0,255);
			_delay_ms(15);
		}
		else if(data == 's')
     21e:	83 37       	cpi	r24, 0x73	; 115
     220:	f1 f4       	brne	.+60     	; 0x25e <main+0x126>
		{
			rprintf("reverse\n");
     222:	00 d0       	rcall	.+0      	; 0x224 <main+0xec>
     224:	0f 92       	push	r0
     226:	ed b7       	in	r30, 0x3d	; 61
     228:	fe b7       	in	r31, 0x3e	; 62
     22a:	11 83       	std	Z+1, r17	; 0x01
     22c:	93 82       	std	Z+3, r9	; 0x03
     22e:	82 82       	std	Z+2, r8	; 0x02
     230:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			rprintf("%c s \n", data);
     234:	00 d0       	rcall	.+0      	; 0x236 <main+0xfe>
     236:	ed b7       	in	r30, 0x3d	; 61
     238:	fe b7       	in	r31, 0x3e	; 62
     23a:	31 96       	adiw	r30, 0x01	; 1
     23c:	ad b7       	in	r26, 0x3d	; 61
     23e:	be b7       	in	r27, 0x3e	; 62
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	1c 93       	st	X, r17
     244:	b2 82       	std	Z+2, r11	; 0x02
     246:	a1 82       	std	Z+1, r10	; 0x01
     248:	d4 82       	std	Z+4, r13	; 0x04
     24a:	c3 82       	std	Z+3, r12	; 0x03
     24c:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			PORTB|= (1<<PINB1)|(1<<PINB6); //|(1<<PINB4)
     250:	88 b3       	in	r24, 0x18	; 24
     252:	82 64       	ori	r24, 0x42	; 66
     254:	88 bb       	out	0x18, r24	; 24



void setpwmoutput1(int8_t duty1,int8_t duty2,int8_t duty3)
{
   OCR0 = duty1;
     256:	0c bf       	out	0x3c, r16	; 60
   OCR1A = duty2;
     258:	1b bc       	out	0x2b, r1	; 43
     25a:	1a bc       	out	0x2a, r1	; 42
     25c:	41 c0       	rjmp	.+130    	; 0x2e0 <main+0x1a8>
			rprintf("%c s \n", data);
			PORTB|= (1<<PINB1)|(1<<PINB6); //|(1<<PINB4)
			setpwmoutput1(255,0,255);
			_delay_ms(15);
		}
		else if(data == 'a')
     25e:	81 36       	cpi	r24, 0x61	; 97
     260:	d1 f4       	brne	.+52     	; 0x296 <main+0x15e>
		{
			rprintf("left\n");
     262:	00 d0       	rcall	.+0      	; 0x264 <main+0x12c>
     264:	0f 92       	push	r0
     266:	ed b7       	in	r30, 0x3d	; 61
     268:	fe b7       	in	r31, 0x3e	; 62
     26a:	11 83       	std	Z+1, r17	; 0x01
     26c:	33 82       	std	Z+3, r3	; 0x03
     26e:	22 82       	std	Z+2, r2	; 0x02
     270:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			rprintf("%c a \n", data);
     274:	00 d0       	rcall	.+0      	; 0x276 <main+0x13e>
     276:	ed b7       	in	r30, 0x3d	; 61
     278:	fe b7       	in	r31, 0x3e	; 62
     27a:	31 96       	adiw	r30, 0x01	; 1
     27c:	ad b7       	in	r26, 0x3d	; 61
     27e:	be b7       	in	r27, 0x3e	; 62
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	1c 93       	st	X, r17
     284:	52 82       	std	Z+2, r5	; 0x02
     286:	41 82       	std	Z+1, r4	; 0x01
     288:	74 82       	std	Z+4, r7	; 0x04
     28a:	63 82       	std	Z+3, r6	; 0x03
     28c:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			PORTB|= (1<<PINB4)|(1<<PINB7); //(1<<PINB0)|
     290:	88 b3       	in	r24, 0x18	; 24
     292:	80 69       	ori	r24, 0x90	; 144
     294:	21 c0       	rjmp	.+66     	; 0x2d8 <main+0x1a0>
			setpwmoutput1(0,255,255);
			_delay_ms(15);
			
		}
		else if(data == 'd')
     296:	84 36       	cpi	r24, 0x64	; 100
     298:	69 f5       	brne	.+90     	; 0x2f4 <main+0x1bc>
		{
			rprintf("right\n");
     29a:	00 d0       	rcall	.+0      	; 0x29c <main+0x164>
     29c:	0f 92       	push	r0
     29e:	ed b7       	in	r30, 0x3d	; 61
     2a0:	fe b7       	in	r31, 0x3e	; 62
     2a2:	11 83       	std	Z+1, r17	; 0x01
     2a4:	8b e5       	ldi	r24, 0x5B	; 91
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	93 83       	std	Z+3, r25	; 0x03
     2aa:	82 83       	std	Z+2, r24	; 0x02
     2ac:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			rprintf("%c d \n", data);
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <main+0x17a>
     2b2:	ed b7       	in	r30, 0x3d	; 61
     2b4:	fe b7       	in	r31, 0x3e	; 62
     2b6:	31 96       	adiw	r30, 0x01	; 1
     2b8:	ad b7       	in	r26, 0x3d	; 61
     2ba:	be b7       	in	r27, 0x3e	; 62
     2bc:	11 96       	adiw	r26, 0x01	; 1
     2be:	1c 93       	st	X, r17
     2c0:	84 e5       	ldi	r24, 0x54	; 84
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	92 83       	std	Z+2, r25	; 0x02
     2c6:	81 83       	std	Z+1, r24	; 0x01
     2c8:	a4 e6       	ldi	r26, 0x64	; 100
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	b4 83       	std	Z+4, r27	; 0x04
     2ce:	a3 83       	std	Z+3, r26	; 0x03
     2d0:	0e 94 de 02 	call	0x5bc	; 0x5bc <rprintf1RamRom>
			PORTB|= (1<<PINB5)|(1<<PINB6); //(1<<PINB0)|
     2d4:	88 b3       	in	r24, 0x18	; 24
     2d6:	80 66       	ori	r24, 0x60	; 96
     2d8:	88 bb       	out	0x18, r24	; 24



void setpwmoutput1(int8_t duty1,int8_t duty2,int8_t duty3)
{
   OCR0 = duty1;
     2da:	1c be       	out	0x3c, r1	; 60
   OCR1A = duty2;
     2dc:	fb bc       	out	0x2b, r15	; 43
     2de:	ea bc       	out	0x2a, r14	; 42
   OCR2 = duty3;
     2e0:	03 bd       	out	0x23, r16	; 35
     2e2:	ce 01       	movw	r24, r28
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x1ac>
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	6b cf       	rjmp	.-298    	; 0x1ca <main+0x92>



void setpwmoutput1(int8_t duty1,int8_t duty2,int8_t duty3)
{
   OCR0 = duty1;
     2f4:	1c be       	out	0x3c, r1	; 60
   OCR1A = duty2;
     2f6:	1b bc       	out	0x2b, r1	; 43
     2f8:	1a bc       	out	0x2a, r1	; 42
   OCR2 = duty3;
     2fa:	13 bc       	out	0x23, r1	; 35
			_delay_ms(15);
		}
		else
		{
			setpwmoutput1(0,0,0);
			PORTB|= 0b00000000;
     2fc:	88 b3       	in	r24, 0x18	; 24
     2fe:	88 bb       	out	0x18, r24	; 24
			PORTD|= 0b00000000;
     300:	82 b3       	in	r24, 0x12	; 18
     302:	82 bb       	out	0x12, r24	; 18
     304:	62 cf       	rjmp	.-316    	; 0x1ca <main+0x92>

00000306 <rprintfInit>:
     306:	90 93 61 00 	sts	0x0061, r25
     30a:	80 93 60 00 	sts	0x0060, r24
     30e:	08 95       	ret

00000310 <rprintfChar>:
     310:	1f 93       	push	r17
     312:	18 2f       	mov	r17, r24
     314:	8a 30       	cpi	r24, 0x0A	; 10
     316:	31 f4       	brne	.+12     	; 0x324 <rprintfChar+0x14>
     318:	e0 91 60 00 	lds	r30, 0x0060
     31c:	f0 91 61 00 	lds	r31, 0x0061
     320:	8d e0       	ldi	r24, 0x0D	; 13
     322:	09 95       	icall
     324:	e0 91 60 00 	lds	r30, 0x0060
     328:	f0 91 61 00 	lds	r31, 0x0061
     32c:	81 2f       	mov	r24, r17
     32e:	09 95       	icall
     330:	1f 91       	pop	r17
     332:	08 95       	ret

00000334 <rprintfStr>:
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	21 f4       	brne	.+8      	; 0x346 <rprintfStr+0x12>
     33e:	06 c0       	rjmp	.+12     	; 0x34c <rprintfStr+0x18>
     340:	21 96       	adiw	r28, 0x01	; 1
     342:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     346:	88 81       	ld	r24, Y
     348:	88 23       	and	r24, r24
     34a:	d1 f7       	brne	.-12     	; 0x340 <rprintfStr+0xc>
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <rprintfStrLen>:
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	8c 01       	movw	r16, r24
     360:	7a 01       	movw	r14, r20
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	e9 f0       	breq	.+58     	; 0x3a0 <rprintfStrLen+0x4e>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	26 17       	cp	r18, r22
     36c:	37 07       	cpc	r19, r23
     36e:	38 f4       	brcc	.+14     	; 0x37e <rprintfStrLen+0x2c>
     370:	f8 01       	movw	r30, r16
     372:	81 91       	ld	r24, Z+
     374:	8f 01       	movw	r16, r30
     376:	2f 5f       	subi	r18, 0xFF	; 255
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	88 23       	and	r24, r24
     37c:	b1 f7       	brne	.-20     	; 0x36a <rprintfStrLen+0x18>
     37e:	c0 e0       	ldi	r28, 0x00	; 0
     380:	d0 e0       	ldi	r29, 0x00	; 0
     382:	0b c0       	rjmp	.+22     	; 0x39a <rprintfStrLen+0x48>
     384:	f8 01       	movw	r30, r16
     386:	80 81       	ld	r24, Z
     388:	88 23       	and	r24, r24
     38a:	19 f0       	breq	.+6      	; 0x392 <rprintfStrLen+0x40>
     38c:	0f 5f       	subi	r16, 0xFF	; 255
     38e:	1f 4f       	sbci	r17, 0xFF	; 255
     390:	01 c0       	rjmp	.+2      	; 0x394 <rprintfStrLen+0x42>
     392:	80 e2       	ldi	r24, 0x20	; 32
     394:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     398:	21 96       	adiw	r28, 0x01	; 1
     39a:	ce 15       	cp	r28, r14
     39c:	df 05       	cpc	r29, r15
     39e:	90 f3       	brcs	.-28     	; 0x384 <rprintfStrLen+0x32>
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <rprintfProgStr>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	00 97       	sbiw	r24, 0x00	; 0
     3b6:	19 f4       	brne	.+6      	; 0x3be <rprintfProgStr+0x10>
     3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <rprintfProgStr+0x1a>
     3ba:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     3be:	fe 01       	movw	r30, r28
     3c0:	21 96       	adiw	r28, 0x01	; 1
     3c2:	84 91       	lpm	r24, Z+
     3c4:	88 23       	and	r24, r24
     3c6:	c9 f7       	brne	.-14     	; 0x3ba <rprintfProgStr+0xc>
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <rprintfCRLF>:
     3ce:	8a e0       	ldi	r24, 0x0A	; 10
     3d0:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     3d4:	08 95       	ret

000003d6 <rprintfu04>:
     3d6:	e8 2f       	mov	r30, r24
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	ef 70       	andi	r30, 0x0F	; 15
     3dc:	f0 70       	andi	r31, 0x00	; 0
     3de:	e1 57       	subi	r30, 0x71	; 113
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	e4 91       	lpm	r30, Z+
     3e4:	8e 2f       	mov	r24, r30
     3e6:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     3ea:	08 95       	ret

000003ec <rprintfu08>:
     3ec:	1f 93       	push	r17
     3ee:	18 2f       	mov	r17, r24
     3f0:	82 95       	swap	r24
     3f2:	8f 70       	andi	r24, 0x0F	; 15
     3f4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <rprintfu04>
     3f8:	81 2f       	mov	r24, r17
     3fa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <rprintfu04>
     3fe:	1f 91       	pop	r17
     400:	08 95       	ret

00000402 <rprintfu16>:
     402:	1f 93       	push	r17
     404:	18 2f       	mov	r17, r24
     406:	89 2f       	mov	r24, r25
     408:	0e 94 f6 01 	call	0x3ec	; 0x3ec <rprintfu08>
     40c:	81 2f       	mov	r24, r17
     40e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <rprintfu08>
     412:	1f 91       	pop	r17
     414:	08 95       	ret

00000416 <rprintfu32>:
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	7b 01       	movw	r14, r22
     420:	8c 01       	movw	r16, r24
     422:	c8 01       	movw	r24, r16
     424:	aa 27       	eor	r26, r26
     426:	bb 27       	eor	r27, r27
     428:	0e 94 01 02 	call	0x402	; 0x402 <rprintfu16>
     42c:	c7 01       	movw	r24, r14
     42e:	0e 94 01 02 	call	0x402	; 0x402 <rprintfu16>
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	08 95       	ret

0000043c <rprintfNum>:
     43c:	2f 92       	push	r2
     43e:	3f 92       	push	r3
     440:	4f 92       	push	r4
     442:	5f 92       	push	r5
     444:	6f 92       	push	r6
     446:	7f 92       	push	r7
     448:	8f 92       	push	r8
     44a:	9f 92       	push	r9
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	df 93       	push	r29
     45e:	cf 93       	push	r28
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	a3 97       	sbiw	r28, 0x23	; 35
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	6a a3       	std	Y+34, r22	; 0x22
     472:	24 2e       	mov	r2, r20
     474:	2b a3       	std	Y+35, r18	; 0x23
     476:	37 01       	movw	r6, r14
     478:	48 01       	movw	r8, r16
     47a:	44 23       	and	r20, r20
     47c:	51 f0       	breq	.+20     	; 0x492 <__stack+0x33>
     47e:	17 ff       	sbrs	r17, 7
     480:	08 c0       	rjmp	.+16     	; 0x492 <__stack+0x33>
     482:	ee 24       	eor	r14, r14
     484:	ff 24       	eor	r15, r15
     486:	87 01       	movw	r16, r14
     488:	e6 18       	sub	r14, r6
     48a:	f7 08       	sbc	r15, r7
     48c:	08 09       	sbc	r16, r8
     48e:	19 09       	sbc	r17, r9
     490:	02 c0       	rjmp	.+4      	; 0x496 <__stack+0x37>
     492:	84 01       	movw	r16, r8
     494:	73 01       	movw	r14, r6
     496:	2a a1       	ldd	r18, Y+34	; 0x22
     498:	21 50       	subi	r18, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	21 10       	cpse	r2, r1
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	29 1b       	sub	r18, r25
     4a2:	29 a3       	std	Y+33, r18	; 0x21
     4a4:	18 a2       	std	Y+32, r1	; 0x20
     4a6:	a8 2e       	mov	r10, r24
     4a8:	bb 24       	eor	r11, r11
     4aa:	cc 24       	eor	r12, r12
     4ac:	dd 24       	eor	r13, r13
     4ae:	c8 01       	movw	r24, r16
     4b0:	b7 01       	movw	r22, r14
     4b2:	a6 01       	movw	r20, r12
     4b4:	95 01       	movw	r18, r10
     4b6:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     4ba:	fb 01       	movw	r30, r22
     4bc:	ef 70       	andi	r30, 0x0F	; 15
     4be:	f0 70       	andi	r31, 0x00	; 0
     4c0:	e1 57       	subi	r30, 0x71	; 113
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	64 91       	lpm	r22, Z+
     4c6:	6f 8f       	std	Y+31, r22	; 0x1f
     4c8:	c8 01       	movw	r24, r16
     4ca:	b7 01       	movw	r22, r14
     4cc:	a6 01       	movw	r20, r12
     4ce:	95 01       	movw	r18, r10
     4d0:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     4d4:	c9 01       	movw	r24, r18
     4d6:	da 01       	movw	r26, r20
     4d8:	7c 01       	movw	r14, r24
     4da:	8d 01       	movw	r16, r26
     4dc:	9e e1       	ldi	r25, 0x1E	; 30
     4de:	49 2e       	mov	r4, r25
     4e0:	51 2c       	mov	r5, r1
     4e2:	4c 0e       	add	r4, r28
     4e4:	5d 1e       	adc	r5, r29
     4e6:	39 a0       	ldd	r3, Y+33	; 0x21
     4e8:	25 c0       	rjmp	.+74     	; 0x534 <__stack+0xd5>
     4ea:	e1 14       	cp	r14, r1
     4ec:	f1 04       	cpc	r15, r1
     4ee:	01 05       	cpc	r16, r1
     4f0:	11 05       	cpc	r17, r1
     4f2:	c9 f0       	breq	.+50     	; 0x526 <__stack+0xc7>
     4f4:	c8 01       	movw	r24, r16
     4f6:	b7 01       	movw	r22, r14
     4f8:	a6 01       	movw	r20, r12
     4fa:	95 01       	movw	r18, r10
     4fc:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     500:	fb 01       	movw	r30, r22
     502:	ef 70       	andi	r30, 0x0F	; 15
     504:	f0 70       	andi	r31, 0x00	; 0
     506:	e1 57       	subi	r30, 0x71	; 113
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	64 91       	lpm	r22, Z+
     50c:	f2 01       	movw	r30, r4
     50e:	60 83       	st	Z, r22
     510:	c8 01       	movw	r24, r16
     512:	b7 01       	movw	r22, r14
     514:	a6 01       	movw	r20, r12
     516:	95 01       	movw	r18, r10
     518:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     51c:	c9 01       	movw	r24, r18
     51e:	da 01       	movw	r26, r20
     520:	7c 01       	movw	r14, r24
     522:	8d 01       	movw	r16, r26
     524:	03 c0       	rjmp	.+6      	; 0x52c <__stack+0xcd>
     526:	2b a1       	ldd	r18, Y+35	; 0x23
     528:	f2 01       	movw	r30, r4
     52a:	20 83       	st	Z, r18
     52c:	3a 94       	dec	r3
     52e:	08 94       	sec
     530:	41 08       	sbc	r4, r1
     532:	51 08       	sbc	r5, r1
     534:	33 20       	and	r3, r3
     536:	c9 f6       	brne	.-78     	; 0x4ea <__stack+0x8b>
     538:	ce 01       	movw	r24, r28
     53a:	4f 96       	adiw	r24, 0x1f	; 31
     53c:	8c 01       	movw	r16, r24
     53e:	e9 a1       	ldd	r30, Y+33	; 0x21
     540:	0e 1b       	sub	r16, r30
     542:	11 09       	sbc	r17, r1
     544:	22 20       	and	r2, r2
     546:	f1 f0       	breq	.+60     	; 0x584 <__stack+0x125>
     548:	97 fe       	sbrs	r9, 7
     54a:	05 c0       	rjmp	.+10     	; 0x556 <__stack+0xf7>
     54c:	8d e2       	ldi	r24, 0x2D	; 45
     54e:	f8 01       	movw	r30, r16
     550:	82 93       	st	-Z, r24
     552:	8f 01       	movw	r16, r30
     554:	17 c0       	rjmp	.+46     	; 0x584 <__stack+0x125>
     556:	c8 01       	movw	r24, r16
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	61 14       	cp	r6, r1
     55c:	71 04       	cpc	r7, r1
     55e:	81 04       	cpc	r8, r1
     560:	91 04       	cpc	r9, r1
     562:	19 f0       	breq	.+6      	; 0x56a <__stack+0x10b>
     564:	8c 01       	movw	r16, r24
     566:	8b e2       	ldi	r24, 0x2B	; 43
     568:	02 c0       	rjmp	.+4      	; 0x56e <__stack+0x10f>
     56a:	8c 01       	movw	r16, r24
     56c:	80 e2       	ldi	r24, 0x20	; 32
     56e:	f8 01       	movw	r30, r16
     570:	80 83       	st	Z, r24
     572:	08 c0       	rjmp	.+16     	; 0x584 <__stack+0x125>
     574:	f8 01       	movw	r30, r16
     576:	81 91       	ld	r24, Z+
     578:	8f 01       	movw	r16, r30
     57a:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     57e:	fa a1       	ldd	r31, Y+34	; 0x22
     580:	f1 50       	subi	r31, 0x01	; 1
     582:	fa a3       	std	Y+34, r31	; 0x22
     584:	2a a1       	ldd	r18, Y+34	; 0x22
     586:	22 23       	and	r18, r18
     588:	a9 f7       	brne	.-22     	; 0x574 <__stack+0x115>
     58a:	a3 96       	adiw	r28, 0x23	; 35
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	5f 90       	pop	r5
     5b4:	4f 90       	pop	r4
     5b6:	3f 90       	pop	r3
     5b8:	2f 90       	pop	r2
     5ba:	08 95       	ret

000005bc <rprintf1RamRom>:
     5bc:	7f 92       	push	r7
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	df 93       	push	r29
     5d4:	cf 93       	push	r28
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	78 88       	ldd	r7, Y+16	; 0x10
     5dc:	c9 88       	ldd	r12, Y+17	; 0x11
     5de:	da 88       	ldd	r13, Y+18	; 0x12
     5e0:	53 e1       	ldi	r21, 0x13	; 19
     5e2:	e5 2e       	mov	r14, r21
     5e4:	f1 2c       	mov	r15, r1
     5e6:	ec 0e       	add	r14, r28
     5e8:	fd 1e       	adc	r15, r29
     5ea:	14 c0       	rjmp	.+40     	; 0x614 <rprintf1RamRom+0x58>
     5ec:	88 23       	and	r24, r24
     5ee:	81 f4       	brne	.+32     	; 0x610 <rprintf1RamRom+0x54>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	cf 91       	pop	r28
     5f6:	df 91       	pop	r29
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	9f 90       	pop	r9
     60a:	8f 90       	pop	r8
     60c:	7f 90       	pop	r7
     60e:	08 95       	ret
     610:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     614:	96 01       	movw	r18, r12
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	77 20       	and	r7, r7
     61c:	21 f0       	breq	.+8      	; 0x626 <rprintf1RamRom+0x6a>
     61e:	f6 01       	movw	r30, r12
     620:	69 01       	movw	r12, r18
     622:	84 91       	lpm	r24, Z+
     624:	03 c0       	rjmp	.+6      	; 0x62c <rprintf1RamRom+0x70>
     626:	f6 01       	movw	r30, r12
     628:	80 81       	ld	r24, Z
     62a:	69 01       	movw	r12, r18
     62c:	85 32       	cpi	r24, 0x25	; 37
     62e:	f1 f6       	brne	.-68     	; 0x5ec <rprintf1RamRom+0x30>
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	77 20       	and	r7, r7
     636:	21 f0       	breq	.+8      	; 0x640 <rprintf1RamRom+0x84>
     638:	f6 01       	movw	r30, r12
     63a:	69 01       	movw	r12, r18
     63c:	84 91       	lpm	r24, Z+
     63e:	03 c0       	rjmp	.+6      	; 0x646 <rprintf1RamRom+0x8a>
     640:	f6 01       	movw	r30, r12
     642:	80 81       	ld	r24, Z
     644:	69 01       	movw	r12, r18
     646:	84 36       	cpi	r24, 0x64	; 100
     648:	29 f0       	breq	.+10     	; 0x654 <rprintf1RamRom+0x98>
     64a:	88 37       	cpi	r24, 0x78	; 120
     64c:	81 f0       	breq	.+32     	; 0x66e <rprintf1RamRom+0xb2>
     64e:	83 36       	cpi	r24, 0x63	; 99
     650:	f9 f6       	brne	.-66     	; 0x610 <rprintf1RamRom+0x54>
     652:	06 c0       	rjmp	.+12     	; 0x660 <rprintf1RamRom+0xa4>
     654:	00 e1       	ldi	r16, 0x10	; 16
     656:	17 e2       	ldi	r17, 0x27	; 39
     658:	4a e0       	ldi	r20, 0x0A	; 10
     65a:	a4 2e       	mov	r10, r20
     65c:	b1 2c       	mov	r11, r1
     65e:	0c c0       	rjmp	.+24     	; 0x678 <rprintf1RamRom+0xbc>
     660:	f7 01       	movw	r30, r14
     662:	80 81       	ld	r24, Z
     664:	22 e0       	ldi	r18, 0x02	; 2
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	e2 0e       	add	r14, r18
     66a:	f3 1e       	adc	r15, r19
     66c:	d1 cf       	rjmp	.-94     	; 0x610 <rprintf1RamRom+0x54>
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	10 e1       	ldi	r17, 0x10	; 16
     672:	30 e1       	ldi	r19, 0x10	; 16
     674:	a3 2e       	mov	r10, r19
     676:	b1 2c       	mov	r11, r1
     678:	22 e0       	ldi	r18, 0x02	; 2
     67a:	82 2e       	mov	r8, r18
     67c:	91 2c       	mov	r9, r1
     67e:	8e 0c       	add	r8, r14
     680:	9f 1c       	adc	r9, r15
     682:	f7 01       	movw	r30, r14
     684:	e0 80       	ld	r14, Z
     686:	f1 80       	ldd	r15, Z+1	; 0x01
     688:	84 36       	cpi	r24, 0x64	; 100
     68a:	b1 f4       	brne	.+44     	; 0x6b8 <rprintf1RamRom+0xfc>
     68c:	f7 fe       	sbrs	r15, 7
     68e:	11 c0       	rjmp	.+34     	; 0x6b2 <rprintf1RamRom+0xf6>
     690:	f0 94       	com	r15
     692:	e1 94       	neg	r14
     694:	f1 08       	sbc	r15, r1
     696:	f3 94       	inc	r15
     698:	8d e2       	ldi	r24, 0x2D	; 45
     69a:	0e 94 88 01 	call	0x310	; 0x310 <rprintfChar>
     69e:	09 c0       	rjmp	.+18     	; 0x6b2 <rprintf1RamRom+0xf6>
     6a0:	c8 01       	movw	r24, r16
     6a2:	6a e0       	ldi	r22, 0x0A	; 10
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodhi4>
     6aa:	8b 01       	movw	r16, r22
     6ac:	62 30       	cpi	r22, 0x02	; 2
     6ae:	71 05       	cpc	r23, r1
     6b0:	18 f0       	brcs	.+6      	; 0x6b8 <rprintf1RamRom+0xfc>
     6b2:	e0 16       	cp	r14, r16
     6b4:	f1 06       	cpc	r15, r17
     6b6:	a0 f3       	brcs	.-24     	; 0x6a0 <rprintf1RamRom+0xe4>
     6b8:	c7 01       	movw	r24, r14
     6ba:	b8 01       	movw	r22, r16
     6bc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodhi4>
     6c0:	86 2f       	mov	r24, r22
     6c2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <rprintfu04>
     6c6:	c7 01       	movw	r24, r14
     6c8:	b8 01       	movw	r22, r16
     6ca:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodhi4>
     6ce:	7c 01       	movw	r14, r24
     6d0:	c8 01       	movw	r24, r16
     6d2:	b5 01       	movw	r22, r10
     6d4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodhi4>
     6d8:	8b 01       	movw	r16, r22
     6da:	61 15       	cp	r22, r1
     6dc:	71 05       	cpc	r23, r1
     6de:	61 f7       	brne	.-40     	; 0x6b8 <rprintf1RamRom+0xfc>
     6e0:	74 01       	movw	r14, r8
     6e2:	98 cf       	rjmp	.-208    	; 0x614 <rprintf1RamRom+0x58>

000006e4 <uartSetRxHandler>:
     6e4:	90 93 e3 00 	sts	0x00E3, r25
     6e8:	80 93 e2 00 	sts	0x00E2, r24
     6ec:	08 95       	ret

000006ee <uartSetBaudRate>:
     6ee:	9b 01       	movw	r18, r22
     6f0:	ac 01       	movw	r20, r24
     6f2:	60 58       	subi	r22, 0x80	; 128
     6f4:	7b 47       	sbci	r23, 0x7B	; 123
     6f6:	81 4e       	sbci	r24, 0xE1	; 225
     6f8:	9f 4f       	sbci	r25, 0xFF	; 255
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	66 0f       	add	r22, r22
     6fe:	77 1f       	adc	r23, r23
     700:	88 1f       	adc	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	fa 95       	dec	r31
     706:	d1 f7       	brne	.-12     	; 0x6fc <uartSetBaudRate+0xe>
     708:	e4 e0       	ldi	r30, 0x04	; 4
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	44 1f       	adc	r20, r20
     710:	55 1f       	adc	r21, r21
     712:	ea 95       	dec	r30
     714:	d1 f7       	brne	.-12     	; 0x70a <uartSetBaudRate+0x1c>
     716:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     71a:	21 50       	subi	r18, 0x01	; 1
     71c:	30 40       	sbci	r19, 0x00	; 0
     71e:	29 b9       	out	0x09, r18	; 9
     720:	30 bd       	out	0x20, r19	; 32
     722:	08 95       	ret

00000724 <uartGetRxBuffer>:
     724:	85 ef       	ldi	r24, 0xF5	; 245
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret

0000072a <uartGetTxBuffer>:
     72a:	8e ef       	ldi	r24, 0xFE	; 254
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	08 95       	ret

00000730 <uartSendByte>:
     730:	98 2f       	mov	r25, r24
     732:	80 91 f4 00 	lds	r24, 0x00F4
     736:	88 23       	and	r24, r24
     738:	e1 f3       	breq	.-8      	; 0x732 <uartSendByte+0x2>
     73a:	9c b9       	out	0x0c, r25	; 12
     73c:	10 92 f4 00 	sts	0x00F4, r1
     740:	08 95       	ret

00000742 <uartFlushReceiveBuffer>:
     742:	10 92 fa 00 	sts	0x00FA, r1
     746:	10 92 f9 00 	sts	0x00F9, r1
     74a:	08 95       	ret

0000074c <uartReceiveBufferIsEmpty>:
     74c:	80 91 f9 00 	lds	r24, 0x00F9
     750:	90 91 fa 00 	lds	r25, 0x00FA
     754:	89 2b       	or	r24, r25
     756:	11 f0       	breq	.+4      	; 0x75c <uartReceiveBufferIsEmpty+0x10>
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	08 95       	ret
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	08 95       	ret

00000760 <__vector_11>:
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	6c b1       	in	r22, 0x0c	; 12
     784:	80 91 e2 00 	lds	r24, 0x00E2
     788:	90 91 e3 00 	lds	r25, 0x00E3
     78c:	89 2b       	or	r24, r25
     78e:	39 f0       	breq	.+14     	; 0x79e <__vector_11+0x3e>
     790:	e0 91 e2 00 	lds	r30, 0x00E2
     794:	f0 91 e3 00 	lds	r31, 0x00E3
     798:	86 2f       	mov	r24, r22
     79a:	09 95       	icall
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <__vector_11+0x5c>
     79e:	85 ef       	ldi	r24, 0xF5	; 245
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 0c 05 	call	0xa18	; 0xa18 <bufferAddToEnd>
     7a6:	88 23       	and	r24, r24
     7a8:	49 f4       	brne	.+18     	; 0x7bc <__vector_11+0x5c>
     7aa:	80 91 06 01 	lds	r24, 0x0106
     7ae:	90 91 07 01 	lds	r25, 0x0107
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	90 93 07 01 	sts	0x0107, r25
     7b8:	80 93 06 01 	sts	0x0106, r24
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <uartAddToTxBuffer>:
     7de:	68 2f       	mov	r22, r24
     7e0:	8e ef       	ldi	r24, 0xFE	; 254
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 0c 05 	call	0xa18	; 0xa18 <bufferAddToEnd>
     7e8:	08 95       	ret

000007ea <__vector_13>:
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
     80c:	80 91 fd 00 	lds	r24, 0x00FD
     810:	88 23       	and	r24, r24
     812:	71 f0       	breq	.+28     	; 0x830 <__vector_13+0x46>
     814:	80 91 02 01 	lds	r24, 0x0102
     818:	90 91 03 01 	lds	r25, 0x0103
     81c:	89 2b       	or	r24, r25
     81e:	31 f0       	breq	.+12     	; 0x82c <__vector_13+0x42>
     820:	8e ef       	ldi	r24, 0xFE	; 254
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 a3 04 	call	0x946	; 0x946 <bufferGetFromFront>
     828:	8c b9       	out	0x0c, r24	; 12
     82a:	05 c0       	rjmp	.+10     	; 0x836 <__vector_13+0x4c>
     82c:	10 92 fd 00 	sts	0x00FD, r1
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	80 93 f4 00 	sts	0x00F4, r24
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	bf 91       	pop	r27
     83c:	af 91       	pop	r26
     83e:	9f 91       	pop	r25
     840:	8f 91       	pop	r24
     842:	7f 91       	pop	r23
     844:	6f 91       	pop	r22
     846:	5f 91       	pop	r21
     848:	4f 91       	pop	r20
     84a:	3f 91       	pop	r19
     84c:	2f 91       	pop	r18
     84e:	0f 90       	pop	r0
     850:	0f be       	out	0x3f, r0	; 63
     852:	0f 90       	pop	r0
     854:	1f 90       	pop	r1
     856:	18 95       	reti

00000858 <uartSendTxBuffer>:
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	80 93 fd 00 	sts	0x00FD, r24
     85e:	8e ef       	ldi	r24, 0xFE	; 254
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 a3 04 	call	0x946	; 0x946 <bufferGetFromFront>
     866:	98 2f       	mov	r25, r24
     868:	80 91 f4 00 	lds	r24, 0x00F4
     86c:	88 23       	and	r24, r24
     86e:	e1 f3       	breq	.-8      	; 0x868 <uartSendTxBuffer+0x10>
     870:	9c b9       	out	0x0c, r25	; 12
     872:	10 92 f4 00 	sts	0x00F4, r1
     876:	08 95       	ret

00000878 <uartReceiveByte>:
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
     87e:	80 91 f7 00 	lds	r24, 0x00F7
     882:	90 91 f8 00 	lds	r25, 0x00F8
     886:	89 2b       	or	r24, r25
     888:	69 f0       	breq	.+26     	; 0x8a4 <uartReceiveByte+0x2c>
     88a:	80 91 f9 00 	lds	r24, 0x00F9
     88e:	90 91 fa 00 	lds	r25, 0x00FA
     892:	89 2b       	or	r24, r25
     894:	39 f0       	breq	.+14     	; 0x8a4 <uartReceiveByte+0x2c>
     896:	85 ef       	ldi	r24, 0xF5	; 245
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 a3 04 	call	0x946	; 0x946 <bufferGetFromFront>
     89e:	88 83       	st	Y, r24
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <uartReceiveByte+0x2e>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <uartGetByte>:
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	0f 92       	push	r0
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	ce 01       	movw	r24, r28
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	0e 94 3c 04 	call	0x878	; 0x878 <uartReceiveByte>
     8be:	88 23       	and	r24, r24
     8c0:	19 f4       	brne	.+6      	; 0x8c8 <uartGetByte+0x1c>
     8c2:	2f ef       	ldi	r18, 0xFF	; 255
     8c4:	3f ef       	ldi	r19, 0xFF	; 255
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <uartGetByte+0x22>
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	28 2f       	mov	r18, r24
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	c9 01       	movw	r24, r18
     8d0:	0f 90       	pop	r0
     8d2:	cf 91       	pop	r28
     8d4:	df 91       	pop	r29
     8d6:	08 95       	ret

000008d8 <uartInitBuffers>:
     8d8:	85 ef       	ldi	r24, 0xF5	; 245
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	62 e6       	ldi	r22, 0x62	; 98
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	40 e4       	ldi	r20, 0x40	; 64
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	0e 94 96 04 	call	0x92c	; 0x92c <bufferInit>
     8e8:	8e ef       	ldi	r24, 0xFE	; 254
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	62 ea       	ldi	r22, 0xA2	; 162
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	40 e4       	ldi	r20, 0x40	; 64
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	0e 94 96 04 	call	0x92c	; 0x92c <bufferInit>
     8f8:	08 95       	ret

000008fa <uartInit>:
     8fa:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uartInitBuffers>
     8fe:	10 92 e3 00 	sts	0x00E3, r1
     902:	10 92 e2 00 	sts	0x00E2, r1
     906:	88 ed       	ldi	r24, 0xD8	; 216
     908:	8a b9       	out	0x0a, r24	; 10
     90a:	60 e8       	ldi	r22, 0x80	; 128
     90c:	75 e2       	ldi	r23, 0x25	; 37
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 77 03 	call	0x6ee	; 0x6ee <uartSetBaudRate>
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	80 93 f4 00 	sts	0x00F4, r24
     91c:	10 92 fd 00 	sts	0x00FD, r1
     920:	10 92 07 01 	sts	0x0107, r1
     924:	10 92 06 01 	sts	0x0106, r1
     928:	78 94       	sei
     92a:	08 95       	ret

0000092c <bufferInit>:
     92c:	fc 01       	movw	r30, r24
     92e:	8f b7       	in	r24, 0x3f	; 63
     930:	f8 94       	cli
     932:	71 83       	std	Z+1, r23	; 0x01
     934:	60 83       	st	Z, r22
     936:	53 83       	std	Z+3, r21	; 0x03
     938:	42 83       	std	Z+2, r20	; 0x02
     93a:	17 82       	std	Z+7, r1	; 0x07
     93c:	16 82       	std	Z+6, r1	; 0x06
     93e:	15 82       	std	Z+5, r1	; 0x05
     940:	14 82       	std	Z+4, r1	; 0x04
     942:	8f bf       	out	0x3f, r24	; 63
     944:	08 95       	ret

00000946 <bufferGetFromFront>:
     946:	dc 01       	movw	r26, r24
     948:	4f b7       	in	r20, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	14 96       	adiw	r26, 0x04	; 4
     94e:	8d 91       	ld	r24, X+
     950:	9c 91       	ld	r25, X
     952:	15 97       	sbiw	r26, 0x05	; 5
     954:	89 2b       	or	r24, r25
     956:	11 f4       	brne	.+4      	; 0x95c <bufferGetFromFront+0x16>
     958:	e0 e0       	ldi	r30, 0x00	; 0
     95a:	25 c0       	rjmp	.+74     	; 0x9a6 <bufferGetFromFront+0x60>
     95c:	16 96       	adiw	r26, 0x06	; 6
     95e:	8d 91       	ld	r24, X+
     960:	9c 91       	ld	r25, X
     962:	17 97       	sbiw	r26, 0x07	; 7
     964:	ed 91       	ld	r30, X+
     966:	fc 91       	ld	r31, X
     968:	11 97       	sbiw	r26, 0x01	; 1
     96a:	e8 0f       	add	r30, r24
     96c:	f9 1f       	adc	r31, r25
     96e:	e0 81       	ld	r30, Z
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	17 96       	adiw	r26, 0x07	; 7
     974:	9c 93       	st	X, r25
     976:	8e 93       	st	-X, r24
     978:	16 97       	sbiw	r26, 0x06	; 6
     97a:	12 96       	adiw	r26, 0x02	; 2
     97c:	2d 91       	ld	r18, X+
     97e:	3c 91       	ld	r19, X
     980:	13 97       	sbiw	r26, 0x03	; 3
     982:	82 17       	cp	r24, r18
     984:	93 07       	cpc	r25, r19
     986:	30 f0       	brcs	.+12     	; 0x994 <bufferGetFromFront+0x4e>
     988:	82 1b       	sub	r24, r18
     98a:	93 0b       	sbc	r25, r19
     98c:	17 96       	adiw	r26, 0x07	; 7
     98e:	9c 93       	st	X, r25
     990:	8e 93       	st	-X, r24
     992:	16 97       	sbiw	r26, 0x06	; 6
     994:	14 96       	adiw	r26, 0x04	; 4
     996:	8d 91       	ld	r24, X+
     998:	9c 91       	ld	r25, X
     99a:	15 97       	sbiw	r26, 0x05	; 5
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	15 96       	adiw	r26, 0x05	; 5
     9a0:	9c 93       	st	X, r25
     9a2:	8e 93       	st	-X, r24
     9a4:	14 97       	sbiw	r26, 0x04	; 4
     9a6:	4f bf       	out	0x3f, r20	; 63
     9a8:	8e 2f       	mov	r24, r30
     9aa:	08 95       	ret

000009ac <bufferDumpFromFront>:
     9ac:	fc 01       	movw	r30, r24
     9ae:	4f b7       	in	r20, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	84 81       	ldd	r24, Z+4	; 0x04
     9b4:	95 81       	ldd	r25, Z+5	; 0x05
     9b6:	68 17       	cp	r22, r24
     9b8:	79 07       	cpc	r23, r25
     9ba:	b0 f4       	brcc	.+44     	; 0x9e8 <bufferDumpFromFront+0x3c>
     9bc:	86 81       	ldd	r24, Z+6	; 0x06
     9be:	97 81       	ldd	r25, Z+7	; 0x07
     9c0:	86 0f       	add	r24, r22
     9c2:	97 1f       	adc	r25, r23
     9c4:	97 83       	std	Z+7, r25	; 0x07
     9c6:	86 83       	std	Z+6, r24	; 0x06
     9c8:	22 81       	ldd	r18, Z+2	; 0x02
     9ca:	33 81       	ldd	r19, Z+3	; 0x03
     9cc:	82 17       	cp	r24, r18
     9ce:	93 07       	cpc	r25, r19
     9d0:	20 f0       	brcs	.+8      	; 0x9da <bufferDumpFromFront+0x2e>
     9d2:	82 1b       	sub	r24, r18
     9d4:	93 0b       	sbc	r25, r19
     9d6:	97 83       	std	Z+7, r25	; 0x07
     9d8:	86 83       	std	Z+6, r24	; 0x06
     9da:	84 81       	ldd	r24, Z+4	; 0x04
     9dc:	95 81       	ldd	r25, Z+5	; 0x05
     9de:	86 1b       	sub	r24, r22
     9e0:	97 0b       	sbc	r25, r23
     9e2:	95 83       	std	Z+5, r25	; 0x05
     9e4:	84 83       	std	Z+4, r24	; 0x04
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <bufferDumpFromFront+0x40>
     9e8:	15 82       	std	Z+5, r1	; 0x05
     9ea:	14 82       	std	Z+4, r1	; 0x04
     9ec:	4f bf       	out	0x3f, r20	; 63
     9ee:	08 95       	ret

000009f0 <bufferGetAtIndex>:
     9f0:	fc 01       	movw	r30, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	2f b7       	in	r18, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	2f bf       	out	0x3f, r18	; 63
     9fa:	26 81       	ldd	r18, Z+6	; 0x06
     9fc:	37 81       	ldd	r19, Z+7	; 0x07
     9fe:	62 81       	ldd	r22, Z+2	; 0x02
     a00:	73 81       	ldd	r23, Z+3	; 0x03
     a02:	82 0f       	add	r24, r18
     a04:	93 1f       	adc	r25, r19
     a06:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodhi4>
     a0a:	01 90       	ld	r0, Z+
     a0c:	f0 81       	ld	r31, Z
     a0e:	e0 2d       	mov	r30, r0
     a10:	e8 0f       	add	r30, r24
     a12:	f9 1f       	adc	r31, r25
     a14:	80 81       	ld	r24, Z
     a16:	08 95       	ret

00000a18 <bufferAddToEnd>:
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
     a20:	16 2f       	mov	r17, r22
     a22:	4f b7       	in	r20, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	2c 81       	ldd	r18, Y+4	; 0x04
     a28:	3d 81       	ldd	r19, Y+5	; 0x05
     a2a:	6a 81       	ldd	r22, Y+2	; 0x02
     a2c:	7b 81       	ldd	r23, Y+3	; 0x03
     a2e:	26 17       	cp	r18, r22
     a30:	37 07       	cpc	r19, r23
     a32:	98 f4       	brcc	.+38     	; 0xa5a <bufferAddToEnd+0x42>
     a34:	8e 81       	ldd	r24, Y+6	; 0x06
     a36:	9f 81       	ldd	r25, Y+7	; 0x07
     a38:	82 0f       	add	r24, r18
     a3a:	93 1f       	adc	r25, r19
     a3c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodhi4>
     a40:	e8 81       	ld	r30, Y
     a42:	f9 81       	ldd	r31, Y+1	; 0x01
     a44:	e8 0f       	add	r30, r24
     a46:	f9 1f       	adc	r31, r25
     a48:	10 83       	st	Z, r17
     a4a:	8c 81       	ldd	r24, Y+4	; 0x04
     a4c:	9d 81       	ldd	r25, Y+5	; 0x05
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	9d 83       	std	Y+5, r25	; 0x05
     a52:	8c 83       	std	Y+4, r24	; 0x04
     a54:	4f bf       	out	0x3f, r20	; 63
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <bufferAddToEnd+0x46>
     a5a:	4f bf       	out	0x3f, r20	; 63
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	08 95       	ret

00000a66 <bufferIsNotFull>:
     a66:	fc 01       	movw	r30, r24
     a68:	8f b7       	in	r24, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	8f bf       	out	0x3f, r24	; 63
     a6e:	22 81       	ldd	r18, Z+2	; 0x02
     a70:	33 81       	ldd	r19, Z+3	; 0x03
     a72:	84 81       	ldd	r24, Z+4	; 0x04
     a74:	95 81       	ldd	r25, Z+5	; 0x05
     a76:	28 1b       	sub	r18, r24
     a78:	39 0b       	sbc	r19, r25
     a7a:	c9 01       	movw	r24, r18
     a7c:	08 95       	ret

00000a7e <bufferFlush>:
     a7e:	fc 01       	movw	r30, r24
     a80:	8f b7       	in	r24, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	15 82       	std	Z+5, r1	; 0x05
     a86:	14 82       	std	Z+4, r1	; 0x04
     a88:	8f bf       	out	0x3f, r24	; 63
     a8a:	08 95       	ret

00000a8c <a2dInit>:
     a8c:	37 9a       	sbi	0x06, 7	; 6
     a8e:	35 98       	cbi	0x06, 5	; 6
     a90:	86 b1       	in	r24, 0x06	; 6
     a92:	88 7f       	andi	r24, 0xF8	; 248
     a94:	86 60       	ori	r24, 0x06	; 6
     a96:	86 b9       	out	0x06, r24	; 6
     a98:	87 b1       	in	r24, 0x07	; 7
     a9a:	8f 73       	andi	r24, 0x3F	; 63
     a9c:	80 64       	ori	r24, 0x40	; 64
     a9e:	87 b9       	out	0x07, r24	; 7
     aa0:	3d 98       	cbi	0x07, 5	; 7
     aa2:	33 9a       	sbi	0x06, 3	; 6
     aa4:	10 92 08 01 	sts	0x0108, r1
     aa8:	78 94       	sei
     aaa:	08 95       	ret

00000aac <a2dOff>:
     aac:	33 98       	cbi	0x06, 3	; 6
     aae:	37 98       	cbi	0x06, 7	; 6
     ab0:	08 95       	ret

00000ab2 <a2dSetPrescaler>:
     ab2:	96 b1       	in	r25, 0x06	; 6
     ab4:	98 7f       	andi	r25, 0xF8	; 248
     ab6:	98 2b       	or	r25, r24
     ab8:	96 b9       	out	0x06, r25	; 6
     aba:	08 95       	ret

00000abc <a2dSetReference>:
     abc:	97 b1       	in	r25, 0x07	; 7
     abe:	82 95       	swap	r24
     ac0:	88 0f       	add	r24, r24
     ac2:	88 0f       	add	r24, r24
     ac4:	80 7c       	andi	r24, 0xC0	; 192
     ac6:	9f 73       	andi	r25, 0x3F	; 63
     ac8:	98 2b       	or	r25, r24
     aca:	97 b9       	out	0x07, r25	; 7
     acc:	08 95       	ret

00000ace <a2dSetChannel>:
     ace:	97 b1       	in	r25, 0x07	; 7
     ad0:	8f 71       	andi	r24, 0x1F	; 31
     ad2:	90 7e       	andi	r25, 0xE0	; 224
     ad4:	89 2b       	or	r24, r25
     ad6:	87 b9       	out	0x07, r24	; 7
     ad8:	08 95       	ret

00000ada <a2dStartConvert>:
     ada:	34 9a       	sbi	0x06, 4	; 6
     adc:	36 9a       	sbi	0x06, 6	; 6
     ade:	08 95       	ret

00000ae0 <a2dIsComplete>:
     ae0:	86 b1       	in	r24, 0x06	; 6
     ae2:	80 74       	andi	r24, 0x40	; 64
     ae4:	08 95       	ret

00000ae6 <a2dConvert10bit>:
     ae6:	10 92 08 01 	sts	0x0108, r1
     aea:	97 b1       	in	r25, 0x07	; 7
     aec:	8f 71       	andi	r24, 0x1F	; 31
     aee:	90 7e       	andi	r25, 0xE0	; 224
     af0:	89 2b       	or	r24, r25
     af2:	87 b9       	out	0x07, r24	; 7
     af4:	34 9a       	sbi	0x06, 4	; 6
     af6:	36 9a       	sbi	0x06, 6	; 6
     af8:	36 99       	sbic	0x06, 6	; 6
     afa:	fe cf       	rjmp	.-4      	; 0xaf8 <a2dConvert10bit+0x12>
     afc:	24 b1       	in	r18, 0x04	; 4
     afe:	45 b1       	in	r20, 0x05	; 5
     b00:	94 2f       	mov	r25, r20
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	28 2b       	or	r18, r24
     b08:	39 2b       	or	r19, r25
     b0a:	c9 01       	movw	r24, r18
     b0c:	08 95       	ret

00000b0e <a2dConvert8bit>:
     b0e:	0e 94 73 05 	call	0xae6	; 0xae6 <a2dConvert10bit>
     b12:	96 95       	lsr	r25
     b14:	87 95       	ror	r24
     b16:	96 95       	lsr	r25
     b18:	87 95       	ror	r24
     b1a:	08 95       	ret

00000b1c <__vector_14>:
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	8f 93       	push	r24
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	80 93 08 01 	sts	0x0108, r24
     b2e:	8f 91       	pop	r24
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <delay_us>:
     b3a:	08 95       	ret

00000b3c <timer0Init>:
     b3c:	83 b7       	in	r24, 0x33	; 51
     b3e:	88 7f       	andi	r24, 0xF8	; 248
     b40:	82 60       	ori	r24, 0x02	; 2
     b42:	83 bf       	out	0x33, r24	; 51
     b44:	12 be       	out	0x32, r1	; 50
     b46:	89 b7       	in	r24, 0x39	; 57
     b48:	81 60       	ori	r24, 0x01	; 1
     b4a:	89 bf       	out	0x39, r24	; 57
     b4c:	10 92 09 01 	sts	0x0109, r1
     b50:	10 92 0a 01 	sts	0x010A, r1
     b54:	10 92 0b 01 	sts	0x010B, r1
     b58:	10 92 0c 01 	sts	0x010C, r1
     b5c:	08 95       	ret

00000b5e <timer1Init>:
     b5e:	8e b5       	in	r24, 0x2e	; 46
     b60:	88 7f       	andi	r24, 0xF8	; 248
     b62:	83 60       	ori	r24, 0x03	; 3
     b64:	8e bd       	out	0x2e, r24	; 46
     b66:	1d bc       	out	0x2d, r1	; 45
     b68:	1c bc       	out	0x2c, r1	; 44
     b6a:	89 b7       	in	r24, 0x39	; 57
     b6c:	84 60       	ori	r24, 0x04	; 4
     b6e:	89 bf       	out	0x39, r24	; 57
     b70:	08 95       	ret

00000b72 <timer2Init>:
     b72:	85 b5       	in	r24, 0x25	; 37
     b74:	88 7f       	andi	r24, 0xF8	; 248
     b76:	84 60       	ori	r24, 0x04	; 4
     b78:	85 bd       	out	0x25, r24	; 37
     b7a:	14 bc       	out	0x24, r1	; 36
     b7c:	89 b7       	in	r24, 0x39	; 57
     b7e:	80 64       	ori	r24, 0x40	; 64
     b80:	89 bf       	out	0x39, r24	; 57
     b82:	10 92 11 01 	sts	0x0111, r1
     b86:	10 92 12 01 	sts	0x0112, r1
     b8a:	10 92 13 01 	sts	0x0113, r1
     b8e:	10 92 14 01 	sts	0x0114, r1
     b92:	08 95       	ret

00000b94 <timerInit>:
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	ec 51       	subi	r30, 0x1C	; 28
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	11 82       	std	Z+1, r1	; 0x01
     ba4:	10 82       	st	Z, r1
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	88 30       	cpi	r24, 0x08	; 8
     baa:	91 05       	cpc	r25, r1
     bac:	a9 f7       	brne	.-22     	; 0xb98 <timerInit+0x4>
     bae:	0e 94 9e 05 	call	0xb3c	; 0xb3c <timer0Init>
     bb2:	0e 94 af 05 	call	0xb5e	; 0xb5e <timer1Init>
     bb6:	0e 94 b9 05 	call	0xb72	; 0xb72 <timer2Init>
     bba:	78 94       	sei
     bbc:	08 95       	ret

00000bbe <timer0SetPrescaler>:
     bbe:	93 b7       	in	r25, 0x33	; 51
     bc0:	98 7f       	andi	r25, 0xF8	; 248
     bc2:	98 2b       	or	r25, r24
     bc4:	93 bf       	out	0x33, r25	; 51
     bc6:	08 95       	ret

00000bc8 <timer1SetPrescaler>:
     bc8:	9e b5       	in	r25, 0x2e	; 46
     bca:	98 7f       	andi	r25, 0xF8	; 248
     bcc:	98 2b       	or	r25, r24
     bce:	9e bd       	out	0x2e, r25	; 46
     bd0:	08 95       	ret

00000bd2 <timer2SetPrescaler>:
     bd2:	95 b5       	in	r25, 0x25	; 37
     bd4:	98 7f       	andi	r25, 0xF8	; 248
     bd6:	98 2b       	or	r25, r24
     bd8:	95 bd       	out	0x25, r25	; 37
     bda:	08 95       	ret

00000bdc <timer0GetPrescaler>:
     bdc:	83 b7       	in	r24, 0x33	; 51
     bde:	e8 2f       	mov	r30, r24
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	e7 70       	andi	r30, 0x07	; 7
     be4:	f0 70       	andi	r31, 0x00	; 0
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	e0 56       	subi	r30, 0x60	; 96
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	25 91       	lpm	r18, Z+
     bf0:	34 91       	lpm	r19, Z+
     bf2:	c9 01       	movw	r24, r18
     bf4:	08 95       	ret

00000bf6 <timer1GetPrescaler>:
     bf6:	8e b5       	in	r24, 0x2e	; 46
     bf8:	e8 2f       	mov	r30, r24
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	e7 70       	andi	r30, 0x07	; 7
     bfe:	f0 70       	andi	r31, 0x00	; 0
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	e0 56       	subi	r30, 0x60	; 96
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	25 91       	lpm	r18, Z+
     c0a:	34 91       	lpm	r19, Z+
     c0c:	c9 01       	movw	r24, r18
     c0e:	08 95       	ret

00000c10 <timer2GetPrescaler>:
     c10:	85 b5       	in	r24, 0x25	; 37
     c12:	e8 2f       	mov	r30, r24
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	e7 70       	andi	r30, 0x07	; 7
     c18:	f0 70       	andi	r31, 0x00	; 0
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	e4 55       	subi	r30, 0x54	; 84
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	25 91       	lpm	r18, Z+
     c24:	34 91       	lpm	r19, Z+
     c26:	c9 01       	movw	r24, r18
     c28:	08 95       	ret

00000c2a <timerAttach>:
     c2a:	88 30       	cpi	r24, 0x08	; 8
     c2c:	40 f4       	brcc	.+16     	; 0xc3e <timerAttach+0x14>
     c2e:	e8 2f       	mov	r30, r24
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ec 51       	subi	r30, 0x1C	; 28
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	71 83       	std	Z+1, r23	; 0x01
     c3c:	60 83       	st	Z, r22
     c3e:	08 95       	ret

00000c40 <timerDetach>:
     c40:	88 30       	cpi	r24, 0x08	; 8
     c42:	40 f4       	brcc	.+16     	; 0xc54 <timerDetach+0x14>
     c44:	e8 2f       	mov	r30, r24
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ec 51       	subi	r30, 0x1C	; 28
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	11 82       	std	Z+1, r1	; 0x01
     c52:	10 82       	st	Z, r1
     c54:	08 95       	ret

00000c56 <timerPause>:
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	ec 01       	movw	r28, r24
     c64:	12 b7       	in	r17, 0x32	; 50
     c66:	10 92 0d 01 	sts	0x010D, r1
     c6a:	10 92 0e 01 	sts	0x010E, r1
     c6e:	10 92 0f 01 	sts	0x010F, r1
     c72:	10 92 10 01 	sts	0x0110, r1
     c76:	83 b7       	in	r24, 0x33	; 51
     c78:	e8 2f       	mov	r30, r24
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	e7 70       	andi	r30, 0x07	; 7
     c7e:	f0 70       	andi	r31, 0x00	; 0
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	e0 56       	subi	r30, 0x60	; 96
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	25 91       	lpm	r18, Z+
     c8a:	34 91       	lpm	r19, Z+
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	74 e2       	ldi	r23, 0x24	; 36
     c94:	84 ef       	ldi	r24, 0xF4	; 244
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 33 09 	call	0x1266	; 0x1266 <__divmodsi4>
     c9c:	b9 01       	movw	r22, r18
     c9e:	ca 01       	movw	r24, r20
     ca0:	69 3b       	cpi	r22, 0xB9	; 185
     ca2:	2d e8       	ldi	r18, 0x8D	; 141
     ca4:	72 07       	cpc	r23, r18
     ca6:	26 e0       	ldi	r18, 0x06	; 6
     ca8:	82 07       	cpc	r24, r18
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	92 07       	cpc	r25, r18
     cae:	a0 f4       	brcc	.+40     	; 0xcd8 <timerPause+0x82>
     cb0:	37 e2       	ldi	r19, 0x27	; 39
     cb2:	c1 31       	cpi	r28, 0x11	; 17
     cb4:	d3 07       	cpc	r29, r19
     cb6:	80 f4       	brcc	.+32     	; 0xcd8 <timerPause+0x82>
     cb8:	9e 01       	movw	r18, r28
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsi3>
     cc2:	28 ee       	ldi	r18, 0xE8	; 232
     cc4:	33 e0       	ldi	r19, 0x03	; 3
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     cce:	c9 01       	movw	r24, r18
     cd0:	da 01       	movw	r26, r20
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	21 c0       	rjmp	.+66     	; 0xd1a <timerPause+0xc4>
     cd8:	28 ee       	ldi	r18, 0xE8	; 232
     cda:	33 e0       	ldi	r19, 0x03	; 3
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     ce4:	ca 01       	movw	r24, r20
     ce6:	b9 01       	movw	r22, r18
     ce8:	9e 01       	movw	r18, r28
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsi3>
     cf2:	13 c0       	rjmp	.+38     	; 0xd1a <timerPause+0xc4>
     cf4:	80 91 0d 01 	lds	r24, 0x010D
     cf8:	90 91 0e 01 	lds	r25, 0x010E
     cfc:	a0 91 0f 01 	lds	r26, 0x010F
     d00:	b0 91 10 01 	lds	r27, 0x0110
     d04:	85 b7       	in	r24, 0x35	; 53
     d06:	8f 74       	andi	r24, 0x4F	; 79
     d08:	85 bf       	out	0x35, r24	; 53
     d0a:	85 b7       	in	r24, 0x35	; 53
     d0c:	80 64       	ori	r24, 0x40	; 64
     d0e:	85 bf       	out	0x35, r24	; 53
     d10:	88 95       	sleep
     d12:	85 b7       	in	r24, 0x35	; 53
     d14:	8f 7b       	andi	r24, 0xBF	; 191
     d16:	85 bf       	out	0x35, r24	; 53
     d18:	08 c0       	rjmp	.+16     	; 0xd2a <timerPause+0xd4>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	21 0f       	add	r18, r17
     d20:	31 1d       	adc	r19, r1
     d22:	41 1d       	adc	r20, r1
     d24:	51 1d       	adc	r21, r1
     d26:	79 01       	movw	r14, r18
     d28:	8a 01       	movw	r16, r20
     d2a:	20 91 0d 01 	lds	r18, 0x010D
     d2e:	30 91 0e 01 	lds	r19, 0x010E
     d32:	40 91 0f 01 	lds	r20, 0x010F
     d36:	50 91 10 01 	lds	r21, 0x0110
     d3a:	82 b7       	in	r24, 0x32	; 50
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	54 2f       	mov	r21, r20
     d44:	43 2f       	mov	r20, r19
     d46:	32 2f       	mov	r19, r18
     d48:	22 27       	eor	r18, r18
     d4a:	82 2b       	or	r24, r18
     d4c:	93 2b       	or	r25, r19
     d4e:	a4 2b       	or	r26, r20
     d50:	b5 2b       	or	r27, r21
     d52:	8e 15       	cp	r24, r14
     d54:	9f 05       	cpc	r25, r15
     d56:	a0 07       	cpc	r26, r16
     d58:	b1 07       	cpc	r27, r17
     d5a:	60 f2       	brcs	.-104    	; 0xcf4 <timerPause+0x9e>
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	08 95       	ret

00000d6a <timer0ClearOverflowCount>:
     d6a:	10 92 09 01 	sts	0x0109, r1
     d6e:	10 92 0a 01 	sts	0x010A, r1
     d72:	10 92 0b 01 	sts	0x010B, r1
     d76:	10 92 0c 01 	sts	0x010C, r1
     d7a:	08 95       	ret

00000d7c <timer0GetOverflowCount>:
     d7c:	20 91 09 01 	lds	r18, 0x0109
     d80:	30 91 0a 01 	lds	r19, 0x010A
     d84:	40 91 0b 01 	lds	r20, 0x010B
     d88:	50 91 0c 01 	lds	r21, 0x010C
     d8c:	b9 01       	movw	r22, r18
     d8e:	ca 01       	movw	r24, r20
     d90:	08 95       	ret

00000d92 <timer2ClearOverflowCount>:
     d92:	10 92 11 01 	sts	0x0111, r1
     d96:	10 92 12 01 	sts	0x0112, r1
     d9a:	10 92 13 01 	sts	0x0113, r1
     d9e:	10 92 14 01 	sts	0x0114, r1
     da2:	08 95       	ret

00000da4 <timer2GetOverflowCount>:
     da4:	20 91 11 01 	lds	r18, 0x0111
     da8:	30 91 12 01 	lds	r19, 0x0112
     dac:	40 91 13 01 	lds	r20, 0x0113
     db0:	50 91 14 01 	lds	r21, 0x0114
     db4:	b9 01       	movw	r22, r18
     db6:	ca 01       	movw	r24, r20
     db8:	08 95       	ret

00000dba <timer1PWMInit>:
     dba:	89 30       	cpi	r24, 0x09	; 9
     dbc:	31 f4       	brne	.+12     	; 0xdca <timer1PWMInit+0x10>
     dbe:	8f b5       	in	r24, 0x2f	; 47
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	8f bd       	out	0x2f, r24	; 47
     dc4:	8f b5       	in	r24, 0x2f	; 47
     dc6:	8e 7f       	andi	r24, 0xFE	; 254
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <timer1PWMInit+0x24>
     dca:	8a 30       	cpi	r24, 0x0A	; 10
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <timer1PWMInit+0x1a>
     dce:	8f b5       	in	r24, 0x2f	; 47
     dd0:	82 60       	ori	r24, 0x02	; 2
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <timer1PWMInit+0x1e>
     dd4:	8f b5       	in	r24, 0x2f	; 47
     dd6:	8d 7f       	andi	r24, 0xFD	; 253
     dd8:	8f bd       	out	0x2f, r24	; 47
     dda:	8f b5       	in	r24, 0x2f	; 47
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	8f bd       	out	0x2f, r24	; 47
     de0:	1b bc       	out	0x2b, r1	; 43
     de2:	1a bc       	out	0x2a, r1	; 42
     de4:	19 bc       	out	0x29, r1	; 41
     de6:	18 bc       	out	0x28, r1	; 40
     de8:	08 95       	ret

00000dea <timer1PWMInitICR>:
     dea:	2f b5       	in	r18, 0x2f	; 47
     dec:	2e 7f       	andi	r18, 0xFE	; 254
     dee:	2f bd       	out	0x2f, r18	; 47
     df0:	2f b5       	in	r18, 0x2f	; 47
     df2:	22 60       	ori	r18, 0x02	; 2
     df4:	2f bd       	out	0x2f, r18	; 47
     df6:	2e b5       	in	r18, 0x2e	; 46
     df8:	28 60       	ori	r18, 0x08	; 8
     dfa:	2e bd       	out	0x2e, r18	; 46
     dfc:	2e b5       	in	r18, 0x2e	; 46
     dfe:	20 61       	ori	r18, 0x10	; 16
     e00:	2e bd       	out	0x2e, r18	; 46
     e02:	97 bd       	out	0x27, r25	; 39
     e04:	86 bd       	out	0x26, r24	; 38
     e06:	1b bc       	out	0x2b, r1	; 43
     e08:	1a bc       	out	0x2a, r1	; 42
     e0a:	19 bc       	out	0x29, r1	; 41
     e0c:	18 bc       	out	0x28, r1	; 40
     e0e:	08 95       	ret

00000e10 <timer1PWMOff>:
     e10:	8f b5       	in	r24, 0x2f	; 47
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	8f bd       	out	0x2f, r24	; 47
     e16:	8f b5       	in	r24, 0x2f	; 47
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	8f bd       	out	0x2f, r24	; 47
     e1c:	8f b5       	in	r24, 0x2f	; 47
     e1e:	8f 77       	andi	r24, 0x7F	; 127
     e20:	8f bd       	out	0x2f, r24	; 47
     e22:	8f b5       	in	r24, 0x2f	; 47
     e24:	8f 7b       	andi	r24, 0xBF	; 191
     e26:	8f bd       	out	0x2f, r24	; 47
     e28:	8f b5       	in	r24, 0x2f	; 47
     e2a:	8f 7d       	andi	r24, 0xDF	; 223
     e2c:	8f bd       	out	0x2f, r24	; 47
     e2e:	8f b5       	in	r24, 0x2f	; 47
     e30:	8f 7e       	andi	r24, 0xEF	; 239
     e32:	8f bd       	out	0x2f, r24	; 47
     e34:	08 95       	ret

00000e36 <timer1PWMAOn>:
     e36:	8f b5       	in	r24, 0x2f	; 47
     e38:	80 68       	ori	r24, 0x80	; 128
     e3a:	8f bd       	out	0x2f, r24	; 47
     e3c:	8f b5       	in	r24, 0x2f	; 47
     e3e:	8f 7b       	andi	r24, 0xBF	; 191
     e40:	8f bd       	out	0x2f, r24	; 47
     e42:	08 95       	ret

00000e44 <timer1PWMBOn>:
     e44:	8f b5       	in	r24, 0x2f	; 47
     e46:	80 62       	ori	r24, 0x20	; 32
     e48:	8f bd       	out	0x2f, r24	; 47
     e4a:	8f b5       	in	r24, 0x2f	; 47
     e4c:	8f 7e       	andi	r24, 0xEF	; 239
     e4e:	8f bd       	out	0x2f, r24	; 47
     e50:	08 95       	ret

00000e52 <timer1PWMAOff>:
     e52:	8f b5       	in	r24, 0x2f	; 47
     e54:	8f 77       	andi	r24, 0x7F	; 127
     e56:	8f bd       	out	0x2f, r24	; 47
     e58:	8f b5       	in	r24, 0x2f	; 47
     e5a:	8f 7b       	andi	r24, 0xBF	; 191
     e5c:	8f bd       	out	0x2f, r24	; 47
     e5e:	08 95       	ret

00000e60 <timer1PWMBOff>:
     e60:	8f b5       	in	r24, 0x2f	; 47
     e62:	8f 7d       	andi	r24, 0xDF	; 223
     e64:	8f bd       	out	0x2f, r24	; 47
     e66:	8f b5       	in	r24, 0x2f	; 47
     e68:	8f 7e       	andi	r24, 0xEF	; 239
     e6a:	8f bd       	out	0x2f, r24	; 47
     e6c:	08 95       	ret

00000e6e <timer1PWMASet>:
     e6e:	9b bd       	out	0x2b, r25	; 43
     e70:	8a bd       	out	0x2a, r24	; 42
     e72:	08 95       	ret

00000e74 <timer1PWMBSet>:
     e74:	99 bd       	out	0x29, r25	; 41
     e76:	88 bd       	out	0x28, r24	; 40
     e78:	08 95       	ret

00000e7a <__vector_9>:
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	80 91 09 01 	lds	r24, 0x0109
     ea0:	90 91 0a 01 	lds	r25, 0x010A
     ea4:	a0 91 0b 01 	lds	r26, 0x010B
     ea8:	b0 91 0c 01 	lds	r27, 0x010C
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	a1 1d       	adc	r26, r1
     eb0:	b1 1d       	adc	r27, r1
     eb2:	80 93 09 01 	sts	0x0109, r24
     eb6:	90 93 0a 01 	sts	0x010A, r25
     eba:	a0 93 0b 01 	sts	0x010B, r26
     ebe:	b0 93 0c 01 	sts	0x010C, r27
     ec2:	80 91 0d 01 	lds	r24, 0x010D
     ec6:	90 91 0e 01 	lds	r25, 0x010E
     eca:	a0 91 0f 01 	lds	r26, 0x010F
     ece:	b0 91 10 01 	lds	r27, 0x0110
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	a1 1d       	adc	r26, r1
     ed6:	b1 1d       	adc	r27, r1
     ed8:	80 93 0d 01 	sts	0x010D, r24
     edc:	90 93 0e 01 	sts	0x010E, r25
     ee0:	a0 93 0f 01 	sts	0x010F, r26
     ee4:	b0 93 10 01 	sts	0x0110, r27
     ee8:	80 91 e4 00 	lds	r24, 0x00E4
     eec:	90 91 e5 00 	lds	r25, 0x00E5
     ef0:	89 2b       	or	r24, r25
     ef2:	29 f0       	breq	.+10     	; 0xefe <__vector_9+0x84>
     ef4:	e0 91 e4 00 	lds	r30, 0x00E4
     ef8:	f0 91 e5 00 	lds	r31, 0x00E5
     efc:	09 95       	icall
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_8>:
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
     f42:	80 91 e6 00 	lds	r24, 0x00E6
     f46:	90 91 e7 00 	lds	r25, 0x00E7
     f4a:	89 2b       	or	r24, r25
     f4c:	29 f0       	breq	.+10     	; 0xf58 <__vector_8+0x38>
     f4e:	e0 91 e6 00 	lds	r30, 0x00E6
     f52:	f0 91 e7 00 	lds	r31, 0x00E7
     f56:	09 95       	icall
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_4>:
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
     f9c:	80 91 11 01 	lds	r24, 0x0111
     fa0:	90 91 12 01 	lds	r25, 0x0112
     fa4:	a0 91 13 01 	lds	r26, 0x0113
     fa8:	b0 91 14 01 	lds	r27, 0x0114
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	a1 1d       	adc	r26, r1
     fb0:	b1 1d       	adc	r27, r1
     fb2:	80 93 11 01 	sts	0x0111, r24
     fb6:	90 93 12 01 	sts	0x0112, r25
     fba:	a0 93 13 01 	sts	0x0113, r26
     fbe:	b0 93 14 01 	sts	0x0114, r27
     fc2:	80 91 ee 00 	lds	r24, 0x00EE
     fc6:	90 91 ef 00 	lds	r25, 0x00EF
     fca:	89 2b       	or	r24, r25
     fcc:	29 f0       	breq	.+10     	; 0xfd8 <__vector_4+0x5e>
     fce:	e0 91 ee 00 	lds	r30, 0x00EE
     fd2:	f0 91 ef 00 	lds	r31, 0x00EF
     fd6:	09 95       	icall
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	bf 91       	pop	r27
     fde:	af 91       	pop	r26
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	7f 91       	pop	r23
     fe6:	6f 91       	pop	r22
     fe8:	5f 91       	pop	r21
     fea:	4f 91       	pop	r20
     fec:	3f 91       	pop	r19
     fee:	2f 91       	pop	r18
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_19>:
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
    101c:	80 91 f2 00 	lds	r24, 0x00F2
    1020:	90 91 f3 00 	lds	r25, 0x00F3
    1024:	89 2b       	or	r24, r25
    1026:	29 f0       	breq	.+10     	; 0x1032 <__vector_19+0x38>
    1028:	e0 91 f2 00 	lds	r30, 0x00F2
    102c:	f0 91 f3 00 	lds	r31, 0x00F3
    1030:	09 95       	icall
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <__vector_6>:
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    1076:	80 91 e8 00 	lds	r24, 0x00E8
    107a:	90 91 e9 00 	lds	r25, 0x00E9
    107e:	89 2b       	or	r24, r25
    1080:	29 f0       	breq	.+10     	; 0x108c <__vector_6+0x38>
    1082:	e0 91 e8 00 	lds	r30, 0x00E8
    1086:	f0 91 e9 00 	lds	r31, 0x00E9
    108a:	09 95       	icall
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_7>:
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	80 91 ea 00 	lds	r24, 0x00EA
    10d4:	90 91 eb 00 	lds	r25, 0x00EB
    10d8:	89 2b       	or	r24, r25
    10da:	29 f0       	breq	.+10     	; 0x10e6 <__vector_7+0x38>
    10dc:	e0 91 ea 00 	lds	r30, 0x00EA
    10e0:	f0 91 eb 00 	lds	r31, 0x00EB
    10e4:	09 95       	icall
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <__vector_5>:
    1108:	1f 92       	push	r1
    110a:	0f 92       	push	r0
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	0f 92       	push	r0
    1110:	11 24       	eor	r1, r1
    1112:	2f 93       	push	r18
    1114:	3f 93       	push	r19
    1116:	4f 93       	push	r20
    1118:	5f 93       	push	r21
    111a:	6f 93       	push	r22
    111c:	7f 93       	push	r23
    111e:	8f 93       	push	r24
    1120:	9f 93       	push	r25
    1122:	af 93       	push	r26
    1124:	bf 93       	push	r27
    1126:	ef 93       	push	r30
    1128:	ff 93       	push	r31
    112a:	80 91 ec 00 	lds	r24, 0x00EC
    112e:	90 91 ed 00 	lds	r25, 0x00ED
    1132:	89 2b       	or	r24, r25
    1134:	29 f0       	breq	.+10     	; 0x1140 <__vector_5+0x38>
    1136:	e0 91 ec 00 	lds	r30, 0x00EC
    113a:	f0 91 ed 00 	lds	r31, 0x00ED
    113e:	09 95       	icall
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <__vector_3>:
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	2f 93       	push	r18
    116e:	3f 93       	push	r19
    1170:	4f 93       	push	r20
    1172:	5f 93       	push	r21
    1174:	6f 93       	push	r22
    1176:	7f 93       	push	r23
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25
    117c:	af 93       	push	r26
    117e:	bf 93       	push	r27
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31
    1184:	80 91 f0 00 	lds	r24, 0x00F0
    1188:	90 91 f1 00 	lds	r25, 0x00F1
    118c:	89 2b       	or	r24, r25
    118e:	29 f0       	breq	.+10     	; 0x119a <__vector_3+0x38>
    1190:	e0 91 f0 00 	lds	r30, 0x00F0
    1194:	f0 91 f1 00 	lds	r31, 0x00F1
    1198:	09 95       	icall
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <__mulsi3>:
    11bc:	62 9f       	mul	r22, r18
    11be:	d0 01       	movw	r26, r0
    11c0:	73 9f       	mul	r23, r19
    11c2:	f0 01       	movw	r30, r0
    11c4:	82 9f       	mul	r24, r18
    11c6:	e0 0d       	add	r30, r0
    11c8:	f1 1d       	adc	r31, r1
    11ca:	64 9f       	mul	r22, r20
    11cc:	e0 0d       	add	r30, r0
    11ce:	f1 1d       	adc	r31, r1
    11d0:	92 9f       	mul	r25, r18
    11d2:	f0 0d       	add	r31, r0
    11d4:	83 9f       	mul	r24, r19
    11d6:	f0 0d       	add	r31, r0
    11d8:	74 9f       	mul	r23, r20
    11da:	f0 0d       	add	r31, r0
    11dc:	65 9f       	mul	r22, r21
    11de:	f0 0d       	add	r31, r0
    11e0:	99 27       	eor	r25, r25
    11e2:	72 9f       	mul	r23, r18
    11e4:	b0 0d       	add	r27, r0
    11e6:	e1 1d       	adc	r30, r1
    11e8:	f9 1f       	adc	r31, r25
    11ea:	63 9f       	mul	r22, r19
    11ec:	b0 0d       	add	r27, r0
    11ee:	e1 1d       	adc	r30, r1
    11f0:	f9 1f       	adc	r31, r25
    11f2:	bd 01       	movw	r22, r26
    11f4:	cf 01       	movw	r24, r30
    11f6:	11 24       	eor	r1, r1
    11f8:	08 95       	ret

000011fa <__udivmodhi4>:
    11fa:	aa 1b       	sub	r26, r26
    11fc:	bb 1b       	sub	r27, r27
    11fe:	51 e1       	ldi	r21, 0x11	; 17
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <__udivmodhi4_ep>

00001202 <__udivmodhi4_loop>:
    1202:	aa 1f       	adc	r26, r26
    1204:	bb 1f       	adc	r27, r27
    1206:	a6 17       	cp	r26, r22
    1208:	b7 07       	cpc	r27, r23
    120a:	10 f0       	brcs	.+4      	; 0x1210 <__udivmodhi4_ep>
    120c:	a6 1b       	sub	r26, r22
    120e:	b7 0b       	sbc	r27, r23

00001210 <__udivmodhi4_ep>:
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	5a 95       	dec	r21
    1216:	a9 f7       	brne	.-22     	; 0x1202 <__udivmodhi4_loop>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	08 95       	ret

00001222 <__udivmodsi4>:
    1222:	a1 e2       	ldi	r26, 0x21	; 33
    1224:	1a 2e       	mov	r1, r26
    1226:	aa 1b       	sub	r26, r26
    1228:	bb 1b       	sub	r27, r27
    122a:	fd 01       	movw	r30, r26
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <__udivmodsi4_ep>

0000122e <__udivmodsi4_loop>:
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	ee 1f       	adc	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	a2 17       	cp	r26, r18
    1238:	b3 07       	cpc	r27, r19
    123a:	e4 07       	cpc	r30, r20
    123c:	f5 07       	cpc	r31, r21
    123e:	20 f0       	brcs	.+8      	; 0x1248 <__udivmodsi4_ep>
    1240:	a2 1b       	sub	r26, r18
    1242:	b3 0b       	sbc	r27, r19
    1244:	e4 0b       	sbc	r30, r20
    1246:	f5 0b       	sbc	r31, r21

00001248 <__udivmodsi4_ep>:
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a 94       	dec	r1
    1252:	69 f7       	brne	.-38     	; 0x122e <__udivmodsi4_loop>
    1254:	60 95       	com	r22
    1256:	70 95       	com	r23
    1258:	80 95       	com	r24
    125a:	90 95       	com	r25
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	bd 01       	movw	r22, r26
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret

00001266 <__divmodsi4>:
    1266:	97 fb       	bst	r25, 7
    1268:	09 2e       	mov	r0, r25
    126a:	05 26       	eor	r0, r21
    126c:	0e d0       	rcall	.+28     	; 0x128a <__divmodsi4_neg1>
    126e:	57 fd       	sbrc	r21, 7
    1270:	04 d0       	rcall	.+8      	; 0x127a <__divmodsi4_neg2>
    1272:	d7 df       	rcall	.-82     	; 0x1222 <__udivmodsi4>
    1274:	0a d0       	rcall	.+20     	; 0x128a <__divmodsi4_neg1>
    1276:	00 1c       	adc	r0, r0
    1278:	38 f4       	brcc	.+14     	; 0x1288 <__divmodsi4_exit>

0000127a <__divmodsi4_neg2>:
    127a:	50 95       	com	r21
    127c:	40 95       	com	r20
    127e:	30 95       	com	r19
    1280:	21 95       	neg	r18
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	4f 4f       	sbci	r20, 0xFF	; 255
    1286:	5f 4f       	sbci	r21, 0xFF	; 255

00001288 <__divmodsi4_exit>:
    1288:	08 95       	ret

0000128a <__divmodsi4_neg1>:
    128a:	f6 f7       	brtc	.-4      	; 0x1288 <__divmodsi4_exit>
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	08 95       	ret

0000129c <_exit>:
    129c:	f8 94       	cli

0000129e <__stop_program>:
    129e:	ff cf       	rjmp	.-2      	; 0x129e <__stop_program>
