
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f4  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000157  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001be  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001cd  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009c  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Peek_A_Boo>:
	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
}

void Peek_A_Boo()
{
	MrLCDsControl |= 1<<LightSwitch;
  6c:	95 9a       	sbi	0x12, 5	; 18
	asm volatile ("nop");
  6e:	00 00       	nop
	asm volatile ("nop");
  70:	00 00       	nop
	MrLCDsControl &= ~1<<LightSwitch;
  72:	82 b3       	in	r24, 0x12	; 18
  74:	80 7c       	andi	r24, 0xC0	; 192
  76:	82 bb       	out	0x12, r24	; 18
  78:	08 95       	ret

0000007a <Check_IF_MrLCD_isBusy>:
	}
}

void Check_IF_MrLCD_isBusy()
{
	DataDir_MrLCDsCrib = 0;
  7a:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |= 1<<ReadWrite;
  7c:	96 9a       	sbi	0x12, 6	; 18
	MrLCDsControl &= ~1<<BiPolarMood;
  7e:	82 b3       	in	r24, 0x12	; 18
  80:	88 7f       	andi	r24, 0xF8	; 248
  82:	82 bb       	out	0x12, r24	; 18

	while (MrLCDsCrib >= 0x80)
  84:	c7 9b       	sbis	0x18, 7	; 24
  86:	04 c0       	rjmp	.+8      	; 0x90 <Check_IF_MrLCD_isBusy+0x16>
	{
		Peek_A_Boo();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
{
	DataDir_MrLCDsCrib = 0;
	MrLCDsControl |= 1<<ReadWrite;
	MrLCDsControl &= ~1<<BiPolarMood;

	while (MrLCDsCrib >= 0x80)
  8c:	c7 99       	sbic	0x18, 7	; 24
  8e:	fc cf       	rjmp	.-8      	; 0x88 <Check_IF_MrLCD_isBusy+0xe>
	{
		Peek_A_Boo();
	}
	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 bb       	out	0x17, r24	; 23
  94:	08 95       	ret

00000096 <Send_A_Command>:
	asm volatile ("nop");
	MrLCDsControl &= ~1<<LightSwitch;
}

void Send_A_Command(unsigned char command)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
	Check_IF_MrLCD_isBusy();
  9a:	0e 94 3d 00 	call	0x7a	; 0x7a <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = command;
  9e:	c8 bb       	out	0x18, r28	; 24
	MrLCDsControl &= ~ ((1<<ReadWrite)|(1<<BiPolarMood));
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	8b 7b       	andi	r24, 0xBB	; 187
  a4:	82 bb       	out	0x12, r24	; 18
	Peek_A_Boo();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
	MrLCDsCrib = 0;
  aa:	18 ba       	out	0x18, r1	; 24
}
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <Send_A_Character>:

void Send_A_Character(unsigned char character)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	Check_IF_MrLCD_isBusy();
  b4:	0e 94 3d 00 	call	0x7a	; 0x7a <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = character;
  b8:	c8 bb       	out	0x18, r28	; 24
	MrLCDsControl &= ~ (1<<ReadWrite);
  ba:	96 98       	cbi	0x12, 6	; 18
	MrLCDsControl |= 1<<BiPolarMood;
  bc:	92 9a       	sbi	0x12, 2	; 18
	Peek_A_Boo();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
	MrLCDsCrib = 0;
  c2:	18 ba       	out	0x18, r1	; 24
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <main>:
void Send_A_Character(unsigned char character);
void Send_A_String(char *string);

int main(void)
{
	DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite | 1<<BiPolarMood;
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	84 66       	ori	r24, 0x64	; 100
  cc:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0xc>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x16>
  de:	00 00       	nop
	_delay_ms(20);

	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <Send_A_Command>
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	9e e4       	ldi	r25, 0x4E	; 78
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x28>
  f0:	00 00       	nop
	_delay_ms(5);
	Send_A_Command(0x38);
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	0e 94 4b 00 	call	0x96	; 0x96 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8b e2       	ldi	r24, 0x2B	; 43
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x34>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x3a>
 102:	00 00       	nop
	_delay_us(75);
	Send_A_Command(0b00001110);
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	0e 94 4b 00 	call	0x96	; 0x96 <Send_A_Command>
 10a:	8b e2       	ldi	r24, 0x2B	; 43
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x46>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x4c>
 114:	00 00       	nop
	_delay_us(75);

	Send_A_Character(0x4E); //N
 116:	8e e4       	ldi	r24, 0x4E	; 78
 118:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x65); //e
 11c:	85 e6       	ldi	r24, 0x65	; 101
 11e:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x77); //w
 122:	87 e7       	ldi	r24, 0x77	; 119
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x62); //b
 128:	82 e6       	ldi	r24, 0x62	; 98
 12a:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x69); //i
 12e:	89 e6       	ldi	r24, 0x69	; 105
 130:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x65); //e
 134:	85 e6       	ldi	r24, 0x65	; 101
 136:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x48); //H
 13a:	88 e4       	ldi	r24, 0x48	; 72
 13c:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x61); //a
 140:	81 e6       	ldi	r24, 0x61	; 97
 142:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x63); //c
 146:	83 e6       	ldi	r24, 0x63	; 99
 148:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x6B); //k
 14c:	8b e6       	ldi	r24, 0x6B	; 107
 14e:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x2E); //.
 152:	8e e2       	ldi	r24, 0x2E	; 46
 154:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x63); //c
 158:	83 e6       	ldi	r24, 0x63	; 99
 15a:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x6F); //o
 15e:	8f e6       	ldi	r24, 0x6F	; 111
 160:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
	Send_A_Character(0x6D); //m
 164:	8d e6       	ldi	r24, 0x6D	; 109
 166:	0e 94 58 00 	call	0xb0	; 0xb0 <Send_A_Character>
 16a:	ff cf       	rjmp	.-2      	; 0x16a <main+0xa2>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
