
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000043c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a8  008000a8  00000518  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b1  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cb  00000000  00000000  00000609  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d4  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ea  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015a  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031d  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3a       	cpi	r26, 0xAC	; 172
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8a:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_14>:
	}
}


ISR (ADC_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	itoa ( ADCH,ADC_result,10);	//Convert ADC result to string
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	68 ea       	ldi	r22, 0xA8	; 168
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	4a e0       	ldi	r20, 0x0A	; 10
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <itoa>
	LCDGotoXY(1,1);		//Select location on LCD to display variable
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDGotoXY>
	LCDWriteStringXY(0,1,ADC_result);	//Go to location and display string on LCD
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDGotoXY>
  d4:	88 ea       	ldi	r24, 0xA8	; 168
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDWriteString>
	LCDWriteString(" ");
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDWriteString>
	ADCSRA |= 1 << ADSC;	//Start next conversion
  e4:	36 9a       	sbi	0x06, 6	; 6
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	20 e9       	ldi	r18, 0x90	; 144
  ec:	31 e0       	ldi	r19, 0x01	; 1
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <__vector_14+0x5e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <__vector_14+0x5c>
	_delay_ms(80);
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:
#include "lcd.h"
char ADC_result [4];	//LCD string variable declaration

int main (void)
{
	LCDInit(LS_ULINE);   //initialise LCD
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCDInit>
	
	//Configure ADC
	ADCSRA |= 1 << ADPS2 |1 << ADPS1 | 1 << ADPS0;	//Enable pre-scaler : Enabled by clock pulse ( range= 1600/5=320 to 160/2=80)
 120:	86 b1       	in	r24, 0x06	; 6
 122:	87 60       	ori	r24, 0x07	; 7
 124:	86 b9       	out	0x06, r24	; 6
	ADMUX |= 1 << ADLAR;	//8-bit or 10-bit results
 126:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX |= 1 << REFS0;	//Deciding reference voltage
 128:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 1 << ADIE;	//Enable interrupts for ADC
 12a:	33 9a       	sbi	0x06, 3	; 6
	sei();	//Declare global interrupts
 12c:	78 94       	sei
	ADCSRA |= 1 << ADEN;	//Turn on the ADC
 12e:	37 9a       	sbi	0x06, 7	; 6
	
	//Start first conversion
	ADCSRA |= 1 << ADSC;
 130:	36 9a       	sbi	0x06, 6	; 6
	
	LCDWriteStringXY(0,0,"ADC_1");
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDGotoXY>
 13a:	82 e6       	ldi	r24, 0x62	; 98
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDWriteString>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x28>

00000144 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 144:	87 b3       	in	r24, 0x17	; 23
 146:	8f 70       	andi	r24, 0x0F	; 15
 148:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 14a:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_RS();		//Read status
 14c:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8a 95       	dec	r24
 152:	f1 f7       	brne	.-4      	; 0x150 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 154:	22 e0       	ldi	r18, 0x02	; 2
 156:	35 e0       	ldi	r19, 0x05	; 5
 158:	c4 9a       	sbi	0x18, 4	; 24
 15a:	82 2f       	mov	r24, r18
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 160:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	92 2f       	mov	r25, r18
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 16a:	c4 98       	cbi	0x18, 4	; 24
 16c:	93 2f       	mov	r25, r19
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 172:	c4 9a       	sbi	0x18, 4	; 24
 174:	92 2f       	mov	r25, r18
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 17a:	96 b3       	in	r25, 0x16	; 22
 17c:	92 2f       	mov	r25, r18
 17e:	9a 95       	dec	r25
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 182:	c4 98       	cbi	0x18, 4	; 24
 184:	93 2f       	mov	r25, r19
 186:	9a 95       	dec	r25
 188:	f1 f7       	brne	.-4      	; 0x186 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 18a:	87 fd       	sbrc	r24, 7
 18c:	e5 cf       	rjmp	.-54     	; 0x158 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 18e:	c1 98       	cbi	0x18, 1	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 190:	87 b3       	in	r24, 0x17	; 23
 192:	80 6f       	ori	r24, 0xF0	; 240
 194:	87 bb       	out	0x17, r24	; 23

}
 196:	08 95       	ret

00000198 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
 198:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 19a:	66 23       	and	r22, r22
 19c:	11 f4       	brne	.+4      	; 0x1a2 <LCDByte+0xa>
	CLEAR_RS();
 19e:	c0 98       	cbi	0x18, 0	; 24
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <LCDByte+0xc>
else
	SET_RS();
 1a2:	c0 9a       	sbi	0x18, 0	; 24
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 1aa:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	92 2f       	mov	r25, r18
 1b0:	90 7f       	andi	r25, 0xF0	; 240
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	95 e0       	ldi	r25, 0x05	; 5
 1ba:	89 2f       	mov	r24, r25
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1c0:	c4 98       	cbi	0x18, 4	; 24
 1c2:	89 2f       	mov	r24, r25
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
 1c8:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	22 95       	swap	r18
 1ce:	20 7f       	andi	r18, 0xF0	; 240
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	89 2f       	mov	r24, r25
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1dc:	c4 98       	cbi	0x18, 4	; 24
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1e2:	0e 94 a2 00 	call	0x144	; 0x144 <LCDBusyLoop>
}
 1e6:	08 95       	ret

000001e8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
 1ee:	10 c0       	rjmp	.+32     	; 0x210 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 1f0:	85 32       	cpi	r24, 0x25	; 37
 1f2:	51 f4       	brne	.+20     	; 0x208 <LCDWriteString+0x20>
	{
		msg++;
 1f4:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 1f6:	88 81       	ld	r24, Y
 1f8:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	28 f0       	brcs	.+10     	; 0x208 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1fe:	85 e2       	ldi	r24, 0x25	; 37
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>
			LCDData(*msg);
 206:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>
	}
	msg++;
 20e:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 210:	88 81       	ld	r24, Y
 212:	88 23       	and	r24, r24
 214:	69 f7       	brne	.-38     	; 0x1f0 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	00 d0       	rcall	.+0      	; 0x22a <LCDWriteInt+0xe>
 22a:	00 d0       	rcall	.+0      	; 0x22c <LCDWriteInt+0x10>
 22c:	0f 92       	push	r0
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	9c 01       	movw	r18, r24
 234:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 236:	fe 01       	movw	r30, r28
 238:	31 96       	adiw	r30, 0x01	; 1
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	df 01       	movw	r26, r30
 23e:	1d 92       	st	X+, r1
 240:	8a 95       	dec	r24
 242:	e9 f7       	brne	.-6      	; 0x23e <LCDWriteInt+0x22>
 244:	fe 01       	movw	r30, r28
 246:	35 96       	adiw	r30, 0x05	; 5
 248:	0d c0       	rjmp	.+26     	; 0x264 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 24a:	c9 01       	movw	r24, r18
 24c:	6a e0       	ldi	r22, 0x0A	; 10
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodhi4>
 254:	80 83       	st	Z, r24
	val=val/10;
 256:	c9 01       	movw	r24, r18
 258:	6a e0       	ldi	r22, 0x0A	; 10
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodhi4>
 260:	9b 01       	movw	r18, r22
 262:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 264:	21 15       	cp	r18, r1
 266:	31 05       	cpc	r19, r1
 268:	81 f7       	brne	.-32     	; 0x24a <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 26a:	bf ef       	ldi	r27, 0xFF	; 255
 26c:	0f 3f       	cpi	r16, 0xFF	; 255
 26e:	1b 07       	cpc	r17, r27
 270:	79 f4       	brne	.+30     	; 0x290 <LCDWriteInt+0x74>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 276:	ae 01       	movw	r20, r28
 278:	4f 5f       	subi	r20, 0xFF	; 255
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	02 c0       	rjmp	.+4      	; 0x282 <LCDWriteInt+0x66>
 27e:	2f 5f       	subi	r18, 0xFF	; 255
 280:	3f 4f       	sbci	r19, 0xFF	; 255
 282:	fa 01       	movw	r30, r20
 284:	e2 0f       	add	r30, r18
 286:	f3 1f       	adc	r31, r19
 288:	80 81       	ld	r24, Z
 28a:	88 23       	and	r24, r24
 28c:	c1 f3       	breq	.-16     	; 0x27e <LCDWriteInt+0x62>
 28e:	04 c0       	rjmp	.+8      	; 0x298 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 290:	25 e0       	ldi	r18, 0x05	; 5
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	20 1b       	sub	r18, r16
 296:	31 0b       	sbc	r19, r17
 298:	7e 01       	movw	r14, r28
 29a:	08 94       	sec
 29c:	e1 1c       	adc	r14, r1
 29e:	f1 1c       	adc	r15, r1
 2a0:	e2 0e       	add	r14, r18
 2a2:	f3 1e       	adc	r15, r19
 2a4:	89 01       	movw	r16, r18
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2a8:	f7 01       	movw	r30, r14
 2aa:	81 91       	ld	r24, Z+
 2ac:	7f 01       	movw	r14, r30
 2ae:	80 5d       	subi	r24, 0xD0	; 208
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2b6:	0f 5f       	subi	r16, 0xFF	; 255
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ba:	05 30       	cpi	r16, 0x05	; 5
 2bc:	11 05       	cpc	r17, r1
 2be:	a4 f3       	brlt	.-24     	; 0x2a8 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	cf 91       	pop	r28
 2cc:	df 91       	pop	r29
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	08 95       	ret

000002d8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 2d8:	84 31       	cpi	r24, 0x14	; 20
 2da:	78 f4       	brcc	.+30     	; 0x2fa <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 2dc:	62 30       	cpi	r22, 0x02	; 2
 2de:	31 f0       	breq	.+12     	; 0x2ec <LCDGotoXY+0x14>
 2e0:	63 30       	cpi	r22, 0x03	; 3
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <LCDGotoXY+0x18>
 2e4:	61 30       	cpi	r22, 0x01	; 1
 2e6:	29 f4       	brne	.+10     	; 0x2f2 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 2ec:	8c 5e       	subi	r24, 0xEC	; 236
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 2f0:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>
 2fa:	08 95       	ret

000002fc <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	18 2f       	mov	r17, r24
 304:	8c e2       	ldi	r24, 0x2C	; 44
 306:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 308:	20 e9       	ldi	r18, 0x90	; 144
 30a:	31 e0       	ldi	r19, 0x01	; 1
 30c:	f9 01       	movw	r30, r18
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCDInit+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 312:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 314:	d9 f7       	brne	.-10     	; 0x30c <LCDInit+0x10>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 316:	87 b3       	in	r24, 0x17	; 23
 318:	80 6f       	ori	r24, 0xF0	; 240
 31a:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 31c:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 31e:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 320:	b9 9a       	sbi	0x17, 1	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 322:	88 b3       	in	r24, 0x18	; 24
 324:	8f 70       	andi	r24, 0x0F	; 15
 326:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 328:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 32a:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
 32c:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	8a 95       	dec	r24
 332:	f1 f7       	brne	.-4      	; 0x330 <LCDInit+0x34>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 334:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 336:	c5 9a       	sbi	0x18, 5	; 24
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	98 2f       	mov	r25, r24
 33c:	9a 95       	dec	r25
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCDInit+0x40>
	_delay_us(1);
	CLEAR_E();
 340:	c4 98       	cbi	0x18, 4	; 24
 342:	8a 95       	dec	r24
 344:	f1 f7       	brne	.-4      	; 0x342 <LCDInit+0x46>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 346:	0e 94 a2 00 	call	0x144	; 0x144 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 34a:	81 2f       	mov	r24, r17
 34c:	8c 60       	ori	r24, 0x0C	; 12
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 354:	88 e2       	ldi	r24, 0x28	; 40
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 35c:	80 e4       	ldi	r24, 0x40	; 64
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>
 364:	c8 e6       	ldi	r28, 0x68	; 104
 366:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 368:	89 91       	ld	r24, Y+
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	0e 94 cc 00 	call	0x198	; 0x198 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	c8 3a       	cpi	r28, 0xA8	; 168
 374:	d8 07       	cpc	r29, r24
 376:	c1 f7       	brne	.-16     	; 0x368 <LCDInit+0x6c>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDGotoXY>

}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	08 95       	ret

00000388 <__divmodhi4>:
 388:	97 fb       	bst	r25, 7
 38a:	09 2e       	mov	r0, r25
 38c:	07 26       	eor	r0, r23
 38e:	0a d0       	rcall	.+20     	; 0x3a4 <__divmodhi4_neg1>
 390:	77 fd       	sbrc	r23, 7
 392:	04 d0       	rcall	.+8      	; 0x39c <__divmodhi4_neg2>
 394:	0c d0       	rcall	.+24     	; 0x3ae <__udivmodhi4>
 396:	06 d0       	rcall	.+12     	; 0x3a4 <__divmodhi4_neg1>
 398:	00 20       	and	r0, r0
 39a:	1a f4       	brpl	.+6      	; 0x3a2 <__divmodhi4_exit>

0000039c <__divmodhi4_neg2>:
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255

000003a2 <__divmodhi4_exit>:
 3a2:	08 95       	ret

000003a4 <__divmodhi4_neg1>:
 3a4:	f6 f7       	brtc	.-4      	; 0x3a2 <__divmodhi4_exit>
 3a6:	90 95       	com	r25
 3a8:	81 95       	neg	r24
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	08 95       	ret

000003ae <__udivmodhi4>:
 3ae:	aa 1b       	sub	r26, r26
 3b0:	bb 1b       	sub	r27, r27
 3b2:	51 e1       	ldi	r21, 0x11	; 17
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <__udivmodhi4_ep>

000003b6 <__udivmodhi4_loop>:
 3b6:	aa 1f       	adc	r26, r26
 3b8:	bb 1f       	adc	r27, r27
 3ba:	a6 17       	cp	r26, r22
 3bc:	b7 07       	cpc	r27, r23
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <__udivmodhi4_ep>
 3c0:	a6 1b       	sub	r26, r22
 3c2:	b7 0b       	sbc	r27, r23

000003c4 <__udivmodhi4_ep>:
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	5a 95       	dec	r21
 3ca:	a9 f7       	brne	.-22     	; 0x3b6 <__udivmodhi4_loop>
 3cc:	80 95       	com	r24
 3ce:	90 95       	com	r25
 3d0:	bc 01       	movw	r22, r24
 3d2:	cd 01       	movw	r24, r26
 3d4:	08 95       	ret

000003d6 <itoa>:
 3d6:	fb 01       	movw	r30, r22
 3d8:	9f 01       	movw	r18, r30
 3da:	e8 94       	clt
 3dc:	42 30       	cpi	r20, 0x02	; 2
 3de:	c4 f0       	brlt	.+48     	; 0x410 <itoa+0x3a>
 3e0:	45 32       	cpi	r20, 0x25	; 37
 3e2:	b4 f4       	brge	.+44     	; 0x410 <itoa+0x3a>
 3e4:	4a 30       	cpi	r20, 0x0A	; 10
 3e6:	29 f4       	brne	.+10     	; 0x3f2 <itoa+0x1c>
 3e8:	97 fb       	bst	r25, 7
 3ea:	1e f4       	brtc	.+6      	; 0x3f2 <itoa+0x1c>
 3ec:	90 95       	com	r25
 3ee:	81 95       	neg	r24
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	64 2f       	mov	r22, r20
 3f4:	77 27       	eor	r23, r23
 3f6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__udivmodhi4>
 3fa:	80 5d       	subi	r24, 0xD0	; 208
 3fc:	8a 33       	cpi	r24, 0x3A	; 58
 3fe:	0c f0       	brlt	.+2      	; 0x402 <itoa+0x2c>
 400:	89 5d       	subi	r24, 0xD9	; 217
 402:	81 93       	st	Z+, r24
 404:	cb 01       	movw	r24, r22
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	a1 f7       	brne	.-24     	; 0x3f2 <itoa+0x1c>
 40a:	16 f4       	brtc	.+4      	; 0x410 <itoa+0x3a>
 40c:	5d e2       	ldi	r21, 0x2D	; 45
 40e:	51 93       	st	Z+, r21
 410:	10 82       	st	Z, r1
 412:	c9 01       	movw	r24, r18
 414:	0c 94 0c 02 	jmp	0x418	; 0x418 <strrev>

00000418 <strrev>:
 418:	dc 01       	movw	r26, r24
 41a:	fc 01       	movw	r30, r24
 41c:	67 2f       	mov	r22, r23
 41e:	71 91       	ld	r23, Z+
 420:	77 23       	and	r23, r23
 422:	e1 f7       	brne	.-8      	; 0x41c <strrev+0x4>
 424:	32 97       	sbiw	r30, 0x02	; 2
 426:	04 c0       	rjmp	.+8      	; 0x430 <strrev+0x18>
 428:	7c 91       	ld	r23, X
 42a:	6d 93       	st	X+, r22
 42c:	70 83       	st	Z, r23
 42e:	62 91       	ld	r22, -Z
 430:	ae 17       	cp	r26, r30
 432:	bf 07       	cpc	r27, r31
 434:	c8 f3       	brcs	.-14     	; 0x428 <strrev+0x10>
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
