
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000024  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000119  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000be  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000130  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008e  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Wait>:

#include <util/delay.h>

//Simple Wait Function
void Wait()
{
  6c:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	c9 01       	movw	r24, r18
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <Wait+0x8>
   uint8_t i;
   for(i=0;i<50;i++)
  78:	c9 01       	movw	r24, r18
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <Wait+0xe>
  7e:	c9 01       	movw	r24, r18
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <Wait+0x14>
  84:	4f 5f       	subi	r20, 0xFF	; 255
  86:	42 33       	cpi	r20, 0x32	; 50
  88:	a1 f7       	brne	.-24     	; 0x72 <Wait+0x6>
      _delay_loop_2(0);
      _delay_loop_2(0);
      _delay_loop_2(0);
   }

}
  8a:	08 95       	ret

0000008c <main>:

void main()
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
   //Configure TIMER1
   TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  90:	8f b5       	in	r24, 0x2f	; 47
  92:	82 6a       	ori	r24, 0xA2	; 162
  94:	8f bd       	out	0x2f, r24	; 47
   TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	8b 61       	ori	r24, 0x1B	; 27
  9a:	8e bd       	out	0x2e, r24	; 46

   ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
  9c:	87 e8       	ldi	r24, 0x87	; 135
  9e:	93 e1       	ldi	r25, 0x13	; 19
  a0:	97 bd       	out	0x27, r25	; 39
  a2:	86 bd       	out	0x26, r24	; 38

   DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 63       	ori	r24, 0x30	; 48
  a8:	81 bb       	out	0x11, r24	; 17
   while(1)
   {

    

      OCR1A=316;  //90 degree
  aa:	cc e3       	ldi	r28, 0x3C	; 60
  ac:	d1 e0       	ldi	r29, 0x01	; 1
  ae:	db bd       	out	0x2b, r29	; 43
  b0:	ca bd       	out	0x2a, r28	; 42
      Wait();
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <Wait>
  b6:	fb cf       	rjmp	.-10     	; 0xae <main+0x22>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
