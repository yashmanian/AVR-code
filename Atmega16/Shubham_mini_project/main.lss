
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000b5  00800060  00800060  000012d4  2**0
                  ALLOC
  2 .debug_aranges 000000c0  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000076c  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000018e1  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000097c  00000000  00000000  000033e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000012e9  00000000  00000000  00003d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005e0  00000000  00000000  00005048  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000008ac  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000bd2  00000000  00000000  00005ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00006aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_3>
      10:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_4>
      14:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_5>
      18:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_6>
      1c:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_7>
      20:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_8>
      24:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_9>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_11>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_13>
      38:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__vector_14>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_19>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

00000054 <__c.1551>:
      54:	25 63 0a 0d 00                                      %c...

00000059 <__c.1549>:
      59:	66 6f 72 77 61 72 64 20 20 25 64 0a 00              forward  %d..

00000066 <__c.1547>:
      66:	25 63 0a 0d 00                                      %c...

0000006b <__c.1545>:
      6b:	72 65 76 65 72 73 65 20 25 64 0a 00                 reverse %d..

00000077 <__c.1543>:
      77:	25 64 0a 00                                         %d..

0000007b <__c.1541>:
      7b:	25 64 0a 00                                         %d..

0000007f <HexChars>:
      7f:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
      8f:	00                                                  .

00000090 <TimerPrescaleFactor>:
      90:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

0000009c <TimerRTCPrescaleFactor>:
      9c:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf e5       	ldi	r28, 0x5F	; 95
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e6       	ldi	r26, 0x60	; 96
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a5 31       	cpi	r26, 0x15	; 21
      c4:	b1 07       	cpc	r27, r17
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 8a 00 	call	0x114	; 0x114 <main>
      cc:	0c 94 2e 09 	jmp	0x125c	; 0x125c <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <configure_ports>:

//************CONFIGURE PORTS************
//configure ports for input or output - specific to ATmega8
void configure_ports(void)
	{
	DDRC = 0x00;  //configure all C ports for input
      d4:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00; //make sure pull-up resistors are turned off
      d6:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF;  //configure all D ports for output
      d8:	8f ef       	ldi	r24, 0xFF	; 255
      da:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xC7;  //configure B ports 0, 1, 2, 6, 7 for output (google search '0b11000111 to hex')
      dc:	87 ec       	ldi	r24, 0xC7	; 199
      de:	87 bb       	out	0x17, r24	; 23
	}
      e0:	08 95       	ret

000000e2 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles*16;
	while(cycles > 0)
		cycles--;
	}
      e2:	08 95       	ret

000000e4 <LED_on>:
//*********SIMPLIFIED FUNCTIONS**********
//functions to make coding easier for a beginner
//but could cause port mixup confusion for intermediate users
void LED_on(void)
	{
	PORT_OFF(PORTD, 4);//turn LED on
      e4:	94 98       	cbi	0x12, 4	; 18
	}
      e6:	08 95       	ret

000000e8 <LED_off>:
void LED_off(void)
	{
	PORT_ON(PORTD, 4);//turn LED off
      e8:	94 9a       	sbi	0x12, 4	; 18
	}
      ea:	08 95       	ret

000000ec <servo_left>:
void servo_left(signed long int speed)
	{
	PORT_ON(PORTD, 2);
      ec:	92 9a       	sbi	0x12, 2	; 18
	delay_cycles(speed);
	PORT_OFF(PORTD, 2);//keep off
      ee:	92 98       	cbi	0x12, 2	; 18
	delay_cycles(200);
	}
      f0:	08 95       	ret

000000f2 <servo_right>:
void servo_right(signed long int speed)
	{
	PORT_ON(PORTD, 3);
      f2:	93 9a       	sbi	0x12, 3	; 18
	delay_cycles(speed);		
	PORT_OFF(PORTD, 3);//keep off
      f4:	93 98       	cbi	0x12, 3	; 18
	delay_cycles(200);
	}
      f6:	08 95       	ret

000000f8 <pwminit>:
#include <util/delay.h>
#include "SOR_Utils.h"

	void pwminit()
	{
		TCCR1A|=(1<<WGM10)|(1<<COM1A1);//|(1<<COM1A0);
      f8:	8f b5       	in	r24, 0x2f	; 47
      fa:	81 68       	ori	r24, 0x81	; 129
      fc:	8f bd       	out	0x2f, r24	; 47
		TCCR1B|=(1<<WGM12)|(1<<CS10);
      fe:	8e b5       	in	r24, 0x2e	; 46
     100:	89 60       	ori	r24, 0x09	; 9
     102:	8e bd       	out	0x2e, r24	; 46
      
		DDRD|=(1<<PIND5); // set output for PWM timer 1
     104:	8d 9a       	sbi	0x11, 5	; 17
		
		
	}
     106:	08 95       	ret

00000108 <setpwmoutput>:


	void setpwmoutput(int8_t duty1)
	{
		OCR1A = duty1;
     108:	99 27       	eor	r25, r25
     10a:	87 fd       	sbrc	r24, 7
     10c:	90 95       	com	r25
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
		
	}
     112:	08 95       	ret

00000114 <main>:
	
	

int main()
{
     114:	2f 92       	push	r2
     116:	3f 92       	push	r3
     118:	4f 92       	push	r4
     11a:	5f 92       	push	r5
     11c:	6f 92       	push	r6
     11e:	7f 92       	push	r7
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
	//pwminit();
	
	uartInit();
     138:	0e 94 5d 04 	call	0x8ba	; 0x8ba <uartInit>
	uartSetBaudRate(9600);
     13c:	60 e8       	ldi	r22, 0x80	; 128
     13e:	75 e2       	ldi	r23, 0x25	; 37
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 57 03 	call	0x6ae	; 0x6ae <uartSetBaudRate>
	rprintfInit(uartSendByte);
     148:	88 e7       	ldi	r24, 0x78	; 120
     14a:	93 e0       	ldi	r25, 0x03	; 3
     14c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <rprintfInit>
	DDRB=0b11111111;
     150:	8f ef       	ldi	r24, 0xFF	; 255
     152:	87 bb       	out	0x17, r24	; 23
     154:	1f ef       	ldi	r17, 0xFF	; 255
		{
			if(speed_val<255)
			{
				speed_val = speed_val + 5;
			}	
			rprintf("%d\n",speed_val);
     156:	01 e0       	ldi	r16, 0x01	; 1
  		    
		}
		else if(data == 'w')
		{
			setpwmoutput(speed_val);
			rprintf("forward  %d\n",speed_val);
     158:	69 e5       	ldi	r22, 0x59	; 89
     15a:	26 2e       	mov	r2, r22
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	36 2e       	mov	r3, r22
			rprintf("%c\n\r",data);
     160:	54 e5       	ldi	r21, 0x54	; 84
     162:	45 2e       	mov	r4, r21
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	55 2e       	mov	r5, r21
     168:	47 e7       	ldi	r20, 0x77	; 119
     16a:	64 2e       	mov	r6, r20
     16c:	71 2c       	mov	r7, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     16e:	c0 e9       	ldi	r28, 0x90	; 144
     170:	d1 e0       	ldi	r29, 0x01	; 1
		}
		
		else if(data == 's')
		{
			setpwmoutput(speed_val);
			rprintf("reverse %d\n",speed_val);
     172:	3b e6       	ldi	r19, 0x6B	; 107
     174:	83 2e       	mov	r8, r19
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	93 2e       	mov	r9, r19
			rprintf("%c\n\r",data);
     17a:	26 e6       	ldi	r18, 0x66	; 102
     17c:	a2 2e       	mov	r10, r18
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	b2 2e       	mov	r11, r18
     182:	93 e7       	ldi	r25, 0x73	; 115
     184:	c9 2e       	mov	r12, r25
     186:	d1 2c       	mov	r13, r1
		{
			if(speed_val>0)
			{
				speed_val = speed_val - 5;
			}
			rprintf("%d\n",speed_val);
     188:	87 e7       	ldi	r24, 0x77	; 119
     18a:	e8 2e       	mov	r14, r24
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	f8 2e       	mov	r15, r24
	DDRB=0b11111111;
	uint8_t speed_val = 255;
	
	while(1)
	{
		pwminit();
     190:	0e 94 7c 00 	call	0xf8	; 0xf8 <pwminit>
		
		char data=uartGetByte();
     194:	0e 94 36 04 	call	0x86c	; 0x86c <uartGetByte>
		if (data == 'i')
     198:	89 36       	cpi	r24, 0x69	; 105
     19a:	91 f4       	brne	.+36     	; 0x1c0 <main+0xac>
		{
			if(speed_val<255)
     19c:	1f 3f       	cpi	r17, 0xFF	; 255
     19e:	09 f0       	breq	.+2      	; 0x1a2 <main+0x8e>
			{
				speed_val = speed_val + 5;
     1a0:	1b 5f       	subi	r17, 0xFB	; 251
			}	
			rprintf("%d\n",speed_val);
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <main+0x90>
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <main+0x92>
     1a6:	0f 92       	push	r0
     1a8:	ed b7       	in	r30, 0x3d	; 61
     1aa:	fe b7       	in	r31, 0x3e	; 62
     1ac:	31 96       	adiw	r30, 0x01	; 1
     1ae:	ad b7       	in	r26, 0x3d	; 61
     1b0:	be b7       	in	r27, 0x3e	; 62
     1b2:	11 96       	adiw	r26, 0x01	; 1
     1b4:	0c 93       	st	X, r16
     1b6:	8b e7       	ldi	r24, 0x7B	; 123
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	92 83       	std	Z+2, r25	; 0x02
     1bc:	81 83       	std	Z+1, r24	; 0x01
     1be:	10 c0       	rjmp	.+32     	; 0x1e0 <main+0xcc>
		}
		else if (data == 'j')
     1c0:	8a 36       	cpi	r24, 0x6A	; 106
     1c2:	c1 f4       	brne	.+48     	; 0x1f4 <main+0xe0>
		{
			if(speed_val>0)
     1c4:	11 11       	cpse	r17, r1
			{
				speed_val = speed_val - 5;
     1c6:	15 50       	subi	r17, 0x05	; 5
			}
			rprintf("%d\n",speed_val);
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <main+0xb6>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <main+0xb8>
     1cc:	0f 92       	push	r0
     1ce:	ed b7       	in	r30, 0x3d	; 61
     1d0:	fe b7       	in	r31, 0x3e	; 62
     1d2:	31 96       	adiw	r30, 0x01	; 1
     1d4:	ad b7       	in	r26, 0x3d	; 61
     1d6:	be b7       	in	r27, 0x3e	; 62
     1d8:	11 96       	adiw	r26, 0x01	; 1
     1da:	0c 93       	st	X, r16
     1dc:	f2 82       	std	Z+2, r15	; 0x02
     1de:	e1 82       	std	Z+1, r14	; 0x01
     1e0:	13 83       	std	Z+3, r17	; 0x03
     1e2:	14 82       	std	Z+4, r1	; 0x04
     1e4:	0e 94 be 02 	call	0x57c	; 0x57c <rprintf1RamRom>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	ce cf       	rjmp	.-100    	; 0x190 <main+0x7c>
		}
		
		else if(data == 's')
     1f4:	83 37       	cpi	r24, 0x73	; 115
     1f6:	89 f5       	brne	.+98     	; 0x25a <main+0x146>
	}


	void setpwmoutput(int8_t duty1)
	{
		OCR1A = duty1;
     1f8:	81 2f       	mov	r24, r17
     1fa:	99 27       	eor	r25, r25
     1fc:	87 fd       	sbrc	r24, 7
     1fe:	90 95       	com	r25
     200:	9b bd       	out	0x2b, r25	; 43
     202:	8a bd       	out	0x2a, r24	; 42
		}
		
		else if(data == 's')
		{
			setpwmoutput(speed_val);
			rprintf("reverse %d\n",speed_val);
     204:	00 d0       	rcall	.+0      	; 0x206 <main+0xf2>
     206:	00 d0       	rcall	.+0      	; 0x208 <main+0xf4>
     208:	0f 92       	push	r0
     20a:	ed b7       	in	r30, 0x3d	; 61
     20c:	fe b7       	in	r31, 0x3e	; 62
     20e:	31 96       	adiw	r30, 0x01	; 1
     210:	ad b7       	in	r26, 0x3d	; 61
     212:	be b7       	in	r27, 0x3e	; 62
     214:	11 96       	adiw	r26, 0x01	; 1
     216:	0c 93       	st	X, r16
     218:	92 82       	std	Z+2, r9	; 0x02
     21a:	81 82       	std	Z+1, r8	; 0x01
     21c:	13 83       	std	Z+3, r17	; 0x03
     21e:	14 82       	std	Z+4, r1	; 0x04
     220:	0e 94 be 02 	call	0x57c	; 0x57c <rprintf1RamRom>
			rprintf("%c\n\r",data);
     224:	ed b7       	in	r30, 0x3d	; 61
     226:	fe b7       	in	r31, 0x3e	; 62
     228:	31 96       	adiw	r30, 0x01	; 1
     22a:	ad b7       	in	r26, 0x3d	; 61
     22c:	be b7       	in	r27, 0x3e	; 62
     22e:	11 96       	adiw	r26, 0x01	; 1
     230:	0c 93       	st	X, r16
     232:	b2 82       	std	Z+2, r11	; 0x02
     234:	a1 82       	std	Z+1, r10	; 0x01
     236:	d4 82       	std	Z+4, r13	; 0x04
     238:	c3 82       	std	Z+3, r12	; 0x03
     23a:	0e 94 be 02 	call	0x57c	; 0x57c <rprintf1RamRom>
			PORTB|= 0b00100000;
     23e:	c5 9a       	sbi	0x18, 5	; 24
     240:	8a ef       	ldi	r24, 0xFA	; 250
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	fe 01       	movw	r30, r28
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <main+0x13c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <main+0x13a>
     258:	9b cf       	rjmp	.-202    	; 0x190 <main+0x7c>
			_delay_ms(25);
  		    
		}
		else if(data == 'w')
     25a:	87 37       	cpi	r24, 0x77	; 119
     25c:	91 f5       	brne	.+100    	; 0x2c2 <main+0x1ae>
	}


	void setpwmoutput(int8_t duty1)
	{
		OCR1A = duty1;
     25e:	81 2f       	mov	r24, r17
     260:	99 27       	eor	r25, r25
     262:	87 fd       	sbrc	r24, 7
     264:	90 95       	com	r25
     266:	9b bd       	out	0x2b, r25	; 43
     268:	8a bd       	out	0x2a, r24	; 42
  		    
		}
		else if(data == 'w')
		{
			setpwmoutput(speed_val);
			rprintf("forward  %d\n",speed_val);
     26a:	00 d0       	rcall	.+0      	; 0x26c <main+0x158>
     26c:	00 d0       	rcall	.+0      	; 0x26e <main+0x15a>
     26e:	0f 92       	push	r0
     270:	ed b7       	in	r30, 0x3d	; 61
     272:	fe b7       	in	r31, 0x3e	; 62
     274:	31 96       	adiw	r30, 0x01	; 1
     276:	ad b7       	in	r26, 0x3d	; 61
     278:	be b7       	in	r27, 0x3e	; 62
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	0c 93       	st	X, r16
     27e:	32 82       	std	Z+2, r3	; 0x02
     280:	21 82       	std	Z+1, r2	; 0x01
     282:	13 83       	std	Z+3, r17	; 0x03
     284:	14 82       	std	Z+4, r1	; 0x04
     286:	0e 94 be 02 	call	0x57c	; 0x57c <rprintf1RamRom>
			rprintf("%c\n\r",data);
     28a:	ed b7       	in	r30, 0x3d	; 61
     28c:	fe b7       	in	r31, 0x3e	; 62
     28e:	31 96       	adiw	r30, 0x01	; 1
     290:	ad b7       	in	r26, 0x3d	; 61
     292:	be b7       	in	r27, 0x3e	; 62
     294:	11 96       	adiw	r26, 0x01	; 1
     296:	0c 93       	st	X, r16
     298:	52 82       	std	Z+2, r5	; 0x02
     29a:	41 82       	std	Z+1, r4	; 0x01
     29c:	74 82       	std	Z+4, r7	; 0x04
     29e:	63 82       	std	Z+3, r6	; 0x03
     2a0:	0e 94 be 02 	call	0x57c	; 0x57c <rprintf1RamRom>
			PORTB= 0b01000000;
     2a4:	b0 e4       	ldi	r27, 0x40	; 64
     2a6:	b8 bb       	out	0x18, r27	; 24
     2a8:	88 ec       	ldi	r24, 0xC8	; 200
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	fe 01       	movw	r30, r28
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <main+0x1a2>
     2c0:	67 cf       	rjmp	.-306    	; 0x190 <main+0x7c>
			_delay_ms(20);		
		}
		
		else
		{
			PORTB=0b00000000;
     2c2:	18 ba       	out	0x18, r1	; 24
     2c4:	65 cf       	rjmp	.-310    	; 0x190 <main+0x7c>

000002c6 <rprintfInit>:
     2c6:	90 93 61 00 	sts	0x0061, r25
     2ca:	80 93 60 00 	sts	0x0060, r24
     2ce:	08 95       	ret

000002d0 <rprintfChar>:
     2d0:	1f 93       	push	r17
     2d2:	18 2f       	mov	r17, r24
     2d4:	8a 30       	cpi	r24, 0x0A	; 10
     2d6:	31 f4       	brne	.+12     	; 0x2e4 <rprintfChar+0x14>
     2d8:	e0 91 60 00 	lds	r30, 0x0060
     2dc:	f0 91 61 00 	lds	r31, 0x0061
     2e0:	8d e0       	ldi	r24, 0x0D	; 13
     2e2:	09 95       	icall
     2e4:	e0 91 60 00 	lds	r30, 0x0060
     2e8:	f0 91 61 00 	lds	r31, 0x0061
     2ec:	81 2f       	mov	r24, r17
     2ee:	09 95       	icall
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <rprintfStr>:
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	ec 01       	movw	r28, r24
     2fa:	00 97       	sbiw	r24, 0x00	; 0
     2fc:	21 f4       	brne	.+8      	; 0x306 <rprintfStr+0x12>
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <rprintfStr+0x18>
     300:	21 96       	adiw	r28, 0x01	; 1
     302:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     306:	88 81       	ld	r24, Y
     308:	88 23       	and	r24, r24
     30a:	d1 f7       	brne	.-12     	; 0x300 <rprintfStr+0xc>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <rprintfStrLen>:
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	8c 01       	movw	r16, r24
     320:	7a 01       	movw	r14, r20
     322:	00 97       	sbiw	r24, 0x00	; 0
     324:	e9 f0       	breq	.+58     	; 0x360 <rprintfStrLen+0x4e>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	26 17       	cp	r18, r22
     32c:	37 07       	cpc	r19, r23
     32e:	38 f4       	brcc	.+14     	; 0x33e <rprintfStrLen+0x2c>
     330:	f8 01       	movw	r30, r16
     332:	81 91       	ld	r24, Z+
     334:	8f 01       	movw	r16, r30
     336:	2f 5f       	subi	r18, 0xFF	; 255
     338:	3f 4f       	sbci	r19, 0xFF	; 255
     33a:	88 23       	and	r24, r24
     33c:	b1 f7       	brne	.-20     	; 0x32a <rprintfStrLen+0x18>
     33e:	c0 e0       	ldi	r28, 0x00	; 0
     340:	d0 e0       	ldi	r29, 0x00	; 0
     342:	0b c0       	rjmp	.+22     	; 0x35a <rprintfStrLen+0x48>
     344:	f8 01       	movw	r30, r16
     346:	80 81       	ld	r24, Z
     348:	88 23       	and	r24, r24
     34a:	19 f0       	breq	.+6      	; 0x352 <rprintfStrLen+0x40>
     34c:	0f 5f       	subi	r16, 0xFF	; 255
     34e:	1f 4f       	sbci	r17, 0xFF	; 255
     350:	01 c0       	rjmp	.+2      	; 0x354 <rprintfStrLen+0x42>
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     358:	21 96       	adiw	r28, 0x01	; 1
     35a:	ce 15       	cp	r28, r14
     35c:	df 05       	cpc	r29, r15
     35e:	90 f3       	brcs	.-28     	; 0x344 <rprintfStrLen+0x32>
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret

0000036e <rprintfProgStr>:
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	ec 01       	movw	r28, r24
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	19 f4       	brne	.+6      	; 0x37e <rprintfProgStr+0x10>
     378:	07 c0       	rjmp	.+14     	; 0x388 <rprintfProgStr+0x1a>
     37a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     37e:	fe 01       	movw	r30, r28
     380:	21 96       	adiw	r28, 0x01	; 1
     382:	84 91       	lpm	r24, Z+
     384:	88 23       	and	r24, r24
     386:	c9 f7       	brne	.-14     	; 0x37a <rprintfProgStr+0xc>
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <rprintfCRLF>:
     38e:	8a e0       	ldi	r24, 0x0A	; 10
     390:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     394:	08 95       	ret

00000396 <rprintfu04>:
     396:	e8 2f       	mov	r30, r24
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	ef 70       	andi	r30, 0x0F	; 15
     39c:	f0 70       	andi	r31, 0x00	; 0
     39e:	e1 58       	subi	r30, 0x81	; 129
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	e4 91       	lpm	r30, Z+
     3a4:	8e 2f       	mov	r24, r30
     3a6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     3aa:	08 95       	ret

000003ac <rprintfu08>:
     3ac:	1f 93       	push	r17
     3ae:	18 2f       	mov	r17, r24
     3b0:	82 95       	swap	r24
     3b2:	8f 70       	andi	r24, 0x0F	; 15
     3b4:	0e 94 cb 01 	call	0x396	; 0x396 <rprintfu04>
     3b8:	81 2f       	mov	r24, r17
     3ba:	0e 94 cb 01 	call	0x396	; 0x396 <rprintfu04>
     3be:	1f 91       	pop	r17
     3c0:	08 95       	ret

000003c2 <rprintfu16>:
     3c2:	1f 93       	push	r17
     3c4:	18 2f       	mov	r17, r24
     3c6:	89 2f       	mov	r24, r25
     3c8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <rprintfu08>
     3cc:	81 2f       	mov	r24, r17
     3ce:	0e 94 d6 01 	call	0x3ac	; 0x3ac <rprintfu08>
     3d2:	1f 91       	pop	r17
     3d4:	08 95       	ret

000003d6 <rprintfu32>:
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	7b 01       	movw	r14, r22
     3e0:	8c 01       	movw	r16, r24
     3e2:	c8 01       	movw	r24, r16
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <rprintfu16>
     3ec:	c7 01       	movw	r24, r14
     3ee:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <rprintfu16>
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <rprintfNum>:
     3fc:	2f 92       	push	r2
     3fe:	3f 92       	push	r3
     400:	4f 92       	push	r4
     402:	5f 92       	push	r5
     404:	6f 92       	push	r6
     406:	7f 92       	push	r7
     408:	8f 92       	push	r8
     40a:	9f 92       	push	r9
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	a3 97       	sbiw	r28, 0x23	; 35
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	6a a3       	std	Y+34, r22	; 0x22
     432:	24 2e       	mov	r2, r20
     434:	2b a3       	std	Y+35, r18	; 0x23
     436:	37 01       	movw	r6, r14
     438:	48 01       	movw	r8, r16
     43a:	44 23       	and	r20, r20
     43c:	51 f0       	breq	.+20     	; 0x452 <rprintfNum+0x56>
     43e:	17 ff       	sbrs	r17, 7
     440:	08 c0       	rjmp	.+16     	; 0x452 <rprintfNum+0x56>
     442:	ee 24       	eor	r14, r14
     444:	ff 24       	eor	r15, r15
     446:	87 01       	movw	r16, r14
     448:	e6 18       	sub	r14, r6
     44a:	f7 08       	sbc	r15, r7
     44c:	08 09       	sbc	r16, r8
     44e:	19 09       	sbc	r17, r9
     450:	02 c0       	rjmp	.+4      	; 0x456 <rprintfNum+0x5a>
     452:	84 01       	movw	r16, r8
     454:	73 01       	movw	r14, r6
     456:	2a a1       	ldd	r18, Y+34	; 0x22
     458:	21 50       	subi	r18, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	21 10       	cpse	r2, r1
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	29 1b       	sub	r18, r25
     462:	29 a3       	std	Y+33, r18	; 0x21
     464:	18 a2       	std	Y+32, r1	; 0x20
     466:	a8 2e       	mov	r10, r24
     468:	bb 24       	eor	r11, r11
     46a:	cc 24       	eor	r12, r12
     46c:	dd 24       	eor	r13, r13
     46e:	c8 01       	movw	r24, r16
     470:	b7 01       	movw	r22, r14
     472:	a6 01       	movw	r20, r12
     474:	95 01       	movw	r18, r10
     476:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     47a:	fb 01       	movw	r30, r22
     47c:	ef 70       	andi	r30, 0x0F	; 15
     47e:	f0 70       	andi	r31, 0x00	; 0
     480:	e1 58       	subi	r30, 0x81	; 129
     482:	ff 4f       	sbci	r31, 0xFF	; 255
     484:	64 91       	lpm	r22, Z+
     486:	6f 8f       	std	Y+31, r22	; 0x1f
     488:	c8 01       	movw	r24, r16
     48a:	b7 01       	movw	r22, r14
     48c:	a6 01       	movw	r20, r12
     48e:	95 01       	movw	r18, r10
     490:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     494:	c9 01       	movw	r24, r18
     496:	da 01       	movw	r26, r20
     498:	7c 01       	movw	r14, r24
     49a:	8d 01       	movw	r16, r26
     49c:	9e e1       	ldi	r25, 0x1E	; 30
     49e:	49 2e       	mov	r4, r25
     4a0:	51 2c       	mov	r5, r1
     4a2:	4c 0e       	add	r4, r28
     4a4:	5d 1e       	adc	r5, r29
     4a6:	39 a0       	ldd	r3, Y+33	; 0x21
     4a8:	25 c0       	rjmp	.+74     	; 0x4f4 <rprintfNum+0xf8>
     4aa:	e1 14       	cp	r14, r1
     4ac:	f1 04       	cpc	r15, r1
     4ae:	01 05       	cpc	r16, r1
     4b0:	11 05       	cpc	r17, r1
     4b2:	c9 f0       	breq	.+50     	; 0x4e6 <rprintfNum+0xea>
     4b4:	c8 01       	movw	r24, r16
     4b6:	b7 01       	movw	r22, r14
     4b8:	a6 01       	movw	r20, r12
     4ba:	95 01       	movw	r18, r10
     4bc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     4c0:	fb 01       	movw	r30, r22
     4c2:	ef 70       	andi	r30, 0x0F	; 15
     4c4:	f0 70       	andi	r31, 0x00	; 0
     4c6:	e1 58       	subi	r30, 0x81	; 129
     4c8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ca:	64 91       	lpm	r22, Z+
     4cc:	f2 01       	movw	r30, r4
     4ce:	60 83       	st	Z, r22
     4d0:	c8 01       	movw	r24, r16
     4d2:	b7 01       	movw	r22, r14
     4d4:	a6 01       	movw	r20, r12
     4d6:	95 01       	movw	r18, r10
     4d8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     4dc:	c9 01       	movw	r24, r18
     4de:	da 01       	movw	r26, r20
     4e0:	7c 01       	movw	r14, r24
     4e2:	8d 01       	movw	r16, r26
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <rprintfNum+0xf0>
     4e6:	2b a1       	ldd	r18, Y+35	; 0x23
     4e8:	f2 01       	movw	r30, r4
     4ea:	20 83       	st	Z, r18
     4ec:	3a 94       	dec	r3
     4ee:	08 94       	sec
     4f0:	41 08       	sbc	r4, r1
     4f2:	51 08       	sbc	r5, r1
     4f4:	33 20       	and	r3, r3
     4f6:	c9 f6       	brne	.-78     	; 0x4aa <rprintfNum+0xae>
     4f8:	ce 01       	movw	r24, r28
     4fa:	4f 96       	adiw	r24, 0x1f	; 31
     4fc:	8c 01       	movw	r16, r24
     4fe:	e9 a1       	ldd	r30, Y+33	; 0x21
     500:	0e 1b       	sub	r16, r30
     502:	11 09       	sbc	r17, r1
     504:	22 20       	and	r2, r2
     506:	f1 f0       	breq	.+60     	; 0x544 <rprintfNum+0x148>
     508:	97 fe       	sbrs	r9, 7
     50a:	05 c0       	rjmp	.+10     	; 0x516 <rprintfNum+0x11a>
     50c:	8d e2       	ldi	r24, 0x2D	; 45
     50e:	f8 01       	movw	r30, r16
     510:	82 93       	st	-Z, r24
     512:	8f 01       	movw	r16, r30
     514:	17 c0       	rjmp	.+46     	; 0x544 <rprintfNum+0x148>
     516:	c8 01       	movw	r24, r16
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	61 14       	cp	r6, r1
     51c:	71 04       	cpc	r7, r1
     51e:	81 04       	cpc	r8, r1
     520:	91 04       	cpc	r9, r1
     522:	19 f0       	breq	.+6      	; 0x52a <rprintfNum+0x12e>
     524:	8c 01       	movw	r16, r24
     526:	8b e2       	ldi	r24, 0x2B	; 43
     528:	02 c0       	rjmp	.+4      	; 0x52e <rprintfNum+0x132>
     52a:	8c 01       	movw	r16, r24
     52c:	80 e2       	ldi	r24, 0x20	; 32
     52e:	f8 01       	movw	r30, r16
     530:	80 83       	st	Z, r24
     532:	08 c0       	rjmp	.+16     	; 0x544 <rprintfNum+0x148>
     534:	f8 01       	movw	r30, r16
     536:	81 91       	ld	r24, Z+
     538:	8f 01       	movw	r16, r30
     53a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     53e:	fa a1       	ldd	r31, Y+34	; 0x22
     540:	f1 50       	subi	r31, 0x01	; 1
     542:	fa a3       	std	Y+34, r31	; 0x22
     544:	2a a1       	ldd	r18, Y+34	; 0x22
     546:	22 23       	and	r18, r18
     548:	a9 f7       	brne	.-22     	; 0x534 <rprintfNum+0x138>
     54a:	a3 96       	adiw	r28, 0x23	; 35
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	bf 90       	pop	r11
     568:	af 90       	pop	r10
     56a:	9f 90       	pop	r9
     56c:	8f 90       	pop	r8
     56e:	7f 90       	pop	r7
     570:	6f 90       	pop	r6
     572:	5f 90       	pop	r5
     574:	4f 90       	pop	r4
     576:	3f 90       	pop	r3
     578:	2f 90       	pop	r2
     57a:	08 95       	ret

0000057c <rprintf1RamRom>:
     57c:	7f 92       	push	r7
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	78 88       	ldd	r7, Y+16	; 0x10
     59c:	c9 88       	ldd	r12, Y+17	; 0x11
     59e:	da 88       	ldd	r13, Y+18	; 0x12
     5a0:	53 e1       	ldi	r21, 0x13	; 19
     5a2:	e5 2e       	mov	r14, r21
     5a4:	f1 2c       	mov	r15, r1
     5a6:	ec 0e       	add	r14, r28
     5a8:	fd 1e       	adc	r15, r29
     5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <rprintf1RamRom+0x58>
     5ac:	88 23       	and	r24, r24
     5ae:	81 f4       	brne	.+32     	; 0x5d0 <rprintf1RamRom+0x54>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	9f 90       	pop	r9
     5ca:	8f 90       	pop	r8
     5cc:	7f 90       	pop	r7
     5ce:	08 95       	ret
     5d0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     5d4:	96 01       	movw	r18, r12
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
     5da:	77 20       	and	r7, r7
     5dc:	21 f0       	breq	.+8      	; 0x5e6 <rprintf1RamRom+0x6a>
     5de:	f6 01       	movw	r30, r12
     5e0:	69 01       	movw	r12, r18
     5e2:	84 91       	lpm	r24, Z+
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <rprintf1RamRom+0x70>
     5e6:	f6 01       	movw	r30, r12
     5e8:	80 81       	ld	r24, Z
     5ea:	69 01       	movw	r12, r18
     5ec:	85 32       	cpi	r24, 0x25	; 37
     5ee:	f1 f6       	brne	.-68     	; 0x5ac <rprintf1RamRom+0x30>
     5f0:	2f 5f       	subi	r18, 0xFF	; 255
     5f2:	3f 4f       	sbci	r19, 0xFF	; 255
     5f4:	77 20       	and	r7, r7
     5f6:	21 f0       	breq	.+8      	; 0x600 <rprintf1RamRom+0x84>
     5f8:	f6 01       	movw	r30, r12
     5fa:	69 01       	movw	r12, r18
     5fc:	84 91       	lpm	r24, Z+
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <rprintf1RamRom+0x8a>
     600:	f6 01       	movw	r30, r12
     602:	80 81       	ld	r24, Z
     604:	69 01       	movw	r12, r18
     606:	84 36       	cpi	r24, 0x64	; 100
     608:	29 f0       	breq	.+10     	; 0x614 <rprintf1RamRom+0x98>
     60a:	88 37       	cpi	r24, 0x78	; 120
     60c:	81 f0       	breq	.+32     	; 0x62e <rprintf1RamRom+0xb2>
     60e:	83 36       	cpi	r24, 0x63	; 99
     610:	f9 f6       	brne	.-66     	; 0x5d0 <rprintf1RamRom+0x54>
     612:	06 c0       	rjmp	.+12     	; 0x620 <rprintf1RamRom+0xa4>
     614:	00 e1       	ldi	r16, 0x10	; 16
     616:	17 e2       	ldi	r17, 0x27	; 39
     618:	4a e0       	ldi	r20, 0x0A	; 10
     61a:	a4 2e       	mov	r10, r20
     61c:	b1 2c       	mov	r11, r1
     61e:	0c c0       	rjmp	.+24     	; 0x638 <rprintf1RamRom+0xbc>
     620:	f7 01       	movw	r30, r14
     622:	80 81       	ld	r24, Z
     624:	22 e0       	ldi	r18, 0x02	; 2
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	e2 0e       	add	r14, r18
     62a:	f3 1e       	adc	r15, r19
     62c:	d1 cf       	rjmp	.-94     	; 0x5d0 <rprintf1RamRom+0x54>
     62e:	00 e0       	ldi	r16, 0x00	; 0
     630:	10 e1       	ldi	r17, 0x10	; 16
     632:	30 e1       	ldi	r19, 0x10	; 16
     634:	a3 2e       	mov	r10, r19
     636:	b1 2c       	mov	r11, r1
     638:	22 e0       	ldi	r18, 0x02	; 2
     63a:	82 2e       	mov	r8, r18
     63c:	91 2c       	mov	r9, r1
     63e:	8e 0c       	add	r8, r14
     640:	9f 1c       	adc	r9, r15
     642:	f7 01       	movw	r30, r14
     644:	e0 80       	ld	r14, Z
     646:	f1 80       	ldd	r15, Z+1	; 0x01
     648:	84 36       	cpi	r24, 0x64	; 100
     64a:	b1 f4       	brne	.+44     	; 0x678 <rprintf1RamRom+0xfc>
     64c:	f7 fe       	sbrs	r15, 7
     64e:	11 c0       	rjmp	.+34     	; 0x672 <rprintf1RamRom+0xf6>
     650:	f0 94       	com	r15
     652:	e1 94       	neg	r14
     654:	f1 08       	sbc	r15, r1
     656:	f3 94       	inc	r15
     658:	8d e2       	ldi	r24, 0x2D	; 45
     65a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rprintfChar>
     65e:	09 c0       	rjmp	.+18     	; 0x672 <rprintf1RamRom+0xf6>
     660:	c8 01       	movw	r24, r16
     662:	6a e0       	ldi	r22, 0x0A	; 10
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__udivmodhi4>
     66a:	8b 01       	movw	r16, r22
     66c:	62 30       	cpi	r22, 0x02	; 2
     66e:	71 05       	cpc	r23, r1
     670:	18 f0       	brcs	.+6      	; 0x678 <rprintf1RamRom+0xfc>
     672:	e0 16       	cp	r14, r16
     674:	f1 06       	cpc	r15, r17
     676:	a0 f3       	brcs	.-24     	; 0x660 <rprintf1RamRom+0xe4>
     678:	c7 01       	movw	r24, r14
     67a:	b8 01       	movw	r22, r16
     67c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__udivmodhi4>
     680:	86 2f       	mov	r24, r22
     682:	0e 94 cb 01 	call	0x396	; 0x396 <rprintfu04>
     686:	c7 01       	movw	r24, r14
     688:	b8 01       	movw	r22, r16
     68a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__udivmodhi4>
     68e:	7c 01       	movw	r14, r24
     690:	c8 01       	movw	r24, r16
     692:	b5 01       	movw	r22, r10
     694:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__udivmodhi4>
     698:	8b 01       	movw	r16, r22
     69a:	61 15       	cp	r22, r1
     69c:	71 05       	cpc	r23, r1
     69e:	61 f7       	brne	.-40     	; 0x678 <rprintf1RamRom+0xfc>
     6a0:	74 01       	movw	r14, r8
     6a2:	98 cf       	rjmp	.-208    	; 0x5d4 <rprintf1RamRom+0x58>

000006a4 <uartSetRxHandler>:
     6a4:	90 93 e3 00 	sts	0x00E3, r25
     6a8:	80 93 e2 00 	sts	0x00E2, r24
     6ac:	08 95       	ret

000006ae <uartSetBaudRate>:
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	60 58       	subi	r22, 0x80	; 128
     6b4:	7b 47       	sbci	r23, 0x7B	; 123
     6b6:	81 4e       	sbci	r24, 0xE1	; 225
     6b8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ba:	f3 e0       	ldi	r31, 0x03	; 3
     6bc:	66 0f       	add	r22, r22
     6be:	77 1f       	adc	r23, r23
     6c0:	88 1f       	adc	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	fa 95       	dec	r31
     6c6:	d1 f7       	brne	.-12     	; 0x6bc <uartSetBaudRate+0xe>
     6c8:	e4 e0       	ldi	r30, 0x04	; 4
     6ca:	22 0f       	add	r18, r18
     6cc:	33 1f       	adc	r19, r19
     6ce:	44 1f       	adc	r20, r20
     6d0:	55 1f       	adc	r21, r21
     6d2:	ea 95       	dec	r30
     6d4:	d1 f7       	brne	.-12     	; 0x6ca <uartSetBaudRate+0x1c>
     6d6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	30 40       	sbci	r19, 0x00	; 0
     6de:	29 b9       	out	0x09, r18	; 9
     6e0:	30 bd       	out	0x20, r19	; 32
     6e2:	08 95       	ret

000006e4 <uartGetRxBuffer>:
     6e4:	85 ef       	ldi	r24, 0xF5	; 245
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	08 95       	ret

000006ea <uartGetTxBuffer>:
     6ea:	8e ef       	ldi	r24, 0xFE	; 254
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	08 95       	ret

000006f0 <uartSendByte>:
     6f0:	98 2f       	mov	r25, r24
     6f2:	80 91 f4 00 	lds	r24, 0x00F4
     6f6:	88 23       	and	r24, r24
     6f8:	e1 f3       	breq	.-8      	; 0x6f2 <uartSendByte+0x2>
     6fa:	9c b9       	out	0x0c, r25	; 12
     6fc:	10 92 f4 00 	sts	0x00F4, r1
     700:	08 95       	ret

00000702 <uartFlushReceiveBuffer>:
     702:	10 92 fa 00 	sts	0x00FA, r1
     706:	10 92 f9 00 	sts	0x00F9, r1
     70a:	08 95       	ret

0000070c <uartReceiveBufferIsEmpty>:
     70c:	80 91 f9 00 	lds	r24, 0x00F9
     710:	90 91 fa 00 	lds	r25, 0x00FA
     714:	89 2b       	or	r24, r25
     716:	11 f0       	breq	.+4      	; 0x71c <uartReceiveBufferIsEmpty+0x10>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	08 95       	ret
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	08 95       	ret

00000720 <__vector_11>:
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
     742:	6c b1       	in	r22, 0x0c	; 12
     744:	80 91 e2 00 	lds	r24, 0x00E2
     748:	90 91 e3 00 	lds	r25, 0x00E3
     74c:	89 2b       	or	r24, r25
     74e:	39 f0       	breq	.+14     	; 0x75e <__vector_11+0x3e>
     750:	e0 91 e2 00 	lds	r30, 0x00E2
     754:	f0 91 e3 00 	lds	r31, 0x00E3
     758:	86 2f       	mov	r24, r22
     75a:	09 95       	icall
     75c:	0f c0       	rjmp	.+30     	; 0x77c <__vector_11+0x5c>
     75e:	85 ef       	ldi	r24, 0xF5	; 245
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <bufferAddToEnd>
     766:	88 23       	and	r24, r24
     768:	49 f4       	brne	.+18     	; 0x77c <__vector_11+0x5c>
     76a:	80 91 06 01 	lds	r24, 0x0106
     76e:	90 91 07 01 	lds	r25, 0x0107
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	90 93 07 01 	sts	0x0107, r25
     778:	80 93 06 01 	sts	0x0106, r24
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	3f 91       	pop	r19
     792:	2f 91       	pop	r18
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <uartAddToTxBuffer>:
     79e:	68 2f       	mov	r22, r24
     7a0:	8e ef       	ldi	r24, 0xFE	; 254
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <bufferAddToEnd>
     7a8:	08 95       	ret

000007aa <__vector_13>:
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
     7cc:	80 91 fd 00 	lds	r24, 0x00FD
     7d0:	88 23       	and	r24, r24
     7d2:	71 f0       	breq	.+28     	; 0x7f0 <__vector_13+0x46>
     7d4:	80 91 02 01 	lds	r24, 0x0102
     7d8:	90 91 03 01 	lds	r25, 0x0103
     7dc:	89 2b       	or	r24, r25
     7de:	31 f0       	breq	.+12     	; 0x7ec <__vector_13+0x42>
     7e0:	8e ef       	ldi	r24, 0xFE	; 254
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 83 04 	call	0x906	; 0x906 <bufferGetFromFront>
     7e8:	8c b9       	out	0x0c, r24	; 12
     7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <__vector_13+0x4c>
     7ec:	10 92 fd 00 	sts	0x00FD, r1
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	80 93 f4 00 	sts	0x00F4, r24
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <uartSendTxBuffer>:
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	80 93 fd 00 	sts	0x00FD, r24
     81e:	8e ef       	ldi	r24, 0xFE	; 254
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 83 04 	call	0x906	; 0x906 <bufferGetFromFront>
     826:	98 2f       	mov	r25, r24
     828:	80 91 f4 00 	lds	r24, 0x00F4
     82c:	88 23       	and	r24, r24
     82e:	e1 f3       	breq	.-8      	; 0x828 <uartSendTxBuffer+0x10>
     830:	9c b9       	out	0x0c, r25	; 12
     832:	10 92 f4 00 	sts	0x00F4, r1
     836:	08 95       	ret

00000838 <uartReceiveByte>:
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
     83e:	80 91 f7 00 	lds	r24, 0x00F7
     842:	90 91 f8 00 	lds	r25, 0x00F8
     846:	89 2b       	or	r24, r25
     848:	69 f0       	breq	.+26     	; 0x864 <__stack+0x5>
     84a:	80 91 f9 00 	lds	r24, 0x00F9
     84e:	90 91 fa 00 	lds	r25, 0x00FA
     852:	89 2b       	or	r24, r25
     854:	39 f0       	breq	.+14     	; 0x864 <__stack+0x5>
     856:	85 ef       	ldi	r24, 0xF5	; 245
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 83 04 	call	0x906	; 0x906 <bufferGetFromFront>
     85e:	88 83       	st	Y, r24
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	01 c0       	rjmp	.+2      	; 0x866 <__stack+0x7>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <uartGetByte>:
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	0f 92       	push	r0
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	0e 94 1c 04 	call	0x838	; 0x838 <uartReceiveByte>
     87e:	88 23       	and	r24, r24
     880:	19 f4       	brne	.+6      	; 0x888 <uartGetByte+0x1c>
     882:	2f ef       	ldi	r18, 0xFF	; 255
     884:	3f ef       	ldi	r19, 0xFF	; 255
     886:	03 c0       	rjmp	.+6      	; 0x88e <uartGetByte+0x22>
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	c9 01       	movw	r24, r18
     890:	0f 90       	pop	r0
     892:	cf 91       	pop	r28
     894:	df 91       	pop	r29
     896:	08 95       	ret

00000898 <uartInitBuffers>:
     898:	85 ef       	ldi	r24, 0xF5	; 245
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	62 e6       	ldi	r22, 0x62	; 98
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	40 e4       	ldi	r20, 0x40	; 64
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	0e 94 76 04 	call	0x8ec	; 0x8ec <bufferInit>
     8a8:	8e ef       	ldi	r24, 0xFE	; 254
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	62 ea       	ldi	r22, 0xA2	; 162
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	40 e4       	ldi	r20, 0x40	; 64
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	0e 94 76 04 	call	0x8ec	; 0x8ec <bufferInit>
     8b8:	08 95       	ret

000008ba <uartInit>:
     8ba:	0e 94 4c 04 	call	0x898	; 0x898 <uartInitBuffers>
     8be:	10 92 e3 00 	sts	0x00E3, r1
     8c2:	10 92 e2 00 	sts	0x00E2, r1
     8c6:	88 ed       	ldi	r24, 0xD8	; 216
     8c8:	8a b9       	out	0x0a, r24	; 10
     8ca:	60 e8       	ldi	r22, 0x80	; 128
     8cc:	75 e2       	ldi	r23, 0x25	; 37
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 57 03 	call	0x6ae	; 0x6ae <uartSetBaudRate>
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	80 93 f4 00 	sts	0x00F4, r24
     8dc:	10 92 fd 00 	sts	0x00FD, r1
     8e0:	10 92 07 01 	sts	0x0107, r1
     8e4:	10 92 06 01 	sts	0x0106, r1
     8e8:	78 94       	sei
     8ea:	08 95       	ret

000008ec <bufferInit>:
     8ec:	fc 01       	movw	r30, r24
     8ee:	8f b7       	in	r24, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	71 83       	std	Z+1, r23	; 0x01
     8f4:	60 83       	st	Z, r22
     8f6:	53 83       	std	Z+3, r21	; 0x03
     8f8:	42 83       	std	Z+2, r20	; 0x02
     8fa:	17 82       	std	Z+7, r1	; 0x07
     8fc:	16 82       	std	Z+6, r1	; 0x06
     8fe:	15 82       	std	Z+5, r1	; 0x05
     900:	14 82       	std	Z+4, r1	; 0x04
     902:	8f bf       	out	0x3f, r24	; 63
     904:	08 95       	ret

00000906 <bufferGetFromFront>:
     906:	dc 01       	movw	r26, r24
     908:	4f b7       	in	r20, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	14 96       	adiw	r26, 0x04	; 4
     90e:	8d 91       	ld	r24, X+
     910:	9c 91       	ld	r25, X
     912:	15 97       	sbiw	r26, 0x05	; 5
     914:	89 2b       	or	r24, r25
     916:	11 f4       	brne	.+4      	; 0x91c <bufferGetFromFront+0x16>
     918:	e0 e0       	ldi	r30, 0x00	; 0
     91a:	25 c0       	rjmp	.+74     	; 0x966 <bufferGetFromFront+0x60>
     91c:	16 96       	adiw	r26, 0x06	; 6
     91e:	8d 91       	ld	r24, X+
     920:	9c 91       	ld	r25, X
     922:	17 97       	sbiw	r26, 0x07	; 7
     924:	ed 91       	ld	r30, X+
     926:	fc 91       	ld	r31, X
     928:	11 97       	sbiw	r26, 0x01	; 1
     92a:	e8 0f       	add	r30, r24
     92c:	f9 1f       	adc	r31, r25
     92e:	e0 81       	ld	r30, Z
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	17 96       	adiw	r26, 0x07	; 7
     934:	9c 93       	st	X, r25
     936:	8e 93       	st	-X, r24
     938:	16 97       	sbiw	r26, 0x06	; 6
     93a:	12 96       	adiw	r26, 0x02	; 2
     93c:	2d 91       	ld	r18, X+
     93e:	3c 91       	ld	r19, X
     940:	13 97       	sbiw	r26, 0x03	; 3
     942:	82 17       	cp	r24, r18
     944:	93 07       	cpc	r25, r19
     946:	30 f0       	brcs	.+12     	; 0x954 <bufferGetFromFront+0x4e>
     948:	82 1b       	sub	r24, r18
     94a:	93 0b       	sbc	r25, r19
     94c:	17 96       	adiw	r26, 0x07	; 7
     94e:	9c 93       	st	X, r25
     950:	8e 93       	st	-X, r24
     952:	16 97       	sbiw	r26, 0x06	; 6
     954:	14 96       	adiw	r26, 0x04	; 4
     956:	8d 91       	ld	r24, X+
     958:	9c 91       	ld	r25, X
     95a:	15 97       	sbiw	r26, 0x05	; 5
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	15 96       	adiw	r26, 0x05	; 5
     960:	9c 93       	st	X, r25
     962:	8e 93       	st	-X, r24
     964:	14 97       	sbiw	r26, 0x04	; 4
     966:	4f bf       	out	0x3f, r20	; 63
     968:	8e 2f       	mov	r24, r30
     96a:	08 95       	ret

0000096c <bufferDumpFromFront>:
     96c:	fc 01       	movw	r30, r24
     96e:	4f b7       	in	r20, 0x3f	; 63
     970:	f8 94       	cli
     972:	84 81       	ldd	r24, Z+4	; 0x04
     974:	95 81       	ldd	r25, Z+5	; 0x05
     976:	68 17       	cp	r22, r24
     978:	79 07       	cpc	r23, r25
     97a:	b0 f4       	brcc	.+44     	; 0x9a8 <bufferDumpFromFront+0x3c>
     97c:	86 81       	ldd	r24, Z+6	; 0x06
     97e:	97 81       	ldd	r25, Z+7	; 0x07
     980:	86 0f       	add	r24, r22
     982:	97 1f       	adc	r25, r23
     984:	97 83       	std	Z+7, r25	; 0x07
     986:	86 83       	std	Z+6, r24	; 0x06
     988:	22 81       	ldd	r18, Z+2	; 0x02
     98a:	33 81       	ldd	r19, Z+3	; 0x03
     98c:	82 17       	cp	r24, r18
     98e:	93 07       	cpc	r25, r19
     990:	20 f0       	brcs	.+8      	; 0x99a <bufferDumpFromFront+0x2e>
     992:	82 1b       	sub	r24, r18
     994:	93 0b       	sbc	r25, r19
     996:	97 83       	std	Z+7, r25	; 0x07
     998:	86 83       	std	Z+6, r24	; 0x06
     99a:	84 81       	ldd	r24, Z+4	; 0x04
     99c:	95 81       	ldd	r25, Z+5	; 0x05
     99e:	86 1b       	sub	r24, r22
     9a0:	97 0b       	sbc	r25, r23
     9a2:	95 83       	std	Z+5, r25	; 0x05
     9a4:	84 83       	std	Z+4, r24	; 0x04
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <bufferDumpFromFront+0x40>
     9a8:	15 82       	std	Z+5, r1	; 0x05
     9aa:	14 82       	std	Z+4, r1	; 0x04
     9ac:	4f bf       	out	0x3f, r20	; 63
     9ae:	08 95       	ret

000009b0 <bufferGetAtIndex>:
     9b0:	fc 01       	movw	r30, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	2f b7       	in	r18, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	2f bf       	out	0x3f, r18	; 63
     9ba:	26 81       	ldd	r18, Z+6	; 0x06
     9bc:	37 81       	ldd	r19, Z+7	; 0x07
     9be:	62 81       	ldd	r22, Z+2	; 0x02
     9c0:	73 81       	ldd	r23, Z+3	; 0x03
     9c2:	82 0f       	add	r24, r18
     9c4:	93 1f       	adc	r25, r19
     9c6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__udivmodhi4>
     9ca:	01 90       	ld	r0, Z+
     9cc:	f0 81       	ld	r31, Z
     9ce:	e0 2d       	mov	r30, r0
     9d0:	e8 0f       	add	r30, r24
     9d2:	f9 1f       	adc	r31, r25
     9d4:	80 81       	ld	r24, Z
     9d6:	08 95       	ret

000009d8 <bufferAddToEnd>:
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
     9e0:	16 2f       	mov	r17, r22
     9e2:	4f b7       	in	r20, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	2c 81       	ldd	r18, Y+4	; 0x04
     9e8:	3d 81       	ldd	r19, Y+5	; 0x05
     9ea:	6a 81       	ldd	r22, Y+2	; 0x02
     9ec:	7b 81       	ldd	r23, Y+3	; 0x03
     9ee:	26 17       	cp	r18, r22
     9f0:	37 07       	cpc	r19, r23
     9f2:	98 f4       	brcc	.+38     	; 0xa1a <bufferAddToEnd+0x42>
     9f4:	8e 81       	ldd	r24, Y+6	; 0x06
     9f6:	9f 81       	ldd	r25, Y+7	; 0x07
     9f8:	82 0f       	add	r24, r18
     9fa:	93 1f       	adc	r25, r19
     9fc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__udivmodhi4>
     a00:	e8 81       	ld	r30, Y
     a02:	f9 81       	ldd	r31, Y+1	; 0x01
     a04:	e8 0f       	add	r30, r24
     a06:	f9 1f       	adc	r31, r25
     a08:	10 83       	st	Z, r17
     a0a:	8c 81       	ldd	r24, Y+4	; 0x04
     a0c:	9d 81       	ldd	r25, Y+5	; 0x05
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	9d 83       	std	Y+5, r25	; 0x05
     a12:	8c 83       	std	Y+4, r24	; 0x04
     a14:	4f bf       	out	0x3f, r20	; 63
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <bufferAddToEnd+0x46>
     a1a:	4f bf       	out	0x3f, r20	; 63
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	08 95       	ret

00000a26 <bufferIsNotFull>:
     a26:	fc 01       	movw	r30, r24
     a28:	8f b7       	in	r24, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	8f bf       	out	0x3f, r24	; 63
     a2e:	22 81       	ldd	r18, Z+2	; 0x02
     a30:	33 81       	ldd	r19, Z+3	; 0x03
     a32:	84 81       	ldd	r24, Z+4	; 0x04
     a34:	95 81       	ldd	r25, Z+5	; 0x05
     a36:	28 1b       	sub	r18, r24
     a38:	39 0b       	sbc	r19, r25
     a3a:	c9 01       	movw	r24, r18
     a3c:	08 95       	ret

00000a3e <bufferFlush>:
     a3e:	fc 01       	movw	r30, r24
     a40:	8f b7       	in	r24, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	15 82       	std	Z+5, r1	; 0x05
     a46:	14 82       	std	Z+4, r1	; 0x04
     a48:	8f bf       	out	0x3f, r24	; 63
     a4a:	08 95       	ret

00000a4c <a2dInit>:
     a4c:	37 9a       	sbi	0x06, 7	; 6
     a4e:	35 98       	cbi	0x06, 5	; 6
     a50:	86 b1       	in	r24, 0x06	; 6
     a52:	88 7f       	andi	r24, 0xF8	; 248
     a54:	86 60       	ori	r24, 0x06	; 6
     a56:	86 b9       	out	0x06, r24	; 6
     a58:	87 b1       	in	r24, 0x07	; 7
     a5a:	8f 73       	andi	r24, 0x3F	; 63
     a5c:	80 64       	ori	r24, 0x40	; 64
     a5e:	87 b9       	out	0x07, r24	; 7
     a60:	3d 98       	cbi	0x07, 5	; 7
     a62:	33 9a       	sbi	0x06, 3	; 6
     a64:	10 92 08 01 	sts	0x0108, r1
     a68:	78 94       	sei
     a6a:	08 95       	ret

00000a6c <a2dOff>:
     a6c:	33 98       	cbi	0x06, 3	; 6
     a6e:	37 98       	cbi	0x06, 7	; 6
     a70:	08 95       	ret

00000a72 <a2dSetPrescaler>:
     a72:	96 b1       	in	r25, 0x06	; 6
     a74:	98 7f       	andi	r25, 0xF8	; 248
     a76:	98 2b       	or	r25, r24
     a78:	96 b9       	out	0x06, r25	; 6
     a7a:	08 95       	ret

00000a7c <a2dSetReference>:
     a7c:	97 b1       	in	r25, 0x07	; 7
     a7e:	82 95       	swap	r24
     a80:	88 0f       	add	r24, r24
     a82:	88 0f       	add	r24, r24
     a84:	80 7c       	andi	r24, 0xC0	; 192
     a86:	9f 73       	andi	r25, 0x3F	; 63
     a88:	98 2b       	or	r25, r24
     a8a:	97 b9       	out	0x07, r25	; 7
     a8c:	08 95       	ret

00000a8e <a2dSetChannel>:
     a8e:	97 b1       	in	r25, 0x07	; 7
     a90:	8f 71       	andi	r24, 0x1F	; 31
     a92:	90 7e       	andi	r25, 0xE0	; 224
     a94:	89 2b       	or	r24, r25
     a96:	87 b9       	out	0x07, r24	; 7
     a98:	08 95       	ret

00000a9a <a2dStartConvert>:
     a9a:	34 9a       	sbi	0x06, 4	; 6
     a9c:	36 9a       	sbi	0x06, 6	; 6
     a9e:	08 95       	ret

00000aa0 <a2dIsComplete>:
     aa0:	86 b1       	in	r24, 0x06	; 6
     aa2:	80 74       	andi	r24, 0x40	; 64
     aa4:	08 95       	ret

00000aa6 <a2dConvert10bit>:
     aa6:	10 92 08 01 	sts	0x0108, r1
     aaa:	97 b1       	in	r25, 0x07	; 7
     aac:	8f 71       	andi	r24, 0x1F	; 31
     aae:	90 7e       	andi	r25, 0xE0	; 224
     ab0:	89 2b       	or	r24, r25
     ab2:	87 b9       	out	0x07, r24	; 7
     ab4:	34 9a       	sbi	0x06, 4	; 6
     ab6:	36 9a       	sbi	0x06, 6	; 6
     ab8:	36 99       	sbic	0x06, 6	; 6
     aba:	fe cf       	rjmp	.-4      	; 0xab8 <a2dConvert10bit+0x12>
     abc:	24 b1       	in	r18, 0x04	; 4
     abe:	45 b1       	in	r20, 0x05	; 5
     ac0:	94 2f       	mov	r25, r20
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	28 2b       	or	r18, r24
     ac8:	39 2b       	or	r19, r25
     aca:	c9 01       	movw	r24, r18
     acc:	08 95       	ret

00000ace <a2dConvert8bit>:
     ace:	0e 94 53 05 	call	0xaa6	; 0xaa6 <a2dConvert10bit>
     ad2:	96 95       	lsr	r25
     ad4:	87 95       	ror	r24
     ad6:	96 95       	lsr	r25
     ad8:	87 95       	ror	r24
     ada:	08 95       	ret

00000adc <__vector_14>:
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	8f 93       	push	r24
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	80 93 08 01 	sts	0x0108, r24
     aee:	8f 91       	pop	r24
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <delay_us>:
     afa:	08 95       	ret

00000afc <timer0Init>:
     afc:	83 b7       	in	r24, 0x33	; 51
     afe:	88 7f       	andi	r24, 0xF8	; 248
     b00:	82 60       	ori	r24, 0x02	; 2
     b02:	83 bf       	out	0x33, r24	; 51
     b04:	12 be       	out	0x32, r1	; 50
     b06:	89 b7       	in	r24, 0x39	; 57
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	89 bf       	out	0x39, r24	; 57
     b0c:	10 92 09 01 	sts	0x0109, r1
     b10:	10 92 0a 01 	sts	0x010A, r1
     b14:	10 92 0b 01 	sts	0x010B, r1
     b18:	10 92 0c 01 	sts	0x010C, r1
     b1c:	08 95       	ret

00000b1e <timer1Init>:
     b1e:	8e b5       	in	r24, 0x2e	; 46
     b20:	88 7f       	andi	r24, 0xF8	; 248
     b22:	83 60       	ori	r24, 0x03	; 3
     b24:	8e bd       	out	0x2e, r24	; 46
     b26:	1d bc       	out	0x2d, r1	; 45
     b28:	1c bc       	out	0x2c, r1	; 44
     b2a:	89 b7       	in	r24, 0x39	; 57
     b2c:	84 60       	ori	r24, 0x04	; 4
     b2e:	89 bf       	out	0x39, r24	; 57
     b30:	08 95       	ret

00000b32 <timer2Init>:
     b32:	85 b5       	in	r24, 0x25	; 37
     b34:	88 7f       	andi	r24, 0xF8	; 248
     b36:	84 60       	ori	r24, 0x04	; 4
     b38:	85 bd       	out	0x25, r24	; 37
     b3a:	14 bc       	out	0x24, r1	; 36
     b3c:	89 b7       	in	r24, 0x39	; 57
     b3e:	80 64       	ori	r24, 0x40	; 64
     b40:	89 bf       	out	0x39, r24	; 57
     b42:	10 92 11 01 	sts	0x0111, r1
     b46:	10 92 12 01 	sts	0x0112, r1
     b4a:	10 92 13 01 	sts	0x0113, r1
     b4e:	10 92 14 01 	sts	0x0114, r1
     b52:	08 95       	ret

00000b54 <timerInit>:
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	fc 01       	movw	r30, r24
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	ec 51       	subi	r30, 0x1C	; 28
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	11 82       	std	Z+1, r1	; 0x01
     b64:	10 82       	st	Z, r1
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	88 30       	cpi	r24, 0x08	; 8
     b6a:	91 05       	cpc	r25, r1
     b6c:	a9 f7       	brne	.-22     	; 0xb58 <timerInit+0x4>
     b6e:	0e 94 7e 05 	call	0xafc	; 0xafc <timer0Init>
     b72:	0e 94 8f 05 	call	0xb1e	; 0xb1e <timer1Init>
     b76:	0e 94 99 05 	call	0xb32	; 0xb32 <timer2Init>
     b7a:	78 94       	sei
     b7c:	08 95       	ret

00000b7e <timer0SetPrescaler>:
     b7e:	93 b7       	in	r25, 0x33	; 51
     b80:	98 7f       	andi	r25, 0xF8	; 248
     b82:	98 2b       	or	r25, r24
     b84:	93 bf       	out	0x33, r25	; 51
     b86:	08 95       	ret

00000b88 <timer1SetPrescaler>:
     b88:	9e b5       	in	r25, 0x2e	; 46
     b8a:	98 7f       	andi	r25, 0xF8	; 248
     b8c:	98 2b       	or	r25, r24
     b8e:	9e bd       	out	0x2e, r25	; 46
     b90:	08 95       	ret

00000b92 <timer2SetPrescaler>:
     b92:	95 b5       	in	r25, 0x25	; 37
     b94:	98 7f       	andi	r25, 0xF8	; 248
     b96:	98 2b       	or	r25, r24
     b98:	95 bd       	out	0x25, r25	; 37
     b9a:	08 95       	ret

00000b9c <timer0GetPrescaler>:
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	e8 2f       	mov	r30, r24
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	e7 70       	andi	r30, 0x07	; 7
     ba4:	f0 70       	andi	r31, 0x00	; 0
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	e0 57       	subi	r30, 0x70	; 112
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	25 91       	lpm	r18, Z+
     bb0:	34 91       	lpm	r19, Z+
     bb2:	c9 01       	movw	r24, r18
     bb4:	08 95       	ret

00000bb6 <timer1GetPrescaler>:
     bb6:	8e b5       	in	r24, 0x2e	; 46
     bb8:	e8 2f       	mov	r30, r24
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	e7 70       	andi	r30, 0x07	; 7
     bbe:	f0 70       	andi	r31, 0x00	; 0
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	e0 57       	subi	r30, 0x70	; 112
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	25 91       	lpm	r18, Z+
     bca:	34 91       	lpm	r19, Z+
     bcc:	c9 01       	movw	r24, r18
     bce:	08 95       	ret

00000bd0 <timer2GetPrescaler>:
     bd0:	85 b5       	in	r24, 0x25	; 37
     bd2:	e8 2f       	mov	r30, r24
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	e7 70       	andi	r30, 0x07	; 7
     bd8:	f0 70       	andi	r31, 0x00	; 0
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	e4 56       	subi	r30, 0x64	; 100
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	25 91       	lpm	r18, Z+
     be4:	34 91       	lpm	r19, Z+
     be6:	c9 01       	movw	r24, r18
     be8:	08 95       	ret

00000bea <timerAttach>:
     bea:	88 30       	cpi	r24, 0x08	; 8
     bec:	40 f4       	brcc	.+16     	; 0xbfe <timerAttach+0x14>
     bee:	e8 2f       	mov	r30, r24
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	ec 51       	subi	r30, 0x1C	; 28
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	71 83       	std	Z+1, r23	; 0x01
     bfc:	60 83       	st	Z, r22
     bfe:	08 95       	ret

00000c00 <timerDetach>:
     c00:	88 30       	cpi	r24, 0x08	; 8
     c02:	40 f4       	brcc	.+16     	; 0xc14 <timerDetach+0x14>
     c04:	e8 2f       	mov	r30, r24
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ec 51       	subi	r30, 0x1C	; 28
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	11 82       	std	Z+1, r1	; 0x01
     c12:	10 82       	st	Z, r1
     c14:	08 95       	ret

00000c16 <timerPause>:
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
     c24:	12 b7       	in	r17, 0x32	; 50
     c26:	10 92 0d 01 	sts	0x010D, r1
     c2a:	10 92 0e 01 	sts	0x010E, r1
     c2e:	10 92 0f 01 	sts	0x010F, r1
     c32:	10 92 10 01 	sts	0x0110, r1
     c36:	83 b7       	in	r24, 0x33	; 51
     c38:	e8 2f       	mov	r30, r24
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	e7 70       	andi	r30, 0x07	; 7
     c3e:	f0 70       	andi	r31, 0x00	; 0
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	e0 57       	subi	r30, 0x70	; 112
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	25 91       	lpm	r18, Z+
     c4a:	34 91       	lpm	r19, Z+
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	74 e2       	ldi	r23, 0x24	; 36
     c54:	84 ef       	ldi	r24, 0xF4	; 244
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 13 09 	call	0x1226	; 0x1226 <__divmodsi4>
     c5c:	b9 01       	movw	r22, r18
     c5e:	ca 01       	movw	r24, r20
     c60:	69 3b       	cpi	r22, 0xB9	; 185
     c62:	2d e8       	ldi	r18, 0x8D	; 141
     c64:	72 07       	cpc	r23, r18
     c66:	26 e0       	ldi	r18, 0x06	; 6
     c68:	82 07       	cpc	r24, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	92 07       	cpc	r25, r18
     c6e:	a0 f4       	brcc	.+40     	; 0xc98 <timerPause+0x82>
     c70:	37 e2       	ldi	r19, 0x27	; 39
     c72:	c1 31       	cpi	r28, 0x11	; 17
     c74:	d3 07       	cpc	r29, r19
     c76:	80 f4       	brcc	.+32     	; 0xc98 <timerPause+0x82>
     c78:	9e 01       	movw	r18, r28
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsi3>
     c82:	28 ee       	ldi	r18, 0xE8	; 232
     c84:	33 e0       	ldi	r19, 0x03	; 3
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     c8e:	c9 01       	movw	r24, r18
     c90:	da 01       	movw	r26, r20
     c92:	bc 01       	movw	r22, r24
     c94:	cd 01       	movw	r24, r26
     c96:	21 c0       	rjmp	.+66     	; 0xcda <timerPause+0xc4>
     c98:	28 ee       	ldi	r18, 0xE8	; 232
     c9a:	33 e0       	ldi	r19, 0x03	; 3
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     ca4:	ca 01       	movw	r24, r20
     ca6:	b9 01       	movw	r22, r18
     ca8:	9e 01       	movw	r18, r28
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsi3>
     cb2:	13 c0       	rjmp	.+38     	; 0xcda <timerPause+0xc4>
     cb4:	80 91 0d 01 	lds	r24, 0x010D
     cb8:	90 91 0e 01 	lds	r25, 0x010E
     cbc:	a0 91 0f 01 	lds	r26, 0x010F
     cc0:	b0 91 10 01 	lds	r27, 0x0110
     cc4:	85 b7       	in	r24, 0x35	; 53
     cc6:	8f 74       	andi	r24, 0x4F	; 79
     cc8:	85 bf       	out	0x35, r24	; 53
     cca:	85 b7       	in	r24, 0x35	; 53
     ccc:	80 64       	ori	r24, 0x40	; 64
     cce:	85 bf       	out	0x35, r24	; 53
     cd0:	88 95       	sleep
     cd2:	85 b7       	in	r24, 0x35	; 53
     cd4:	8f 7b       	andi	r24, 0xBF	; 191
     cd6:	85 bf       	out	0x35, r24	; 53
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <timerPause+0xd4>
     cda:	9b 01       	movw	r18, r22
     cdc:	ac 01       	movw	r20, r24
     cde:	21 0f       	add	r18, r17
     ce0:	31 1d       	adc	r19, r1
     ce2:	41 1d       	adc	r20, r1
     ce4:	51 1d       	adc	r21, r1
     ce6:	79 01       	movw	r14, r18
     ce8:	8a 01       	movw	r16, r20
     cea:	20 91 0d 01 	lds	r18, 0x010D
     cee:	30 91 0e 01 	lds	r19, 0x010E
     cf2:	40 91 0f 01 	lds	r20, 0x010F
     cf6:	50 91 10 01 	lds	r21, 0x0110
     cfa:	82 b7       	in	r24, 0x32	; 50
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	54 2f       	mov	r21, r20
     d04:	43 2f       	mov	r20, r19
     d06:	32 2f       	mov	r19, r18
     d08:	22 27       	eor	r18, r18
     d0a:	82 2b       	or	r24, r18
     d0c:	93 2b       	or	r25, r19
     d0e:	a4 2b       	or	r26, r20
     d10:	b5 2b       	or	r27, r21
     d12:	8e 15       	cp	r24, r14
     d14:	9f 05       	cpc	r25, r15
     d16:	a0 07       	cpc	r26, r16
     d18:	b1 07       	cpc	r27, r17
     d1a:	60 f2       	brcs	.-104    	; 0xcb4 <timerPause+0x9e>
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <timer0ClearOverflowCount>:
     d2a:	10 92 09 01 	sts	0x0109, r1
     d2e:	10 92 0a 01 	sts	0x010A, r1
     d32:	10 92 0b 01 	sts	0x010B, r1
     d36:	10 92 0c 01 	sts	0x010C, r1
     d3a:	08 95       	ret

00000d3c <timer0GetOverflowCount>:
     d3c:	20 91 09 01 	lds	r18, 0x0109
     d40:	30 91 0a 01 	lds	r19, 0x010A
     d44:	40 91 0b 01 	lds	r20, 0x010B
     d48:	50 91 0c 01 	lds	r21, 0x010C
     d4c:	b9 01       	movw	r22, r18
     d4e:	ca 01       	movw	r24, r20
     d50:	08 95       	ret

00000d52 <timer2ClearOverflowCount>:
     d52:	10 92 11 01 	sts	0x0111, r1
     d56:	10 92 12 01 	sts	0x0112, r1
     d5a:	10 92 13 01 	sts	0x0113, r1
     d5e:	10 92 14 01 	sts	0x0114, r1
     d62:	08 95       	ret

00000d64 <timer2GetOverflowCount>:
     d64:	20 91 11 01 	lds	r18, 0x0111
     d68:	30 91 12 01 	lds	r19, 0x0112
     d6c:	40 91 13 01 	lds	r20, 0x0113
     d70:	50 91 14 01 	lds	r21, 0x0114
     d74:	b9 01       	movw	r22, r18
     d76:	ca 01       	movw	r24, r20
     d78:	08 95       	ret

00000d7a <timer1PWMInit>:
     d7a:	89 30       	cpi	r24, 0x09	; 9
     d7c:	31 f4       	brne	.+12     	; 0xd8a <timer1PWMInit+0x10>
     d7e:	8f b5       	in	r24, 0x2f	; 47
     d80:	82 60       	ori	r24, 0x02	; 2
     d82:	8f bd       	out	0x2f, r24	; 47
     d84:	8f b5       	in	r24, 0x2f	; 47
     d86:	8e 7f       	andi	r24, 0xFE	; 254
     d88:	0a c0       	rjmp	.+20     	; 0xd9e <timer1PWMInit+0x24>
     d8a:	8a 30       	cpi	r24, 0x0A	; 10
     d8c:	19 f4       	brne	.+6      	; 0xd94 <timer1PWMInit+0x1a>
     d8e:	8f b5       	in	r24, 0x2f	; 47
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <timer1PWMInit+0x1e>
     d94:	8f b5       	in	r24, 0x2f	; 47
     d96:	8d 7f       	andi	r24, 0xFD	; 253
     d98:	8f bd       	out	0x2f, r24	; 47
     d9a:	8f b5       	in	r24, 0x2f	; 47
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	8f bd       	out	0x2f, r24	; 47
     da0:	1b bc       	out	0x2b, r1	; 43
     da2:	1a bc       	out	0x2a, r1	; 42
     da4:	19 bc       	out	0x29, r1	; 41
     da6:	18 bc       	out	0x28, r1	; 40
     da8:	08 95       	ret

00000daa <timer1PWMInitICR>:
     daa:	2f b5       	in	r18, 0x2f	; 47
     dac:	2e 7f       	andi	r18, 0xFE	; 254
     dae:	2f bd       	out	0x2f, r18	; 47
     db0:	2f b5       	in	r18, 0x2f	; 47
     db2:	22 60       	ori	r18, 0x02	; 2
     db4:	2f bd       	out	0x2f, r18	; 47
     db6:	2e b5       	in	r18, 0x2e	; 46
     db8:	28 60       	ori	r18, 0x08	; 8
     dba:	2e bd       	out	0x2e, r18	; 46
     dbc:	2e b5       	in	r18, 0x2e	; 46
     dbe:	20 61       	ori	r18, 0x10	; 16
     dc0:	2e bd       	out	0x2e, r18	; 46
     dc2:	97 bd       	out	0x27, r25	; 39
     dc4:	86 bd       	out	0x26, r24	; 38
     dc6:	1b bc       	out	0x2b, r1	; 43
     dc8:	1a bc       	out	0x2a, r1	; 42
     dca:	19 bc       	out	0x29, r1	; 41
     dcc:	18 bc       	out	0x28, r1	; 40
     dce:	08 95       	ret

00000dd0 <timer1PWMOff>:
     dd0:	8f b5       	in	r24, 0x2f	; 47
     dd2:	8d 7f       	andi	r24, 0xFD	; 253
     dd4:	8f bd       	out	0x2f, r24	; 47
     dd6:	8f b5       	in	r24, 0x2f	; 47
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
     dda:	8f bd       	out	0x2f, r24	; 47
     ddc:	8f b5       	in	r24, 0x2f	; 47
     dde:	8f 77       	andi	r24, 0x7F	; 127
     de0:	8f bd       	out	0x2f, r24	; 47
     de2:	8f b5       	in	r24, 0x2f	; 47
     de4:	8f 7b       	andi	r24, 0xBF	; 191
     de6:	8f bd       	out	0x2f, r24	; 47
     de8:	8f b5       	in	r24, 0x2f	; 47
     dea:	8f 7d       	andi	r24, 0xDF	; 223
     dec:	8f bd       	out	0x2f, r24	; 47
     dee:	8f b5       	in	r24, 0x2f	; 47
     df0:	8f 7e       	andi	r24, 0xEF	; 239
     df2:	8f bd       	out	0x2f, r24	; 47
     df4:	08 95       	ret

00000df6 <timer1PWMAOn>:
     df6:	8f b5       	in	r24, 0x2f	; 47
     df8:	80 68       	ori	r24, 0x80	; 128
     dfa:	8f bd       	out	0x2f, r24	; 47
     dfc:	8f b5       	in	r24, 0x2f	; 47
     dfe:	8f 7b       	andi	r24, 0xBF	; 191
     e00:	8f bd       	out	0x2f, r24	; 47
     e02:	08 95       	ret

00000e04 <timer1PWMBOn>:
     e04:	8f b5       	in	r24, 0x2f	; 47
     e06:	80 62       	ori	r24, 0x20	; 32
     e08:	8f bd       	out	0x2f, r24	; 47
     e0a:	8f b5       	in	r24, 0x2f	; 47
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
     e0e:	8f bd       	out	0x2f, r24	; 47
     e10:	08 95       	ret

00000e12 <timer1PWMAOff>:
     e12:	8f b5       	in	r24, 0x2f	; 47
     e14:	8f 77       	andi	r24, 0x7F	; 127
     e16:	8f bd       	out	0x2f, r24	; 47
     e18:	8f b5       	in	r24, 0x2f	; 47
     e1a:	8f 7b       	andi	r24, 0xBF	; 191
     e1c:	8f bd       	out	0x2f, r24	; 47
     e1e:	08 95       	ret

00000e20 <timer1PWMBOff>:
     e20:	8f b5       	in	r24, 0x2f	; 47
     e22:	8f 7d       	andi	r24, 0xDF	; 223
     e24:	8f bd       	out	0x2f, r24	; 47
     e26:	8f b5       	in	r24, 0x2f	; 47
     e28:	8f 7e       	andi	r24, 0xEF	; 239
     e2a:	8f bd       	out	0x2f, r24	; 47
     e2c:	08 95       	ret

00000e2e <timer1PWMASet>:
     e2e:	9b bd       	out	0x2b, r25	; 43
     e30:	8a bd       	out	0x2a, r24	; 42
     e32:	08 95       	ret

00000e34 <timer1PWMBSet>:
     e34:	99 bd       	out	0x29, r25	; 41
     e36:	88 bd       	out	0x28, r24	; 40
     e38:	08 95       	ret

00000e3a <__vector_9>:
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	80 91 09 01 	lds	r24, 0x0109
     e60:	90 91 0a 01 	lds	r25, 0x010A
     e64:	a0 91 0b 01 	lds	r26, 0x010B
     e68:	b0 91 0c 01 	lds	r27, 0x010C
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	a1 1d       	adc	r26, r1
     e70:	b1 1d       	adc	r27, r1
     e72:	80 93 09 01 	sts	0x0109, r24
     e76:	90 93 0a 01 	sts	0x010A, r25
     e7a:	a0 93 0b 01 	sts	0x010B, r26
     e7e:	b0 93 0c 01 	sts	0x010C, r27
     e82:	80 91 0d 01 	lds	r24, 0x010D
     e86:	90 91 0e 01 	lds	r25, 0x010E
     e8a:	a0 91 0f 01 	lds	r26, 0x010F
     e8e:	b0 91 10 01 	lds	r27, 0x0110
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	a1 1d       	adc	r26, r1
     e96:	b1 1d       	adc	r27, r1
     e98:	80 93 0d 01 	sts	0x010D, r24
     e9c:	90 93 0e 01 	sts	0x010E, r25
     ea0:	a0 93 0f 01 	sts	0x010F, r26
     ea4:	b0 93 10 01 	sts	0x0110, r27
     ea8:	80 91 e4 00 	lds	r24, 0x00E4
     eac:	90 91 e5 00 	lds	r25, 0x00E5
     eb0:	89 2b       	or	r24, r25
     eb2:	29 f0       	breq	.+10     	; 0xebe <__vector_9+0x84>
     eb4:	e0 91 e4 00 	lds	r30, 0x00E4
     eb8:	f0 91 e5 00 	lds	r31, 0x00E5
     ebc:	09 95       	icall
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__vector_8>:
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	80 91 e6 00 	lds	r24, 0x00E6
     f06:	90 91 e7 00 	lds	r25, 0x00E7
     f0a:	89 2b       	or	r24, r25
     f0c:	29 f0       	breq	.+10     	; 0xf18 <__vector_8+0x38>
     f0e:	e0 91 e6 00 	lds	r30, 0x00E6
     f12:	f0 91 e7 00 	lds	r31, 0x00E7
     f16:	09 95       	icall
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_4>:
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	80 91 11 01 	lds	r24, 0x0111
     f60:	90 91 12 01 	lds	r25, 0x0112
     f64:	a0 91 13 01 	lds	r26, 0x0113
     f68:	b0 91 14 01 	lds	r27, 0x0114
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	a1 1d       	adc	r26, r1
     f70:	b1 1d       	adc	r27, r1
     f72:	80 93 11 01 	sts	0x0111, r24
     f76:	90 93 12 01 	sts	0x0112, r25
     f7a:	a0 93 13 01 	sts	0x0113, r26
     f7e:	b0 93 14 01 	sts	0x0114, r27
     f82:	80 91 ee 00 	lds	r24, 0x00EE
     f86:	90 91 ef 00 	lds	r25, 0x00EF
     f8a:	89 2b       	or	r24, r25
     f8c:	29 f0       	breq	.+10     	; 0xf98 <__vector_4+0x5e>
     f8e:	e0 91 ee 00 	lds	r30, 0x00EE
     f92:	f0 91 ef 00 	lds	r31, 0x00EF
     f96:	09 95       	icall
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_19>:
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	80 91 f2 00 	lds	r24, 0x00F2
     fe0:	90 91 f3 00 	lds	r25, 0x00F3
     fe4:	89 2b       	or	r24, r25
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__vector_19+0x38>
     fe8:	e0 91 f2 00 	lds	r30, 0x00F2
     fec:	f0 91 f3 00 	lds	r31, 0x00F3
     ff0:	09 95       	icall
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_6>:
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
    1036:	80 91 e8 00 	lds	r24, 0x00E8
    103a:	90 91 e9 00 	lds	r25, 0x00E9
    103e:	89 2b       	or	r24, r25
    1040:	29 f0       	breq	.+10     	; 0x104c <__vector_6+0x38>
    1042:	e0 91 e8 00 	lds	r30, 0x00E8
    1046:	f0 91 e9 00 	lds	r31, 0x00E9
    104a:	09 95       	icall
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_7>:
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
    1090:	80 91 ea 00 	lds	r24, 0x00EA
    1094:	90 91 eb 00 	lds	r25, 0x00EB
    1098:	89 2b       	or	r24, r25
    109a:	29 f0       	breq	.+10     	; 0x10a6 <__vector_7+0x38>
    109c:	e0 91 ea 00 	lds	r30, 0x00EA
    10a0:	f0 91 eb 00 	lds	r31, 0x00EB
    10a4:	09 95       	icall
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_5>:
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	80 91 ec 00 	lds	r24, 0x00EC
    10ee:	90 91 ed 00 	lds	r25, 0x00ED
    10f2:	89 2b       	or	r24, r25
    10f4:	29 f0       	breq	.+10     	; 0x1100 <__vector_5+0x38>
    10f6:	e0 91 ec 00 	lds	r30, 0x00EC
    10fa:	f0 91 ed 00 	lds	r31, 0x00ED
    10fe:	09 95       	icall
    1100:	ff 91       	pop	r31
    1102:	ef 91       	pop	r30
    1104:	bf 91       	pop	r27
    1106:	af 91       	pop	r26
    1108:	9f 91       	pop	r25
    110a:	8f 91       	pop	r24
    110c:	7f 91       	pop	r23
    110e:	6f 91       	pop	r22
    1110:	5f 91       	pop	r21
    1112:	4f 91       	pop	r20
    1114:	3f 91       	pop	r19
    1116:	2f 91       	pop	r18
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti

00001122 <__vector_3>:
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
    1144:	80 91 f0 00 	lds	r24, 0x00F0
    1148:	90 91 f1 00 	lds	r25, 0x00F1
    114c:	89 2b       	or	r24, r25
    114e:	29 f0       	breq	.+10     	; 0x115a <__vector_3+0x38>
    1150:	e0 91 f0 00 	lds	r30, 0x00F0
    1154:	f0 91 f1 00 	lds	r31, 0x00F1
    1158:	09 95       	icall
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <__mulsi3>:
    117c:	62 9f       	mul	r22, r18
    117e:	d0 01       	movw	r26, r0
    1180:	73 9f       	mul	r23, r19
    1182:	f0 01       	movw	r30, r0
    1184:	82 9f       	mul	r24, r18
    1186:	e0 0d       	add	r30, r0
    1188:	f1 1d       	adc	r31, r1
    118a:	64 9f       	mul	r22, r20
    118c:	e0 0d       	add	r30, r0
    118e:	f1 1d       	adc	r31, r1
    1190:	92 9f       	mul	r25, r18
    1192:	f0 0d       	add	r31, r0
    1194:	83 9f       	mul	r24, r19
    1196:	f0 0d       	add	r31, r0
    1198:	74 9f       	mul	r23, r20
    119a:	f0 0d       	add	r31, r0
    119c:	65 9f       	mul	r22, r21
    119e:	f0 0d       	add	r31, r0
    11a0:	99 27       	eor	r25, r25
    11a2:	72 9f       	mul	r23, r18
    11a4:	b0 0d       	add	r27, r0
    11a6:	e1 1d       	adc	r30, r1
    11a8:	f9 1f       	adc	r31, r25
    11aa:	63 9f       	mul	r22, r19
    11ac:	b0 0d       	add	r27, r0
    11ae:	e1 1d       	adc	r30, r1
    11b0:	f9 1f       	adc	r31, r25
    11b2:	bd 01       	movw	r22, r26
    11b4:	cf 01       	movw	r24, r30
    11b6:	11 24       	eor	r1, r1
    11b8:	08 95       	ret

000011ba <__udivmodhi4>:
    11ba:	aa 1b       	sub	r26, r26
    11bc:	bb 1b       	sub	r27, r27
    11be:	51 e1       	ldi	r21, 0x11	; 17
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <__udivmodhi4_ep>

000011c2 <__udivmodhi4_loop>:
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	a6 17       	cp	r26, r22
    11c8:	b7 07       	cpc	r27, r23
    11ca:	10 f0       	brcs	.+4      	; 0x11d0 <__udivmodhi4_ep>
    11cc:	a6 1b       	sub	r26, r22
    11ce:	b7 0b       	sbc	r27, r23

000011d0 <__udivmodhi4_ep>:
    11d0:	88 1f       	adc	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	5a 95       	dec	r21
    11d6:	a9 f7       	brne	.-22     	; 0x11c2 <__udivmodhi4_loop>
    11d8:	80 95       	com	r24
    11da:	90 95       	com	r25
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	08 95       	ret

000011e2 <__udivmodsi4>:
    11e2:	a1 e2       	ldi	r26, 0x21	; 33
    11e4:	1a 2e       	mov	r1, r26
    11e6:	aa 1b       	sub	r26, r26
    11e8:	bb 1b       	sub	r27, r27
    11ea:	fd 01       	movw	r30, r26
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <__udivmodsi4_ep>

000011ee <__udivmodsi4_loop>:
    11ee:	aa 1f       	adc	r26, r26
    11f0:	bb 1f       	adc	r27, r27
    11f2:	ee 1f       	adc	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	a2 17       	cp	r26, r18
    11f8:	b3 07       	cpc	r27, r19
    11fa:	e4 07       	cpc	r30, r20
    11fc:	f5 07       	cpc	r31, r21
    11fe:	20 f0       	brcs	.+8      	; 0x1208 <__udivmodsi4_ep>
    1200:	a2 1b       	sub	r26, r18
    1202:	b3 0b       	sbc	r27, r19
    1204:	e4 0b       	sbc	r30, r20
    1206:	f5 0b       	sbc	r31, r21

00001208 <__udivmodsi4_ep>:
    1208:	66 1f       	adc	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	1a 94       	dec	r1
    1212:	69 f7       	brne	.-38     	; 0x11ee <__udivmodsi4_loop>
    1214:	60 95       	com	r22
    1216:	70 95       	com	r23
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	bd 01       	movw	r22, r26
    1222:	cf 01       	movw	r24, r30
    1224:	08 95       	ret

00001226 <__divmodsi4>:
    1226:	97 fb       	bst	r25, 7
    1228:	09 2e       	mov	r0, r25
    122a:	05 26       	eor	r0, r21
    122c:	0e d0       	rcall	.+28     	; 0x124a <__divmodsi4_neg1>
    122e:	57 fd       	sbrc	r21, 7
    1230:	04 d0       	rcall	.+8      	; 0x123a <__divmodsi4_neg2>
    1232:	d7 df       	rcall	.-82     	; 0x11e2 <__udivmodsi4>
    1234:	0a d0       	rcall	.+20     	; 0x124a <__divmodsi4_neg1>
    1236:	00 1c       	adc	r0, r0
    1238:	38 f4       	brcc	.+14     	; 0x1248 <__divmodsi4_exit>

0000123a <__divmodsi4_neg2>:
    123a:	50 95       	com	r21
    123c:	40 95       	com	r20
    123e:	30 95       	com	r19
    1240:	21 95       	neg	r18
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	4f 4f       	sbci	r20, 0xFF	; 255
    1246:	5f 4f       	sbci	r21, 0xFF	; 255

00001248 <__divmodsi4_exit>:
    1248:	08 95       	ret

0000124a <__divmodsi4_neg1>:
    124a:	f6 f7       	brtc	.-4      	; 0x1248 <__divmodsi4_exit>
    124c:	90 95       	com	r25
    124e:	80 95       	com	r24
    1250:	70 95       	com	r23
    1252:	61 95       	neg	r22
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	8f 4f       	sbci	r24, 0xFF	; 255
    1258:	9f 4f       	sbci	r25, 0xFF	; 255
    125a:	08 95       	ret

0000125c <_exit>:
    125c:	f8 94       	cli

0000125e <__stop_program>:
    125e:	ff cf       	rjmp	.-2      	; 0x125e <__stop_program>
