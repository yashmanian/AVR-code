   1               		.file	"rprintf.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 109               		.section	.progmem.data,"a",@progbits
 112               	HexChars:
 113 0000 3031 3233 		.string	"0123456789ABCDEF"
 113      3435 3637 
 113      3839 4142 
 113      4344 4546 
 113      00
 114               		.text
 117               	.global	rprintfInit
 119               	rprintfInit:
   1:rprintf.c     **** /*! \file rprintf.c \brief printf routine and associated routines. */
   2:rprintf.c     **** //*****************************************************************************
   3:rprintf.c     **** //
   4:rprintf.c     **** // File Name	: 'rprintf.c'
   5:rprintf.c     **** // Title		: printf routine and associated routines
   6:rprintf.c     **** // Author		: Pascal Stang - Copyright (C) 2000-2002
   7:rprintf.c     **** // Created		: 2000.12.26
   8:rprintf.c     **** // Revised		: 2003.5.1
   9:rprintf.c     **** // Version		: 1.0
  10:rprintf.c     **** // Target MCU	: Atmel AVR series and other targets
  11:rprintf.c     **** // Editor Tabs	: 4
  12:rprintf.c     **** //
  13:rprintf.c     **** // NOTE: This code is currently below version 1.0, and therefore is considered
  14:rprintf.c     **** // to be lacking in some functionality or documentation, or may not be fully
  15:rprintf.c     **** // tested.  Nonetheless, you can expect most functions to work.
  16:rprintf.c     **** //
  17:rprintf.c     **** // This code is distributed under the GNU Public License
  18:rprintf.c     **** //		which can be found at http://www.gnu.org/licenses/gpl.txt
  19:rprintf.c     **** //
  20:rprintf.c     **** //*****************************************************************************
  21:rprintf.c     **** 
  22:rprintf.c     **** #include <avr/pgmspace.h>
  23:rprintf.c     **** //#include <string-avr.h>
  24:rprintf.c     **** //#include <stdlib.h>
  25:rprintf.c     **** #include <stdarg.h>
  26:rprintf.c     **** #include "global.h"
  27:rprintf.c     **** #include "rprintf.h"
  28:rprintf.c     **** 
  29:rprintf.c     **** #ifndef TRUE
  30:rprintf.c     **** 	#define TRUE	-1
  31:rprintf.c     **** 	#define FALSE	0
  32:rprintf.c     **** #endif
  33:rprintf.c     **** 
  34:rprintf.c     **** #define INF     32766	// maximum field size to print
  35:rprintf.c     **** #define READMEMBYTE(a,char_ptr)	((a)?(pgm_read_byte(char_ptr)):(*char_ptr))
  36:rprintf.c     **** 
  37:rprintf.c     **** #ifdef RPRINTF_COMPLEX
  38:rprintf.c     **** 	static unsigned char buf[128];
  39:rprintf.c     **** #endif
  40:rprintf.c     **** 
  41:rprintf.c     **** // use this to store hex conversion in RAM
  42:rprintf.c     **** //static char HexChars[] = "0123456789ABCDEF";
  43:rprintf.c     **** // use this to store hex conversion in program memory
  44:rprintf.c     **** //static prog_char HexChars[] = "0123456789ABCDEF";
  45:rprintf.c     **** static char __attribute__ ((progmem)) HexChars[] = "0123456789ABCDEF";
  46:rprintf.c     **** 
  47:rprintf.c     **** #define hexchar(x)	pgm_read_byte( HexChars+((x)&0x0f) )
  48:rprintf.c     **** //#define hexchar(x)	((((x)&0x0F)>9)?((x)+'A'-10):((x)+'0'))
  49:rprintf.c     **** 
  50:rprintf.c     **** // function pointer to single character output routine
  51:rprintf.c     **** static void (*rputchar)(unsigned char c);
  52:rprintf.c     **** 
  53:rprintf.c     **** // *** rprintf initialization ***
  54:rprintf.c     **** // you must call this function once and supply the character output
  55:rprintf.c     **** // routine before using other functions in this library
  56:rprintf.c     **** void rprintfInit(void (*putchar_func)(unsigned char c))
  57:rprintf.c     **** {
 120               	B1
 121               	.LM0:
 122               	.LFBB1:
 123 0000 DF93      		push r29
 124 0002 CF93      		push r28
 125 0004 00D0      		rcall .
 126 0006 CDB7      		in r28,__SP_L__
 127 0008 DEB7      		in r29,__SP_H__
 128               	/* prologue: function */
 129               	/* frame size = 2 */
 130 000a 9A83      		std Y+2,r25
 131 000c 8983      		std Y+1,r24
  58:rprintf.c     **** 	rputchar = putchar_func;
 132               	,58,.LM1-.LFBB1
 133               	.LM1:
 134 000e 8981      		ldd r24,Y+1
 135 0010 9A81      		ldd r25,Y+2
 136 0012 9093 0000 		sts (rputchar)+1,r25
 137 0016 8093 0000 		sts rputchar,r24
 138               	/* epilogue start */
  59:rprintf.c     **** }
 139               		68,0,59,.LM2-.LFBB1
 140               	.LM2:
 141 001a 0F90      		pop __tmp_reg__
 142 001c 0F90      		pop __tmp_reg__
 143 001e CF91      		pop r28
 144 0020 DF91      		pop r29
 145 0022 0895      		ret
 147               	.Lscope1:
 150               	.global	rprintfChar
 152               	rprintfChar:
  60:rprintf.c     **** 
  61:rprintf.c     **** // *** rprintfChar ***
  62:rprintf.c     **** // send a character/byte to the current output device
  63:rprintf.c     **** void rprintfChar(unsigned char c)
  64:rprintf.c     **** {
 153               	4,.LM3-.LFBB2
 154               	.LM3:
 155               	.LFBB2:
 156 0024 DF93      		push r29
 157 0026 CF93      		push r28
 158 0028 0F92      		push __tmp_reg__
 159 002a CDB7      		in r28,__SP_L__
 160 002c DEB7      		in r29,__SP_H__
 161               	/* prologue: function */
 162               	/* frame size = 1 */
 163 002e 8983      		std Y+1,r24
  65:rprintf.c     **** 	// do LF -> CR/LF translation
  66:rprintf.c     **** 	if(c == '\n')
 164               	0,66,.LM4-.LFBB2
 165               	.LM4:
 166 0030 8981      		ldd r24,Y+1
 167 0032 8A30      		cpi r24,lo8(10)
 168 0034 01F4      		brne .L4
  67:rprintf.c     **** 		rputchar('\r');
 169               	bn	68,0,67,.LM5-.LFBB2
 170               	.LM5:
 171 0036 E091 0000 		lds r30,rputchar
 172 003a F091 0000 		lds r31,(rputchar)+1
 173 003e 8DE0      		ldi r24,lo8(13)
 174 0040 0995      		icall
 175               	.L4:
  68:rprintf.c     **** 	// send character
  69:rprintf.c     **** 	rputchar(c);
 176               		68,0,69,.LM6-.LFBB2
 177               	.LM6:
 178 0042 E091 0000 		lds r30,rputchar
 179 0046 F091 0000 		lds r31,(rputchar)+1
 180 004a 8981      		ldd r24,Y+1
 181 004c 0995      		icall
 182               	/* epilogue start */
  70:rprintf.c     **** }
 183               		68,0,70,.LM7-.LFBB2
 184               	.LM7:
 185 004e 0F90      		pop __tmp_reg__
 186 0050 CF91      		pop r28
 187 0052 DF91      		pop r29
 188 0054 0895      		ret
 190               	.Lscope2:
 193               	.global	rprintfStr
 195               	rprintfStr:
  71:rprintf.c     **** 
  72:rprintf.c     **** // *** rprintfStr ***
  73:rprintf.c     **** // prints a null-terminated string stored in RAM
  74:rprintf.c     **** void rprintfStr(char str[])
  75:rprintf.c     **** {
 196               	75,.LM8-.LFBB3
 197               	.LM8:
 198               	.LFBB3:
 199 0056 DF93      		push r29
 200 0058 CF93      		push r28
 201 005a 00D0      		rcall .
 202 005c CDB7      		in r28,__SP_L__
 203 005e DEB7      		in r29,__SP_H__
 204               	/* prologue: function */
 205               	/* frame size = 2 */
 206 0060 9A83      		std Y+2,r25
 207 0062 8983      		std Y+1,r24
  76:rprintf.c     **** 	// send a string stored in RAM
  77:rprintf.c     **** 	// check to make sure we have a good pointer
  78:rprintf.c     **** 	if (!str) return;
 208               	,78,.LM9-.LFBB3
 209               	.LM9:
 210 0064 8981      		ldd r24,Y+1
 211 0066 9A81      		ldd r25,Y+2
 212 0068 0097      		sbiw r24,0
 213 006a 01F0      		breq .L10
 214 006c 00C0      		rjmp .L8
 215               	.L9:
  79:rprintf.c     **** 
  80:rprintf.c     **** 	// print the string until a null-terminator
  81:rprintf.c     **** 	while (*str)
  82:rprintf.c     **** 		rprintfChar(*str++);
 216               	68,0,82,.LM10-.LFBB3
 217               	.LM10:
 218 006e E981      		ldd r30,Y+1
 219 0070 FA81      		ldd r31,Y+2
 220 0072 2081      		ld r18,Z
 221 0074 8981      		ldd r24,Y+1
 222 0076 9A81      		ldd r25,Y+2
 223 0078 0196      		adiw r24,1
 224 007a 9A83      		std Y+2,r25
 225 007c 8983      		std Y+1,r24
 226 007e 822F      		mov r24,r18
 227 0080 00D0      		rcall rprintfChar
 228               	.L8:
 230               	.LM11:
 231 0082 E981      		ldd r30,Y+1
 232 0084 FA81      		ldd r31,Y+2
 233 0086 8081      		ld r24,Z
 234 0088 8823      		tst r24
 235 008a 01F4      		brne .L9
 236               	.L10:
 237               	/* epilogue start */
  83:rprintf.c     **** }
 238               	.LFBB3
 239               	.LM12:
 240 008c 0F90      		pop __tmp_reg__
 241 008e 0F90      		pop __tmp_reg__
 242 0090 CF91      		pop r28
 243 0092 DF91      		pop r29
 244 0094 0895      		ret
 246               	.Lscope3:
 251               	.global	rprintfStrLen
 253               	rprintfStrLen:
  84:rprintf.c     **** 
  85:rprintf.c     **** // *** rprintfStrLen ***
  86:rprintf.c     **** // prints a section of a string stored in RAM
  87:rprintf.c     **** // begins printing at position indicated by <start>
  88:rprintf.c     **** // prints number of characters indicated by <len>
  89:rprintf.c     **** void rprintfStrLen(char str[], unsigned int start, unsigned int len)
  90:rprintf.c     **** {
 254               	.LM13-.LFBB4
 255               	.LM13:
 256               	.LFBB4:
 257 0096 DF93      		push r29
 258 0098 CF93      		push r28
 259 009a CDB7      		in r28,__SP_L__
 260 009c DEB7      		in r29,__SP_H__
 261 009e 2A97      		sbiw r28,10
 262 00a0 0FB6      		in __tmp_reg__,__SREG__
 263 00a2 F894      		cli
 264 00a4 DEBF      		out __SP_H__,r29
 265 00a6 0FBE      		out __SREG__,__tmp_reg__
 266 00a8 CDBF      		out __SP_L__,r28
 267               	/* prologue: function */
 268               	/* frame size = 10 */
 269 00aa 9A83      		std Y+2,r25
 270 00ac 8983      		std Y+1,r24
 271 00ae 7C83      		std Y+4,r23
 272 00b0 6B83      		std Y+3,r22
 273 00b2 5E83      		std Y+6,r21
 274 00b4 4D83      		std Y+5,r20
  91:rprintf.c     **** 	register int i=0;
 275               	-.LFBB4
 276               	.LM14:
 277 00b6 1886      		std Y+8,__zero_reg__
 278 00b8 1F82      		std Y+7,__zero_reg__
  92:rprintf.c     **** 
  93:rprintf.c     **** 	// check to make sure we have a good pointer
  94:rprintf.c     **** 	if (!str) return;
 279               	abn	68,0,94,.LM15-.LFBB4
 280               	.LM15:
 281 00ba 8981      		ldd r24,Y+1
 282 00bc 9A81      		ldd r25,Y+2
 283 00be 0097      		sbiw r24,0
 284 00c0 01F4      		brne .+2
 285 00c2 00C0      		rjmp .L21
 286               	.L16:
  95:rprintf.c     **** 	// spin through characters up to requested start
  96:rprintf.c     **** 	// keep going as long as there's no null
  97:rprintf.c     **** 	while((i++<start) && (*str++));
 287               	68,0,97,.LM16-.LFBB4
 288               	.LM16:
 289 00c4 2F81      		ldd r18,Y+7
 290 00c6 3885      		ldd r19,Y+8
 291 00c8 1986      		std Y+9,__zero_reg__
 292 00ca 8B81      		ldd r24,Y+3
 293 00cc 9C81      		ldd r25,Y+4
 294 00ce 2817      		cp r18,r24
 295 00d0 3907      		cpc r19,r25
 296 00d2 00F4      		brsh .L13
 297 00d4 81E0      		ldi r24,lo8(1)
 298 00d6 8987      		std Y+9,r24
 299               	.L13:
 300 00d8 8F81      		ldd r24,Y+7
 301 00da 9885      		ldd r25,Y+8
 302 00dc 0196      		adiw r24,1
 303 00de 9887      		std Y+8,r25
 304 00e0 8F83      		std Y+7,r24
 305 00e2 81E0      		ldi r24,lo8(1)
 306 00e4 9985      		ldd r25,Y+9
 307 00e6 8927      		eor r24,r25
 308 00e8 8823      		tst r24
 309 00ea 01F4      		brne .L14
 310 00ec E981      		ldd r30,Y+1
 311 00ee FA81      		ldd r31,Y+2
 312 00f0 8081      		ld r24,Z
 313 00f2 8A87      		std Y+10,r24
 314 00f4 8A85      		ldd r24,Y+10
 315 00f6 8823      		tst r24
 316 00f8 01F0      		breq .L15
 317 00fa 91E0      		ldi r25,lo8(1)
 318 00fc 9A87      		std Y+10,r25
 319               	.L15:
 320 00fe 8A85      		ldd r24,Y+10
 321 0100 2981      		ldd r18,Y+1
 322 0102 3A81      		ldd r19,Y+2
 323 0104 2F5F      		subi r18,lo8(-(1))
 324 0106 3F4F      		sbci r19,hi8(-(1))
 325 0108 3A83      		std Y+2,r19
 326 010a 2983      		std Y+1,r18
 327 010c 8823      		tst r24
 328 010e 01F4      		brne .L16
 329               	.L14:
  98:rprintf.c     **** //	for(i=0; i<start; i++)
  99:rprintf.c     **** //	{
 100:rprintf.c     **** //		// keep steping through string as long as there's no null
 101:rprintf.c     **** //		if(*str) str++;
 102:rprintf.c     **** //	}
 103:rprintf.c     **** 
 104:rprintf.c     **** 	// then print exactly len characters
 105:rprintf.c     **** 	for(i=0; i<len; i++)
 330               	+8,__zero_reg__
 331               		std Y+7,__zero_reg__
 332 0110 1886      		rjmp .L17
 333 0112 1F82      	.L20:
 335               	.LM18:
 106:rprintf.c     **** 	{
 107:rprintf.c     **** 		// print data out of the string as long as we haven't reached a null yet
 108:rprintf.c     **** 		// at the null, start printing spaces
 109:rprintf.c     **** 		if(*str)
 336               	30,Y+1
 337               		ldd r31,Y+2
 338 0116 E981      		ld r24,Z
 339 0118 FA81      		tst r24
 340 011a 8081      		breq .L18
 342 011e 01F0      	.LM19:
 110:rprintf.c     **** 			rprintfChar(*str++);
 343               	0,Y+1
 344               		ldd r31,Y+2
 345 0120 E981      		ld r18,Z
 346 0122 FA81      		ldd r24,Y+1
 347 0124 2081      		ldd r25,Y+2
 348 0126 8981      		adiw r24,1
 349 0128 9A81      		std Y+2,r25
 350 012a 0196      		std Y+1,r24
 351 012c 9A83      		mov r24,r18
 352 012e 8983      		rcall rprintfChar
 353 0130 822F      		rjmp .L19
 354 0132 00D0      	.L18:
 356               	.LM20:
 111:rprintf.c     **** 		else
 112:rprintf.c     **** 			rprintfChar(' ');
 357               	2)
 358               		rcall rprintfChar
 359 0136 80E2      	.L19:
 361               	.LM21:
 362               		ldd r24,Y+7
 363               		ldd r25,Y+8
 364 013a 8F81      		adiw r24,1
 365 013c 9885      		std Y+8,r25
 366 013e 0196      		std Y+7,r24
 367 0140 9887      	.L17:
 368 0142 8F83      		ldd r18,Y+7
 369               		ldd r19,Y+8
 370 0144 2F81      		ldd r24,Y+5
 371 0146 3885      		ldd r25,Y+6
 372 0148 8D81      		cp r18,r24
 373 014a 9E81      		cpc r19,r25
 374 014c 2817      		brlo .L20
 375 014e 3907      	.L21:
 376 0150 00F0      	/* epilogue start */
 378               	.LM22:
 113:rprintf.c     **** 	}
 114:rprintf.c     **** 
 115:rprintf.c     **** }
 379               	_reg__,__SREG__
 380               		cli
 381 0152 2A96      		out __SP_H__,r29
 382 0154 0FB6      		out __SREG__,__tmp_reg__
 383 0156 F894      		out __SP_L__,r28
 384 0158 DEBF      		pop r28
 385 015a 0FBE      		pop r29
 386 015c CDBF      		ret
 391               	.Lscope4:
 394               	.global	rprintfProgStr
 396               	rprintfProgStr:
 398               	.LM23:
 399               	.LFBB5:
 116:rprintf.c     **** 
 117:rprintf.c     **** // *** rprintfProgStr ***
 118:rprintf.c     **** // prints a null-terminated string stored in program ROM
 119:rprintf.c     **** void rprintfProgStr(const prog_char str[])
 120:rprintf.c     **** {
 400               	rcall .
 401               		rcall .
 402               		rcall .
 403 0164 DF93      		in r28,__SP_L__
 404 0166 CF93      		in r29,__SP_H__
 405 0168 00D0      	/* prologue: function */
 406 016a 00D0      	/* frame size = 6 */
 407 016c 00D0      		std Y+5,r25
 408 016e CDB7      		std Y+4,r24
 410               	.LM24:
 411               		ldd r24,Y+4
 412 0172 9D83      		ldd r25,Y+5
 413 0174 8C83      		sbiw r24,0
 121:rprintf.c     **** 	// print a string stored in program memory
 122:rprintf.c     **** 	register char c;
 123:rprintf.c     **** 
 124:rprintf.c     **** 	// check to make sure we have a good pointer
 125:rprintf.c     **** 	if (!str) return;
 414               	mp .L24
 415               	.L25:
 417 0178 9D81      	.LM25:
 418 017a 0097      		ldd r24,Y+6
 419 017c 01F0      		rcall rprintfChar
 420 017e 00C0      	.L24:
 421               	.LBB2:
 126:rprintf.c     **** 	
 127:rprintf.c     **** 	// print the string until the null-terminator
 128:rprintf.c     **** 	while((c = pgm_read_byte(str++)))
 129:rprintf.c     **** 		rprintfChar(c);
 422               	68,0,128,.LM26-.LFBB5
 423               	.LM26:
 424 0180 8E81      		ldd r24,Y+4
 425 0182 00D0      		ldd r25,Y+5
 426               		std Y+3,r25
 427               		std Y+2,r24
 428               		ldd r24,Y+4
 429               		ldd r25,Y+5
 430 0184 8C81      		adiw r24,1
 431 0186 9D81      		std Y+5,r25
 432 0188 9B83      		std Y+4,r24
 433 018a 8A83      		ldd r30,Y+2
 434 018c 8C81      		ldd r31,Y+3
 435 018e 9D81      	/* #APP */
 436 0190 0196      	 ;  128 "rprintf.c" 1
 437 0192 9D83      		lpm r24, Z
 438 0194 8C83      		
 439 0196 EA81      	 ;  0 "" 2
 440 0198 FB81      	/* #NOAPP */
 441               		std Y+1,r24
 442               		ldd r24,Y+1
 443 019a 8491      	.LBE2:
 444               		std Y+6,r24
 445               		ldd r24,Y+6
 446               		tst r24
 447 019c 8983      		brne .L25
 448 019e 8981      	.L26:
 449               	/* epilogue start */
 451 01a2 8E81      	.LM27:
 452 01a4 8823      		adiw r28,6
 453 01a6 01F4      		in __tmp_reg__,__SREG__
 454               		cli
 455               		out __SP_H__,r29
 130:rprintf.c     **** }
 456               	P_L__,r28
 457               		pop r28
 458 01a8 2696      		pop r29
 459 01aa 0FB6      		ret
 468               	.Lscope5:
 470               	.global	rprintfCRLF
 472               	rprintfCRLF:
 474               	.LM28:
 475               	.LFBB6:
 476               		push r29
 477               		push r28
 478               		in r28,__SP_L__
 479               		in r29,__SP_H__
 131:rprintf.c     **** 
 132:rprintf.c     **** // *** rprintfCRLF ***
 133:rprintf.c     **** // prints carriage return and line feed
 134:rprintf.c     **** void rprintfCRLF(void)
 135:rprintf.c     **** {
 480               	
 481               	/* frame size = 0 */
 483 01ba DF93      	.LM29:
 484 01bc CF93      		ldi r24,lo8(10)
 485 01be CDB7      		rcall rprintfChar
 486 01c0 DEB7      	/* epilogue start */
 488               	.LM30:
 136:rprintf.c     **** 	// print CR/LF
 137:rprintf.c     **** 	//rprintfChar('\r');
 138:rprintf.c     **** 	// LF -> CR/LF translation built-in to rprintfChar()
 139:rprintf.c     **** 	rprintfChar('\n');
 489               	
 490               		pop r29
 491 01c2 8AE0      		ret
 493               	.Lscope6:
 140:rprintf.c     **** }
 494               	abs	"rprintfu04:F(0,15)",36,0,0,rprintfu04
 496 01c6 CF91      	.global	rprintfu04
 498 01ca 0895      	rprintfu04:
 500               	.LM31:
 501               	.LFBB7:
 502               		push r29
 503               		push r28
 504               		rcall .
 505               		rcall .
 141:rprintf.c     **** 
 142:rprintf.c     **** // *** rprintfu04 ***
 143:rprintf.c     **** // prints an unsigned 4-bit number in hex (1 digit)
 144:rprintf.c     **** void rprintfu04(unsigned char data)
 145:rprintf.c     **** {
 506               	_L__
 507               		in r29,__SP_H__
 508               	/* prologue: function */
 509 01cc DF93      	/* frame size = 4 */
 510 01ce CF93      		std Y+4,r24
 511 01d0 00D0      	.LBB3:
 513 01d4 CDB7      	.LM32:
 514 01d6 DEB7      		ldd r24,Y+4
 515               		mov r24,r24
 516               		ldi r25,lo8(0)
 517 01d8 8C83      		andi r24,lo8(15)
 518               		andi r25,hi8(15)
 146:rprintf.c     **** 	// print 4-bit hex value
 147:rprintf.c     **** //	char Character = data&0x0f;
 148:rprintf.c     **** //	if (Character>9)
 149:rprintf.c     **** //		Character+='A'-10;
 150:rprintf.c     **** //	else
 151:rprintf.c     **** //		Character+='0';
 152:rprintf.c     **** 	rprintfChar(hexchar(data));
 519               	(-(HexChars))
 520               		sbci r25,hi8(-(HexChars))
 521 01da 8C81      		std Y+3,r25
 522 01dc 882F      		std Y+2,r24
 523 01de 90E0      		ldd r30,Y+2
 524 01e0 8F70      		ldd r31,Y+3
 525 01e2 9070      	/* #APP */
 526 01e4 8050      	 ;  152 "rprintf.c" 1
 527 01e6 9040      		lpm r24, Z
 528 01e8 9B83      		
 529 01ea 8A83      	 ;  0 "" 2
 530 01ec EA81      	/* #NOAPP */
 531 01ee FB81      		std Y+1,r24
 532               		ldd r24,Y+1
 533               	.LBE3:
 534 01f0 8491      		rcall rprintfChar
 535               	/* epilogue start */
 537               	.LM33:
 538 01f2 8983      		pop __tmp_reg__
 539 01f4 8981      		pop __tmp_reg__
 540               		pop __tmp_reg__
 541 01f6 00D0      		pop __tmp_reg__
 542               		pop r28
 153:rprintf.c     **** }
 543               	intfu04, .-rprintfu04
 548 01fe 0F90      	.Lscope7:
 551 0204 0895      	.global	rprintfu08
 553               	rprintfu08:
 555               	.LM34:
 556               	.LFBB8:
 557               		push r29
 558               		push r28
 559               		push __tmp_reg__
 560               		in r28,__SP_L__
 561               		in r29,__SP_H__
 562               	/* prologue: function */
 154:rprintf.c     **** 
 155:rprintf.c     **** // *** rprintfu08 ***
 156:rprintf.c     **** // prints an unsigned 8-bit number in hex (2 digits)
 157:rprintf.c     **** void rprintfu08(unsigned char data)
 158:rprintf.c     **** {
 563               	
 564               		std Y+1,r24
 566 0206 DF93      	.LM35:
 567 0208 CF93      		ldd r24,Y+1
 568 020a 0F92      		swap r24
 569 020c CDB7      		andi r24,lo8(15)
 570 020e DEB7      		rcall rprintfu04
 572               	.LM36:
 573 0210 8983      		ldd r24,Y+1
 159:rprintf.c     **** 	// print 8-bit hex value
 160:rprintf.c     **** 	rprintfu04(data>>4);
 574               	intfu04
 575               	/* epilogue start */
 577 0214 8295      	.LM37:
 578 0216 8F70      		pop __tmp_reg__
 579 0218 00D0      		pop r28
 161:rprintf.c     **** 	rprintfu04(data);
 580               	29
 581               		ret
 583 021c 00D0      	.Lscope8:
 162:rprintf.c     **** }
 585               	bs	"data:p(0,9)",160,0,0,1
 586               	.global	rprintfu16
 588 0220 CF91      	rprintfu16:
 590 0224 0895      	.LM38:
 591               	.LFBB9:
 592               		push r29
 593               		push r28
 594               		rcall .
 595               		in r28,__SP_L__
 596               		in r29,__SP_H__
 597               	/* prologue: function */
 163:rprintf.c     **** 
 164:rprintf.c     **** // *** rprintfu16 ***
 165:rprintf.c     **** // prints an unsigned 16-bit number in hex (4 digits)
 166:rprintf.c     **** void rprintfu16(unsigned short data)
 167:rprintf.c     **** {
 598               	 = 2 */
 599               		std Y+2,r25
 600               		std Y+1,r24
 602 0228 CF93      	.LM39:
 603 022a 00D0      		ldd r24,Y+1
 604 022c CDB7      		ldd r25,Y+2
 605 022e DEB7      		mov r24,r25
 606               		clr r25
 607               		rcall rprintfu08
 609 0232 8983      	.LM40:
 168:rprintf.c     **** 	// print 16-bit hex value
 169:rprintf.c     **** 	rprintfu08(data>>8);
 610               	
 611               		rcall rprintfu08
 612 0234 8981      	/* epilogue start */
 614 0238 892F      	.LM41:
 615 023a 9927      		pop __tmp_reg__
 616 023c 00D0      		pop __tmp_reg__
 170:rprintf.c     **** 	rprintfu08(data);
 617               	28
 618               		pop r29
 619 023e 8981      		ret
 621               	.Lscope9:
 171:rprintf.c     **** }
 622               	bs	"rprintfu32:F(0,15)",36,0,0,rprintfu32
 624 0242 0F90      	.global	rprintfu32
 626 0246 CF91      	rprintfu32:
 628 024a 0895      	.LM42:
 629               	.LFBB10:
 630               		push r29
 631               		push r28
 632               		rcall .
 633               		rcall .
 634               		in r28,__SP_L__
 635               		in r29,__SP_H__
 172:rprintf.c     **** 
 173:rprintf.c     **** // *** rprintfu32 ***
 174:rprintf.c     **** // prints an unsigned 32-bit number in hex (8 digits)
 175:rprintf.c     **** void rprintfu32(unsigned long data)
 176:rprintf.c     **** {
 636               	unction */
 637               	/* frame size = 4 */
 638               		std Y+1,r22
 639 024c DF93      		std Y+2,r23
 640 024e CF93      		std Y+3,r24
 641 0250 00D0      		std Y+4,r25
 643 0254 CDB7      	.LM43:
 644 0256 DEB7      		ldd r24,Y+1
 645               		ldd r25,Y+2
 646               		ldd r26,Y+3
 647 0258 6983      		ldd r27,Y+4
 648 025a 7A83      		movw r24,r26
 649 025c 8B83      		clr r26
 650 025e 9C83      		clr r27
 177:rprintf.c     **** 	// print 32-bit hex value
 178:rprintf.c     **** 	rprintfu16(data>>16);
 651               	16
 653 0260 8981      	.LM44:
 654 0262 9A81      		ldd r24,Y+1
 655 0264 AB81      		ldd r25,Y+2
 656 0266 BC81      		rcall rprintfu16
 657 0268 CD01      	/* epilogue start */
 659 026c BB27      	.LM45:
 660 026e 00D0      		pop __tmp_reg__
 179:rprintf.c     **** 	rprintfu16(data);
 661               	_reg__
 662               		pop __tmp_reg__
 663 0270 8981      		pop __tmp_reg__
 664 0272 9A81      		pop r28
 665 0274 00D0      		pop r29
 666               		ret
 180:rprintf.c     **** }
 667               		rprintfu32, .-rprintfu32
 668               	.Lscope10:
 675 0282 0895      	.global	rprintfNum
 677               	rprintfNum:
 679               	.LM46:
 680               	.LFBB11:
 681               		push r14
 682               		push r15
 683               		push r16
 684               		push r17
 685               		push r29
 686               		push r28
 181:rprintf.c     **** 
 182:rprintf.c     **** // *** rprintfNum ***
 183:rprintf.c     **** // special printf for numbers only
 184:rprintf.c     **** // see formatting information below
 185:rprintf.c     **** //	Print the number "n" in the given "base"
 186:rprintf.c     **** //	using exactly "numDigits"
 187:rprintf.c     **** //	print +/- if signed flag "isSigned" is TRUE
 188:rprintf.c     **** //	use the character specified in "padchar" to pad extra characters
 189:rprintf.c     **** //
 190:rprintf.c     **** //	Examples:
 191:rprintf.c     **** //	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
 192:rprintf.c     **** //	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
 193:rprintf.c     **** //	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
 194:rprintf.c     **** void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
 195:rprintf.c     **** {
 687               	 r29,__SP_H__
 688               		sbiw r28,56
 689               		in __tmp_reg__,__SREG__
 690 0284 EF92      		cli
 691 0286 FF92      		out __SP_H__,r29
 692 0288 0F93      		out __SREG__,__tmp_reg__
 693 028a 1F93      		out __SP_L__,r28
 694 028c DF93      	/* prologue: function */
 695 028e CF93      	/* frame size = 56 */
 696 0290 CDB7      		std Y+46,r24
 697 0292 DEB7      		std Y+47,r22
 698 0294 E897      		std Y+48,r20
 699 0296 0FB6      		std Y+49,r18
 700 0298 F894      		std Y+50,r14
 701 029a DEBF      		std Y+51,r15
 702 029c 0FBE      		std Y+52,r16
 703 029e CDBF      		std Y+53,r17
 705               	.LM47:
 706 02a0 8EA7      		ldd r24,Y+48
 707 02a2 6FA7      		tst r24
 708 02a4 48AB      		breq .L38
 709 02a6 29AB      		ldd r24,Y+50
 710 02a8 EAAA      		ldd r25,Y+51
 711 02aa FBAA      		ldd r26,Y+52
 712 02ac 0CAB      		ldd r27,Y+53
 713 02ae 1DAB      		tst r27
 196:rprintf.c     **** 	// define a global HexChars or use line below
 197:rprintf.c     **** 	//static char HexChars[16] = "0123456789ABCDEF";
 198:rprintf.c     **** 	char *p, buf[32];
 199:rprintf.c     **** 	unsigned long x;
 200:rprintf.c     **** 	unsigned char count;
 201:rprintf.c     **** 
 202:rprintf.c     **** 	// prepare negative number
 203:rprintf.c     **** 	if( isSigned && (n < 0) )
 714               	,.LM48-.LFBB11
 715               	.LM48:
 716 02b0 88A9      		ldd r24,Y+50
 717 02b2 8823      		ldd r25,Y+51
 718 02b4 01F0      		ldd r26,Y+52
 719 02b6 8AA9      		ldd r27,Y+53
 720 02b8 9BA9      		com r27
 721 02ba ACA9      		com r26
 722 02bc BDA9      		com r25
 723 02be BB23      		neg r24
 724 02c0 04F4      		sbci r25,lo8(-1)
 204:rprintf.c     **** 	{
 205:rprintf.c     **** 		x = -n;
 725               	o8(-1)
 726               		sbci r27,lo8(-1)
 727 02c2 8AA9      		std Y+8,r24
 728 02c4 9BA9      		std Y+9,r25
 729 02c6 ACA9      		std Y+10,r26
 730 02c8 BDA9      		std Y+11,r27
 731 02ca B095      		rjmp .L39
 732 02cc A095      	.L38:
 734 02d0 8195      	.LM49:
 735 02d2 9F4F      		ldd r24,Y+50
 736 02d4 AF4F      		ldd r25,Y+51
 737 02d6 BF4F      		ldd r26,Y+52
 738 02d8 8887      		ldd r27,Y+53
 739 02da 9987      		std Y+8,r24
 740 02dc AA87      		std Y+9,r25
 741 02de BB87      		std Y+10,r26
 742 02e0 00C0      		std Y+11,r27
 743               	.L39:
 206:rprintf.c     **** 	}
 207:rprintf.c     **** 	else
 208:rprintf.c     **** 	{
 209:rprintf.c     **** 	 	x = n;
 744               	M50-.LFBB11
 745               	.LM50:
 746 02e2 8AA9      		ldd r24,Y+48
 747 02e4 9BA9      		std Y+54,r24
 748 02e6 ACA9      		ldd r24,Y+54
 749 02e8 BDA9      		tst r24
 750 02ea 8887      		breq .L40
 751 02ec 9987      		ldi r24,lo8(1)
 752 02ee AA87      		std Y+54,r24
 753 02f0 BB87      	.L40:
 754               		ldd r25,Y+54
 210:rprintf.c     **** 	}
 211:rprintf.c     **** 
 212:rprintf.c     **** 	// setup little string buffer
 213:rprintf.c     **** 	count = (numDigits-1)-(isSigned?1:0);
 755               	47
 756               		sub r24,r25
 757 02f2 88A9      		subi r24,lo8(-(-1))
 758 02f4 8EAB      		std Y+7,r24
 760 02f8 8823      	.LM51:
 761 02fa 01F0      		movw r24,r28
 762 02fc 81E0      		adiw r24,14
 763 02fe 8EAB      		adiw r24,32
 764               		std Y+13,r25
 765 0300 9EA9      		std Y+12,r24
 767 0304 891B      	.LM52:
 768 0306 8150      		ldd r24,Y+12
 769 0308 8F83      		ldd r25,Y+13
 214:rprintf.c     ****   	p = buf + sizeof (buf);
 770               	d Y+13,r25
 771               		std Y+12,r24
 772 030a CE01      		ldd r30,Y+12
 773 030c 0E96      		ldd r31,Y+13
 774 030e 8096      		st Z,__zero_reg__
 776 0312 8C87      	.LM53:
 215:rprintf.c     ****   	*--p = '\0';
 777               	4,Y+12
 778               		ldd r25,Y+13
 779 0314 8C85      		sbiw r24,1
 780 0316 9D85      		std Y+13,r25
 781 0318 0197      		std Y+12,r24
 782 031a 9D87      	.LBB4:
 783 031c 8C87      		ldd r24,Y+46
 784 031e EC85      		mov r18,r24
 785 0320 FD85      		ldi r19,lo8(0)
 786 0322 1082      		ldi r20,lo8(0)
 216:rprintf.c     **** 	
 217:rprintf.c     **** 	// force calculation of first digit
 218:rprintf.c     **** 	// (to prevent zero from not printing at all!!!)
 219:rprintf.c     **** 	*--p = hexchar(x%base); x /= base;
 787               	i8(0)
 788               		ldd r24,Y+8
 789 0324 8C85      		ldd r25,Y+9
 790 0326 9D85      		ldd r26,Y+10
 791 0328 0197      		ldd r27,Y+11
 792 032a 9D87      		movw r22,r24
 793 032c 8C87      		movw r24,r26
 794               		rcall __udivmodsi4
 795 032e 8EA5      		movw r26,r24
 796 0330 282F      		movw r24,r22
 797 0332 30E0      		andi r24,lo8(15)
 798 0334 40E0      		andi r25,hi8(15)
 799 0336 50E0      		subi r24,lo8(-(HexChars))
 800 0338 8885      		sbci r25,hi8(-(HexChars))
 801 033a 9985      		std Y+6,r25
 802 033c AA85      		std Y+5,r24
 803 033e BB85      		ldd r30,Y+5
 804 0340 BC01      		ldd r31,Y+6
 805 0342 CD01      	/* #APP */
 806 0344 00D0      	 ;  219 "rprintf.c" 1
 807 0346 DC01      		lpm r24, Z
 808 0348 CB01      		
 809 034a 8F70      	 ;  0 "" 2
 810 034c 9070      	/* #NOAPP */
 811 034e 8050      		std Y+4,r24
 812 0350 9040      		ldd r24,Y+4
 813 0352 9E83      	.LBE4:
 814 0354 8D83      		ldd r30,Y+12
 815 0356 ED81      		ldd r31,Y+13
 816 0358 FE81      		st Z,r24
 817               		ldd r24,Y+46
 818               		mov r18,r24
 819 035a 8491      		ldi r19,lo8(0)
 820               		ldi r20,lo8(0)
 821               		ldi r21,hi8(0)
 822               		ldd r24,Y+8
 823 035c 8C83      		ldd r25,Y+9
 824 035e 8C81      		ldd r26,Y+10
 825               		ldd r27,Y+11
 826 0360 EC85      		movw r22,r24
 827 0362 FD85      		movw r24,r26
 828 0364 8083      		rcall __udivmodsi4
 829 0366 8EA5      		movw r26,r20
 830 0368 282F      		movw r24,r18
 831 036a 30E0      		std Y+8,r24
 832 036c 40E0      		std Y+9,r25
 833 036e 50E0      		std Y+10,r26
 834 0370 8885      		std Y+11,r27
 835 0372 9985      		rjmp .L41
 836 0374 AA85      	.L44:
 838 0378 BC01      	.LM54:
 839 037a CD01      		ldd r24,Y+8
 840 037c 00D0      		ldd r25,Y+9
 841 037e DA01      		ldd r26,Y+10
 842 0380 C901      		ldd r27,Y+11
 843 0382 8887      		sbiw r24,0
 844 0384 9987      		cpc r26,__zero_reg__
 845 0386 AA87      		cpc r27,__zero_reg__
 846 0388 BB87      		breq .L42
 848               	.LM55:
 220:rprintf.c     **** 	// calculate remaining digits
 221:rprintf.c     **** 	while(count--)
 222:rprintf.c     **** 	{
 223:rprintf.c     **** 		if(x != 0)
 849               	2,r24
 850               	.LBB5:
 851 038c 8885      		ldd r24,Y+46
 852 038e 9985      		mov r18,r24
 853 0390 AA85      		ldi r19,lo8(0)
 854 0392 BB85      		ldi r20,lo8(0)
 855 0394 0097      		ldi r21,hi8(0)
 856 0396 A105      		ldd r24,Y+8
 857 0398 B105      		ldd r25,Y+9
 858 039a 01F0      		ldd r26,Y+10
 224:rprintf.c     **** 		{
 225:rprintf.c     **** 			// calculate next digit
 226:rprintf.c     **** 			*--p = hexchar(x%base); x /= base;
 859               	+11
 860               		movw r22,r24
 861 039c 8C85      		movw r24,r26
 862 039e 9D85      		rcall __udivmodsi4
 863 03a0 0197      		movw r26,r24
 864 03a2 9D87      		movw r24,r22
 865 03a4 8C87      		andi r24,lo8(15)
 866               		andi r25,hi8(15)
 867 03a6 8EA5      		subi r24,lo8(-(HexChars))
 868 03a8 282F      		sbci r25,hi8(-(HexChars))
 869 03aa 30E0      		std Y+3,r25
 870 03ac 40E0      		std Y+2,r24
 871 03ae 50E0      		ldd r30,Y+2
 872 03b0 8885      		ldd r31,Y+3
 873 03b2 9985      	/* #APP */
 874 03b4 AA85      	 ;  226 "rprintf.c" 1
 875 03b6 BB85      		lpm r24, Z
 876 03b8 BC01      		
 877 03ba CD01      	 ;  0 "" 2
 878 03bc 00D0      	/* #NOAPP */
 879 03be DC01      		std Y+1,r24
 880 03c0 CB01      		ldd r24,Y+1
 881 03c2 8F70      	.LBE5:
 882 03c4 9070      		ldd r30,Y+12
 883 03c6 8050      		ldd r31,Y+13
 884 03c8 9040      		st Z,r24
 885 03ca 9B83      		ldd r24,Y+46
 886 03cc 8A83      		mov r18,r24
 887 03ce EA81      		ldi r19,lo8(0)
 888 03d0 FB81      		ldi r20,lo8(0)
 889               		ldi r21,hi8(0)
 890               		ldd r24,Y+8
 891 03d2 8491      		ldd r25,Y+9
 892               		ldd r26,Y+10
 893               		ldd r27,Y+11
 894               		movw r22,r24
 895 03d4 8983      		movw r24,r26
 896 03d6 8981      		rcall __udivmodsi4
 897               		movw r26,r20
 898 03d8 EC85      		movw r24,r18
 899 03da FD85      		std Y+8,r24
 900 03dc 8083      		std Y+9,r25
 901 03de 8EA5      		std Y+10,r26
 902 03e0 282F      		std Y+11,r27
 903 03e2 30E0      		rjmp .L41
 904 03e4 40E0      	.L42:
 906 03e8 8885      	.LM56:
 907 03ea 9985      		ldd r24,Y+12
 908 03ec AA85      		ldd r25,Y+13
 909 03ee BB85      		sbiw r24,1
 910 03f0 BC01      		std Y+13,r25
 911 03f2 CD01      		std Y+12,r24
 912 03f4 00D0      		ldd r30,Y+12
 913 03f6 DA01      		ldd r31,Y+13
 914 03f8 C901      		ldd r24,Y+49
 915 03fa 8887      		st Z,r24
 916 03fc 9987      	.L41:
 918 0400 BB87      	.LM57:
 919 0402 00C0      		ldd r24,Y+7
 920               		std Y+55,r24
 227:rprintf.c     **** 		}
 228:rprintf.c     **** 		else
 229:rprintf.c     **** 		{
 230:rprintf.c     **** 			// no more digits left, pad out to desired length
 231:rprintf.c     **** 			*--p = padchar;
 921               	4
 922               	.L43:
 923 0404 8C85      		ldd r24,Y+55
 924 0406 9D85      		ldd r25,Y+7
 925 0408 0197      		subi r25,lo8(-(-1))
 926 040a 9D87      		std Y+7,r25
 927 040c 8C87      		tst r24
 928 040e EC85      		breq .+2
 929 0410 FD85      		rjmp .L44
 931 0414 8083      	.LM58:
 932               		ldd r24,Y+48
 933               		tst r24
 934               		breq .L45
 936 0418 8FAB      	.LM59:
 937 041a 8FA9      		ldd r24,Y+50
 938 041c 8823      		ldd r25,Y+51
 939 041e 01F0      		ldd r26,Y+52
 940 0420 81E0      		ldd r27,Y+53
 941 0422 8FAB      		tst r27
 942               		brge .L46
 944 0426 9F81      	.LM60:
 945 0428 9150      		ldd r24,Y+12
 946 042a 9F83      		ldd r25,Y+13
 947 042c 8823      		sbiw r24,1
 948 042e 01F0      		std Y+13,r25
 949 0430 00C0      		std Y+12,r24
 232:rprintf.c     **** 		}
 233:rprintf.c     **** 	}
 234:rprintf.c     **** 
 235:rprintf.c     **** 	// apply signed notation if requested
 236:rprintf.c     **** 	if( isSigned )
 950               	ldi r24,lo8(45)
 951               		st Z,r24
 952 0432 88A9      		rjmp .L45
 953 0434 8823      	.L46:
 237:rprintf.c     **** 	{
 238:rprintf.c     **** 		if(n < 0)
 955               	:
 956               		ldd r24,Y+50
 957 0438 8AA9      		ldd r25,Y+51
 958 043a 9BA9      		ldd r26,Y+52
 959 043c ACA9      		ldd r27,Y+53
 960 043e BDA9      		cp __zero_reg__,r24
 961 0440 BB23      		cpc __zero_reg__,r25
 962 0442 04F4      		cpc __zero_reg__,r26
 239:rprintf.c     **** 		{
 240:rprintf.c     ****    			*--p = '-';
 963               	ero_reg__,r27
 964               		brge .L47
 966 0446 9D85      	.LM62:
 967 0448 0197      		ldd r24,Y+12
 968 044a 9D87      		ldd r25,Y+13
 969 044c 8C87      		sbiw r24,1
 970 044e EC85      		std Y+13,r25
 971 0450 FD85      		std Y+12,r24
 972 0452 8DE2      		ldd r30,Y+12
 973 0454 8083      		ldd r31,Y+13
 974 0456 00C0      		ldi r24,lo8(43)
 975               		st Z,r24
 241:rprintf.c     **** 		}
 242:rprintf.c     **** 		else if(n > 0)
 976               	47:
 978 0458 8AA9      	.LM63:
 979 045a 9BA9      		ldd r24,Y+12
 980 045c ACA9      		ldd r25,Y+13
 981 045e BDA9      		sbiw r24,1
 982 0460 1816      		std Y+13,r25
 983 0462 1906      		std Y+12,r24
 984 0464 1A06      		ldd r30,Y+12
 985 0466 1B06      		ldd r31,Y+13
 986 0468 04F4      		ldi r24,lo8(32)
 243:rprintf.c     **** 		{
 244:rprintf.c     **** 	   		*--p = '+';
 987               	L45:
 989 046a 8C85      	.LM64:
 990 046c 9D85      		ldd r24,Y+47
 991 046e 0197      		std Y+7,r24
 992 0470 9D87      		rjmp .L48
 993 0472 8C87      	.L50:
 995 0476 FD85      	.LM65:
 996 0478 8BE2      		ldd r30,Y+12
 997 047a 8083      		ldd r31,Y+13
 998 047c 00C0      		ld r18,Z
 999               		ldd r24,Y+12
 245:rprintf.c     **** 		}
 246:rprintf.c     **** 		else
 247:rprintf.c     **** 		{
 248:rprintf.c     **** 	   		*--p = ' ';
 1000               	
 1001               		adiw r24,1
 1002 047e 8C85      		std Y+13,r25
 1003 0480 9D85      		std Y+12,r24
 1004 0482 0197      		mov r24,r18
 1005 0484 9D87      		rcall rprintfChar
 1006 0486 8C87      	.L48:
 1008 048a FD85      	.LM66:
 1009 048c 80E2      		ldd r24,Y+7
 1010 048e 8083      		std Y+56,r24
 1011               		ldd r24,Y+56
 249:rprintf.c     **** 		}
 250:rprintf.c     **** 	}
 251:rprintf.c     **** 
 252:rprintf.c     **** 	// print the string right-justified
 253:rprintf.c     **** 	count = numDigits;
 1012               	req .L49
 1013               		ldi r24,lo8(1)
 1014 0490 8FA5      		std Y+56,r24
 1015 0492 8F83      	.L49:
 1016 0494 00C0      		ldd r24,Y+56
 1017               		ldd r25,Y+7
 254:rprintf.c     **** 	while(count--)
 255:rprintf.c     **** 	{
 256:rprintf.c     **** 		rprintfChar(*p++);
 1018               	r25,lo8(-(-1))
 1019               		std Y+7,r25
 1020 0496 EC85      		tst r24
 1021 0498 FD85      		brne .L50
 1022 049a 2081      	/* epilogue start */
 1024 049e 9D85      	.LM67:
 1025 04a0 0196      		adiw r28,56
 1026 04a2 9D87      		in __tmp_reg__,__SREG__
 1027 04a4 8C87      		cli
 1028 04a6 822F      		out __SP_H__,r29
 1029 04a8 00D0      		out __SREG__,__tmp_reg__
 1030               		out __SP_L__,r28
 1031               		pop r28
 1032               		pop r29
 1033 04aa 8F81      		pop r17
 1034 04ac 88AF      		pop r16
 1035 04ae 88AD      		pop r15
 1036 04b0 8823      		pop r14
 1037 04b2 01F0      		ret
 257:rprintf.c     **** 	}
 258:rprintf.c     **** }
 1048               	,0,2
 1053 04ca DEBF      	.Lscope11:
 1057 04d2 DF91      	.global	rprintf1RamRom
 1059 04d6 0F91      	rprintf1RamRom:
 1061 04da EF90      	.LM68:
 1062 04dc 0895      	.LFBB12:
 1063               		push r29
 1064               		push r28
 1065               		in r28,__SP_L__
 1066               		in r29,__SP_H__
 1067               		sbiw r28,19
 1068               		in __tmp_reg__,__SREG__
 1069               		cli
 1070               		out __SP_H__,r29
 1071               		out __SREG__,__tmp_reg__
 1072               		out __SP_L__,r28
 1073               	/* prologue: function */
 1074               	/* frame size = 19 */
 1076               	.LM69:
 1077               		movw r24,r28
 1078               		adiw r24,27
 1079               		std Y+15,r25
 1080               		std Y+14,r24
 1081               		rjmp .L53
 1082               	.L57:
 1084               	.LM70:
 259:rprintf.c     **** 
 260:rprintf.c     **** #ifdef RPRINTF_FLOAT
 261:rprintf.c     **** // *** rprintfFloat ***
 262:rprintf.c     **** // floating-point print
 263:rprintf.c     **** void rprintfFloat(char numDigits, double x)
 264:rprintf.c     **** {
 265:rprintf.c     **** 	unsigned char firstplace = FALSE;
 266:rprintf.c     **** 	unsigned char negative;
 267:rprintf.c     **** 	unsigned char i, digit;
 268:rprintf.c     **** 	double place = 1.0;
 269:rprintf.c     **** 	
 270:rprintf.c     **** 	// save sign
 271:rprintf.c     **** 	negative = (x<0);
 272:rprintf.c     **** 	// convert to absolute value
 273:rprintf.c     **** 	x = (x>0)?(x):(-x);
 274:rprintf.c     **** 	
 275:rprintf.c     **** 	// find starting digit place
 276:rprintf.c     **** 	for(i=0; i<15; i++)
 277:rprintf.c     **** 	{
 278:rprintf.c     **** 		if((x/place) < 10.0)
 279:rprintf.c     **** 			break;
 280:rprintf.c     **** 		else
 281:rprintf.c     **** 			place *= 10.0;
 282:rprintf.c     **** 	}
 283:rprintf.c     **** 	// print polarity character
 284:rprintf.c     **** 	if(negative)
 285:rprintf.c     **** 		rprintfChar('-');
 286:rprintf.c     **** 	else
 287:rprintf.c     **** 		rprintfChar('+');
 288:rprintf.c     **** 
 289:rprintf.c     **** 	// print digits
 290:rprintf.c     **** 	for(i=0; i<numDigits; i++)
 291:rprintf.c     **** 	{
 292:rprintf.c     **** 		digit = (x/place);
 293:rprintf.c     **** 
 294:rprintf.c     **** 		if(digit | firstplace | (place == 1.0))
 295:rprintf.c     **** 		{
 296:rprintf.c     **** 			firstplace = TRUE;
 297:rprintf.c     **** 			rprintfChar(digit+0x30);
 298:rprintf.c     **** 		}
 299:rprintf.c     **** 		else
 300:rprintf.c     **** 			rprintfChar(' ');
 301:rprintf.c     **** 		
 302:rprintf.c     **** 		if(place == 1.0)
 303:rprintf.c     **** 		{
 304:rprintf.c     **** 			rprintfChar('.');
 305:rprintf.c     **** 		}
 306:rprintf.c     **** 		
 307:rprintf.c     **** 		x -= (digit*place);
 308:rprintf.c     **** 		place /= 10.0;
 309:rprintf.c     **** 	}
 310:rprintf.c     **** }
 311:rprintf.c     **** #endif
 312:rprintf.c     **** 
 313:rprintf.c     **** #ifdef RPRINTF_SIMPLE
 314:rprintf.c     **** // *** rprintf1RamRom ***
 315:rprintf.c     **** // called by rprintf() - does a simple printf (supports %d, %x, %c)
 316:rprintf.c     **** // Supports:
 317:rprintf.c     **** // %d - decimal
 318:rprintf.c     **** // %x - hex
 319:rprintf.c     **** // %c - character
 320:rprintf.c     **** int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
 321:rprintf.c     **** {
 1085               	tabn	68,0,337,.LM71-.LFBB12
 1086               	.LM71:
 1087               		ldi r24,lo8(0)
 1088 04de DF93      		ldi r25,hi8(0)
 1089 04e0 CF93      	/* epilogue start */
 1091 04e4 DEB7      	.LM72:
 1092 04e6 6397      		adiw r28,19
 1093 04e8 0FB6      		in __tmp_reg__,__SREG__
 1094 04ea F894      		cli
 1095 04ec DEBF      		out __SP_H__,r29
 1096 04ee 0FBE      		out __SREG__,__tmp_reg__
 1097 04f0 CDBF      		out __SP_L__,r28
 1098               		pop r28
 1099               		pop r29
 322:rprintf.c     **** 	// simple printf routine
 323:rprintf.c     **** 	// define a global HexChars or use line below
 324:rprintf.c     **** 	//static char HexChars[16] = "0123456789ABCDEF";
 325:rprintf.c     **** 	char format_flag;
 326:rprintf.c     **** 	unsigned int u_val, div_val, base;
 327:rprintf.c     **** 	va_list ap;
 328:rprintf.c     **** 
 329:rprintf.c     **** 	va_start(ap, format);
 1100               	abn	68,0,339,.LM73-.LFBB12
 1101               	.LM73:
 1102 04f2 CE01      		ldd r24,Y+13
 1103 04f4 4B96      		rcall rprintfChar
 1104 04f6 9F87      	.L53:
 1106 04fa 00C0      	.LM74:
 1107               		ldd r24,Y+24
 330:rprintf.c     **** 	for (;;)
 331:rprintf.c     **** 	{
 332:rprintf.c     **** 		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 333:rprintf.c     **** 		{	// Until '%' or '\0'
 334:rprintf.c     **** 			if (!format_flag)
 1108               	
 1109               		breq .L55
 1110 04fc 8D85      	.LBB6:
 1111 04fe 8823      		ldd r24,Y+25
 1112 0500 01F4      		ldd r25,Y+26
 335:rprintf.c     **** 			{
 336:rprintf.c     **** 				va_end(ap);
 337:rprintf.c     **** 				return(0);
 1113               	 Y+6,r25
 1114               		std Y+5,r24
 1115 0502 80E0      		ldd r24,Y+25
 1116 0504 90E0      		ldd r25,Y+26
 1117               		adiw r24,1
 338:rprintf.c     **** 			}
 339:rprintf.c     **** 			rprintfChar(format_flag);
 340:rprintf.c     **** 		}
 341:rprintf.c     **** 
 342:rprintf.c     **** 		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 343:rprintf.c     **** 		{
 344:rprintf.c     **** 			case 'c': format_flag = va_arg(ap,int);
 345:rprintf.c     **** 			default:  rprintfChar(format_flag); continue;
 346:rprintf.c     **** 			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 347:rprintf.c     **** //			case 'x': base = 16; div_val = 0x10;
 348:rprintf.c     **** 			case 'x': base = 16; div_val = 0x1000;
 349:rprintf.c     **** 
 350:rprintf.c     **** 			CONVERSION_LOOP:
 351:rprintf.c     **** 			u_val = va_arg(ap,int);
 352:rprintf.c     **** 			if (format_flag == 'd')
 353:rprintf.c     **** 			{
 354:rprintf.c     **** 				if (((int)u_val) < 0)
 355:rprintf.c     **** 				{
 356:rprintf.c     **** 					u_val = - u_val;
 357:rprintf.c     **** 					rprintfChar('-');
 358:rprintf.c     **** 				}
 359:rprintf.c     **** 				while (div_val > 1 && div_val > u_val) div_val /= 10;
 360:rprintf.c     **** 			}
 361:rprintf.c     **** 			do
 362:rprintf.c     **** 			{
 363:rprintf.c     **** 				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
 364:rprintf.c     **** 				rprintfu04(u_val/div_val);
 365:rprintf.c     **** 				u_val %= div_val;
 366:rprintf.c     **** 				div_val /= base;
 367:rprintf.c     **** 			} while (div_val);
 368:rprintf.c     **** 		}
 369:rprintf.c     **** 	}
 370:rprintf.c     **** 	va_end(ap);
 371:rprintf.c     **** }
 1118               	Y+26,r25
 1119               		std Y+25,r24
 1120 0506 6396      		ldd r30,Y+5
 1121 0508 0FB6      		ldd r31,Y+6
 1122 050a F894      	/* #APP */
 1123 050c DEBF      	 ;  332 "rprintf.c" 1
 1124 050e 0FBE      		lpm r24, Z
 1125 0510 CDBF      		
 1126 0512 CF91      	 ;  0 "" 2
 1127 0514 DF91      	/* #NOAPP */
 1128 0516 0895      		std Y+4,r24
 1129               		ldd r24,Y+4
 1130               	.LBE6:
 1131               		std Y+19,r24
 1132 0518 8D85      		rjmp .L56
 1133 051a 00D0      	.L55:
 1134               		ldd r30,Y+25
 1135               		ldd r31,Y+26
 1136               		ld r18,Z
 1137 051c 888D      		std Y+19,r18
 1138 051e 8823      		ldd r24,Y+25
 1139 0520 01F0      		ldd r25,Y+26
 1140               		adiw r24,1
 1141 0522 898D      		std Y+26,r25
 1142 0524 9A8D      		std Y+25,r24
 1143 0526 9E83      	.L56:
 1144 0528 8D83      		ldd r19,Y+19
 1145 052a 898D      		std Y+13,r19
 1146 052c 9A8D      		ldd r24,Y+13
 1147 052e 0196      		cpi r24,lo8(37)
 1148 0530 9A8F      		brne .L57
 1150 0534 ED81      	.LM75:
 1151 0536 FE81      		ldd r24,Y+24
 1152               		tst r24
 1153               		breq .L58
 1154 0538 8491      	.LBB7:
 1155               		ldd r24,Y+25
 1156               		ldd r25,Y+26
 1157               		std Y+3,r25
 1158 053a 8C83      		std Y+2,r24
 1159 053c 8C81      		ldd r24,Y+25
 1160               		ldd r25,Y+26
 1161 053e 8B8B      		adiw r24,1
 1162 0540 00C0      		std Y+26,r25
 1163               		std Y+25,r24
 1164 0542 E98D      		ldd r30,Y+2
 1165 0544 FA8D      		ldd r31,Y+3
 1166 0546 2081      	/* #APP */
 1167 0548 2B8B      	 ;  342 "rprintf.c" 1
 1168 054a 898D      		lpm r24, Z
 1169 054c 9A8D      		
 1170 054e 0196      	 ;  0 "" 2
 1171 0550 9A8F      	/* #NOAPP */
 1172 0552 898F      		std Y+1,r24
 1173               		ldd r24,Y+1
 1174 0554 3B89      	.LBE7:
 1175 0556 3D87      		std Y+18,r24
 1176 0558 8D85      		rjmp .L59
 1177 055a 8532      	.L58:
 1178 055c 01F4      		ldd r30,Y+25
 1179               		ldd r31,Y+26
 1180               		ld r24,Z
 1181 055e 888D      		std Y+18,r24
 1182 0560 8823      		ldd r24,Y+25
 1183 0562 01F0      		ldd r25,Y+26
 1184               		adiw r24,1
 1185 0564 898D      		std Y+26,r25
 1186 0566 9A8D      		std Y+25,r24
 1187 0568 9B83      	.L59:
 1188 056a 8A83      		ldd r25,Y+18
 1189 056c 898D      		std Y+13,r25
 1190 056e 9A8D      		ldd r24,Y+13
 1191 0570 0196      		mov r18,r24
 1192 0572 9A8F      		ldi r19,lo8(0)
 1193 0574 898F      		std Y+17,r19
 1194 0576 EA81      		std Y+16,r18
 1195 0578 FB81      		ldd r24,Y+16
 1196               		ldd r25,Y+17
 1197               		cpi r24,100
 1198 057a 8491      		cpc r25,__zero_reg__
 1199               		breq .L62
 1200               		ldd r18,Y+16
 1201               		ldd r19,Y+17
 1202 057c 8983      		cpi r18,120
 1203 057e 8981      		cpc r19,__zero_reg__
 1204               		breq .L63
 1205 0580 8A8B      		ldd r24,Y+16
 1206 0582 00C0      		ldd r25,Y+17
 1207               		cpi r24,99
 1208 0584 E98D      		cpc r25,__zero_reg__
 1209 0586 FA8D      		brne .L60
 1210 0588 8081      	.L61:
 1212 058c 898D      	.LM76:
 1213 058e 9A8D      		ldd r18,Y+14
 1214 0590 0196      		ldd r19,Y+15
 1215 0592 9A8F      		movw r24,r18
 1216 0594 898F      		adiw r24,2
 1217               		std Y+15,r25
 1218 0596 9A89      		std Y+14,r24
 1219 0598 9D87      		movw r30,r18
 1220 059a 8D85      		ld r24,Z
 1221 059c 282F      		ldd r25,Z+1
 1222 059e 30E0      		std Y+13,r24
 1223 05a0 398B      	.L60:
 1225 05a4 8889      	.LM77:
 1226 05a6 9989      		ldd r24,Y+13
 1227 05a8 8436      		rcall rprintfChar
 1228 05aa 9105      		rjmp .L53
 1229 05ac 01F0      	.L62:
 1231 05b0 3989      	.LM78:
 1232 05b2 2837      		ldi r24,lo8(10)
 1233 05b4 3105      		ldi r25,hi8(10)
 1234 05b6 01F0      		std Y+8,r25
 1235 05b8 8889      		std Y+7,r24
 1236 05ba 9989      		ldi r24,lo8(10000)
 1237 05bc 8336      		ldi r25,hi8(10000)
 1238 05be 9105      		std Y+10,r25
 1239 05c0 01F4      		std Y+9,r24
 1240               		rjmp .L65
 1241               	.L63:
 1243 05c2 2E85      	.LM79:
 1244 05c4 3F85      		ldi r24,lo8(16)
 1245 05c6 C901      		ldi r25,hi8(16)
 1246 05c8 0296      		std Y+8,r25
 1247 05ca 9F87      		std Y+7,r24
 1248 05cc 8E87      		ldi r24,lo8(4096)
 1249 05ce F901      		ldi r25,hi8(4096)
 1250 05d0 8081      		std Y+10,r25
 1251 05d2 9181      		std Y+9,r24
 1252 05d4 8D87      	.L65:
 1254               	.LM80:
 1255               		ldd r18,Y+14
 1256 05d6 8D85      		ldd r19,Y+15
 1257 05d8 00D0      		movw r24,r18
 1258 05da 00C0      		adiw r24,2
 1259               		std Y+15,r25
 1260               		std Y+14,r24
 1261               		movw r30,r18
 1262 05dc 8AE0      		ld r24,Z
 1263 05de 90E0      		ldd r25,Z+1
 1264 05e0 9887      		std Y+12,r25
 1265 05e2 8F83      		std Y+11,r24
 1267 05e6 97E2      	.LM81:
 1268 05e8 9A87      		ldd r24,Y+13
 1269 05ea 8987      		cpi r24,lo8(100)
 1270 05ec 00C0      		brne .L66
 1272               	.LM82:
 1273               		ldd r24,Y+11
 1274 05ee 80E1      		ldd r25,Y+12
 1275 05f0 90E0      		tst r25
 1276 05f2 9887      		brge .L68
 1278 05f6 80E0      	.LM83:
 1279 05f8 90E1      		ldd r24,Y+11
 1280 05fa 9A87      		ldd r25,Y+12
 1281 05fc 8987      		com r25
 1282               		neg r24
 1283               		sbci r25,lo8(-1)
 1284               		std Y+12,r25
 1285 05fe 2E85      		std Y+11,r24
 1287 0602 C901      	.LM84:
 1288 0604 0296      		ldi r24,lo8(45)
 1289 0606 9F87      		rcall rprintfChar
 1290 0608 8E87      		rjmp .L68
 1291 060a F901      	.L69:
 1293 060e 9181      	.LM85:
 1294 0610 9C87      		ldd r24,Y+9
 1295 0612 8B87      		ldd r25,Y+10
 1296               		ldi r18,lo8(10)
 1297               		ldi r19,hi8(10)
 1298 0614 8D85      		movw r22,r18
 1299 0616 8436      		rcall __udivmodhi4
 1300 0618 01F4      		movw r24,r22
 1301               		std Y+10,r25
 1302               		std Y+9,r24
 1303 061a 8B85      	.L68:
 1304 061c 9C85      		ldd r24,Y+9
 1305 061e 9923      		ldd r25,Y+10
 1306 0620 04F4      		cpi r24,2
 1307               		cpc r25,__zero_reg__
 1308               		brlo .L66
 1309 0622 8B85      		ldd r18,Y+9
 1310 0624 9C85      		ldd r19,Y+10
 1311 0626 9095      		ldd r24,Y+11
 1312 0628 8195      		ldd r25,Y+12
 1313 062a 9F4F      		cp r24,r18
 1314 062c 9C87      		cpc r25,r19
 1315 062e 8B87      		brlo .L69
 1316               	.L66:
 1318 0630 8DE2      	.LM86:
 1319 0632 00D0      		ldd r24,Y+11
 1320 0634 00C0      		ldd r25,Y+12
 1321               		ldd r18,Y+9
 1322               		ldd r19,Y+10
 1323               		movw r22,r18
 1324 0636 8985      		rcall __udivmodhi4
 1325 0638 9A85      		movw r24,r22
 1326 063a 2AE0      		rcall rprintfu04
 1328 063e B901      	.LM87:
 1329 0640 00D0      		ldd r24,Y+11
 1330 0642 CB01      		ldd r25,Y+12
 1331 0644 9A87      		ldd r18,Y+9
 1332 0646 8987      		ldd r19,Y+10
 1333               		movw r22,r18
 1334 0648 8985      		rcall __udivmodhi4
 1335 064a 9A85      		std Y+12,r25
 1336 064c 8230      		std Y+11,r24
 1338 0650 00F0      	.LM88:
 1339 0652 2985      		ldd r24,Y+9
 1340 0654 3A85      		ldd r25,Y+10
 1341 0656 8B85      		ldd r18,Y+7
 1342 0658 9C85      		ldd r19,Y+8
 1343 065a 8217      		movw r22,r18
 1344 065c 9307      		rcall __udivmodhi4
 1345 065e 00F0      		movw r24,r22
 1346               		std Y+10,r25
 1347               		std Y+9,r24
 1349 0660 8B85      	.LM89:
 1350 0662 9C85      		ldd r24,Y+9
 1351 0664 2985      		ldd r25,Y+10
 1352 0666 3A85      		sbiw r24,0
 1353 0668 B901      		brne .L66
 1354 066a 00D0      		rjmp .L53
 1371 0684 2F81      	.Lscope12:
 1372 0686 3885      		.lcomm rputchar,2
 1376 068e 9A87      	.Letext0:
 1377 0690 8987      	.global __do_clear_bss
 1378               	...
DEFINED SYMBOLS
                            *ABS*:00000000 rprintf.c
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:2      *ABS*:0000003f __SREG__
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:3      *ABS*:0000003e __SP_H__
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:4      *ABS*:0000003d __SP_L__
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:5      *ABS*:00000034 __CCP__
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:7      *ABS*:00000001 __zero_reg__
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:112    .progmem.data:00000000 HexChars
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:119    .text:00000000 rprintfInit
                             .bss:00000000 rputchar
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:152    .text:00000024 rprintfChar
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:195    .text:00000056 rprintfStr
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:253    .text:00000096 rprintfStrLen
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:399    .text:00000164 rprintfProgStr
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:479    .text:000001ba rprintfCRLF
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:505    .text:000001cc rprintfu04
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:562    .text:00000206 rprintfu08
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:597    .text:00000226 rprintfu16
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:635    .text:0000024c rprintfu32
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:686    .text:00000284 rprintfNum
C:\Users\YASHMA~1\AppData\Local\Temp/ccFK1t7u.s:1084   .text:000004de rprintf1RamRom

UNDEFINED SYMBOLS
__udivmodsi4
__udivmodhi4
__do_clear_bss
