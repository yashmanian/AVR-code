   1               		.file	"a2d.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  92               	.global	a2dInit
  94               	a2dInit:
   1:a2d.c         **** /*! \file a2d.c \brief Analog-to-Digital converter function library. */
   2:a2d.c         **** //*****************************************************************************
   3:a2d.c         **** //
   4:a2d.c         **** // File Name	: 'a2d.c'
   5:a2d.c         **** // Title		: Analog-to-digital converter functions
   6:a2d.c         **** // Author		: Pascal Stang - Copyright (C) 2002
   7:a2d.c         **** // Created		: 2002-04-08
   8:a2d.c         **** // Revised		: 2002-09-30
   9:a2d.c         **** // Version		: 1.1
  10:a2d.c         **** // Target MCU	: Atmel AVR series
  11:a2d.c         **** // Editor Tabs	: 4
  12:a2d.c         **** //
  13:a2d.c         **** // This code is distributed under the GNU Public License
  14:a2d.c         **** //		which can be found at http://www.gnu.org/licenses/gpl.txt
  15:a2d.c         **** //
  16:a2d.c         **** //*****************************************************************************
  17:a2d.c         **** 
  18:a2d.c         **** #include <avr/io.h>
  19:a2d.c         **** #include <avr/interrupt.h>
  20:a2d.c         **** 
  21:a2d.c         **** #include "global.h"
  22:a2d.c         **** #include "a2d.h"
  23:a2d.c         **** 
  24:a2d.c         **** // global variables
  25:a2d.c         **** 
  26:a2d.c         **** //! Software flag used to indicate when
  27:a2d.c         **** /// the a2d conversion is complete.
  28:a2d.c         **** volatile unsigned char a2dCompleteFlag;
  29:a2d.c         **** 
  30:a2d.c         **** // functions
  31:a2d.c         **** 
  32:a2d.c         **** // initialize a2d converter
  33:a2d.c         **** void a2dInit(void)
  34:a2d.c         **** {
  95               	_
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  99 0002 CF93      	.LM1:
 100 0004 CDB7      		ldi r26,lo8(38)
 101 0006 DEB7      		ldi r27,hi8(38)
 102               		ldi r30,lo8(38)
 103               		ldi r31,hi8(38)
  35:a2d.c         **** 	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
 104               	
 105               		ori r24,lo8(-128)
 106 0008 A6E2      		st X,r24
 108 000c E6E2      	.LM2:
 109 000e F0E0      		ldi r26,lo8(38)
 110 0010 8081      		ldi r27,hi8(38)
 111 0012 8068      		ldi r30,lo8(38)
 112 0014 8C93      		ldi r31,hi8(38)
  36:a2d.c         **** 	cbi(ADCSR, ADFR);				// default to single sample convert mode
 113               	Z
 114               		andi r24,lo8(-33)
 115 0016 A6E2      		st X,r24
 117 001a E6E2      	.LM3:
 118 001c F0E0      		ldi r24,lo8(6)
 119 001e 8081      		rcall a2dSetPrescaler
 121 0022 8C93      	.LM4:
  37:a2d.c         **** 	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
 122               	lo8(1)
 123               		rcall a2dSetReference
 125 0026 00D0      	.LM5:
  38:a2d.c         **** 	a2dSetReference(ADC_REFERENCE);	// set default reference
 126               	 r26,lo8(39)
 127               		ldi r27,hi8(39)
 128 0028 81E0      		ldi r30,lo8(39)
 129 002a 00D0      		ldi r31,hi8(39)
  39:a2d.c         **** 	cbi(ADMUX, ADLAR);				// set to right-adjusted result
 130               	r24,Z
 131               		andi r24,lo8(-33)
 132 002c A7E2      		st X,r24
 134 0030 E7E2      	.LM6:
 135 0032 F0E0      		ldi r26,lo8(38)
 136 0034 8081      		ldi r27,hi8(38)
 137 0036 8F7D      		ldi r30,lo8(38)
 138 0038 8C93      		ldi r31,hi8(38)
  40:a2d.c         **** 
  41:a2d.c         **** 	sbi(ADCSR, ADIE);				// enable ADC interrupts
 139               	
 140               		ori r24,lo8(8)
 141 003a A6E2      		st X,r24
 143 003e E6E2      	.LM7:
 144 0040 F0E0      		sts a2dCompleteFlag,__zero_reg__
 146 0044 8860      	.LM8:
 147 0046 8C93      	/* #APP */
  42:a2d.c         **** 
  43:a2d.c         **** 	a2dCompleteFlag = FALSE;		// clear conversion complete flag
 148               	a2d.c" 1
 149               		sei
 150 0048 1092 0000 	 ;  0 "" 2
  44:a2d.c         **** 	sei();							// turn on interrupts (if not already on)
 151               	epilogue start */
 153               	.LM9:
 154               	/* #NOAPP */
 155 004c 7894      		pop r28
 156               		pop r29
 157               		ret
  45:a2d.c         **** }
 158               	a2dInit, .-a2dInit
 159               	.Lscope1:
 161 004e CF91      	.global	a2dOff
 163 0052 0895      	a2dOff:
 165               	.LM10:
 166               	.LFBB2:
 167               		push r29
 168               		push r28
 169               		in r28,__SP_L__
  46:a2d.c         **** 
  47:a2d.c         **** // turn off a2d converter
  48:a2d.c         **** void a2dOff(void)
  49:a2d.c         **** {
 170               	_H__
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 174 0056 CF93      	.LM11:
 175 0058 CDB7      		ldi r26,lo8(38)
 176 005a DEB7      		ldi r27,hi8(38)
 177               		ldi r30,lo8(38)
 178               		ldi r31,hi8(38)
  50:a2d.c         **** 	cbi(ADCSR, ADIE);				// disable ADC interrupts
 179               	
 180               		andi r24,lo8(-9)
 181 005c A6E2      		st X,r24
 183 0060 E6E2      	.LM12:
 184 0062 F0E0      		ldi r26,lo8(38)
 185 0064 8081      		ldi r27,hi8(38)
 186 0066 877F      		ldi r30,lo8(38)
 187 0068 8C93      		ldi r31,hi8(38)
  51:a2d.c         **** 	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
 188               	Z
 189               		andi r24,lo8(127)
 190 006a A6E2      		st X,r24
 191 006c B0E0      	/* epilogue start */
 193 0070 F0E0      	.LM13:
 194 0072 8081      		pop r28
 195 0074 8F77      		pop r29
 196 0076 8C93      		ret
  52:a2d.c         **** }
 200 0078 CF91      	.global	a2dSetPrescaler
 202 007c 0895      	a2dSetPrescaler:
 204               	.LM14:
 205               	.LFBB3:
 206               		push r29
 207               		push r28
 208               		push __tmp_reg__
 209               		in r28,__SP_L__
  53:a2d.c         **** 
  54:a2d.c         **** // configure A2D converter clock division (prescaling)
  55:a2d.c         **** void a2dSetPrescaler(unsigned char prescale)
  56:a2d.c         **** {
 210               	_H__
 211               	/* prologue: function */
 212               	/* frame size = 1 */
 213 007e DF93      		std Y+1,r24
 215 0082 0F92      	.LM15:
 216 0084 CDB7      		ldi r26,lo8(38)
 217 0086 DEB7      		ldi r27,hi8(38)
 218               		ldi r30,lo8(38)
 219               		ldi r31,hi8(38)
 220 0088 8983      		ld r24,Z
  57:a2d.c         **** 	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 221               	4
 222               		andi r25,lo8(-8)
 223 008a A6E2      		ldd r24,Y+1
 224 008c B0E0      		or r24,r25
 225 008e E6E2      		st X,r24
 226 0090 F0E0      	/* epilogue start */
 228 0094 982F      	.LM16:
 229 0096 987F      		pop __tmp_reg__
 230 0098 8981      		pop r28
 231 009a 892B      		pop r29
 232 009c 8C93      		ret
  58:a2d.c         **** }
 234               	tabs	"a2dSetReference:F(0,15)",36,0,0,a2dSetReference
 236 009e 0F90      	.global	a2dSetReference
 238 00a2 DF91      	a2dSetReference:
 240               	.LM17:
 241               	.LFBB4:
 242               		push r29
 243               		push r28
 244               		push __tmp_reg__
 245               		in r28,__SP_L__
 246               		in r29,__SP_H__
  59:a2d.c         **** 
  60:a2d.c         **** // configure A2D converter voltage reference
  61:a2d.c         **** void a2dSetReference(unsigned char ref)
  62:a2d.c         **** {
 247               	function */
 248               	/* frame size = 1 */
 249               		std Y+1,r24
 251 00a8 CF93      	.LM18:
 252 00aa 0F92      		ldi r26,lo8(39)
 253 00ac CDB7      		ldi r27,hi8(39)
 254 00ae DEB7      		ldi r30,lo8(39)
 255               		ldi r31,hi8(39)
 256               		ld r24,Z
 257 00b0 8983      		mov r18,r24
  63:a2d.c         **** 	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 258               	o8(63)
 259               		ldd r24,Y+1
 260 00b2 A7E2      		mov r24,r24
 261 00b4 B0E0      		ldi r25,lo8(0)
 262 00b6 E7E2      		clr __tmp_reg__
 263 00b8 F0E0      		lsr r25
 264 00ba 8081      		ror r24
 265 00bc 282F      		ror __tmp_reg__
 266 00be 2F73      		lsr r25
 267 00c0 8981      		ror r24
 268 00c2 882F      		ror __tmp_reg__
 269 00c4 90E0      		mov r25,r24
 270 00c6 0024      		mov r24,__tmp_reg__
 271 00c8 9695      		or r24,r18
 272 00ca 8795      		st X,r24
 273 00cc 0794      	/* epilogue start */
 275 00d0 8795      	.LM19:
 276 00d2 0794      		pop __tmp_reg__
 277 00d4 982F      		pop r28
 278 00d6 802D      		pop r29
 279 00d8 822B      		ret
 281               	.Lscope4:
  64:a2d.c         **** }
 282               	(0,15)",36,0,0,a2dSetChannel
 284 00dc 0F90      	.global	a2dSetChannel
 286 00e0 DF91      	a2dSetChannel:
 288               	.LM20:
 289               	.LFBB5:
 290               		push r29
 291               		push r28
 292               		push __tmp_reg__
 293               		in r28,__SP_L__
 294               		in r29,__SP_H__
  65:a2d.c         **** 
  66:a2d.c         **** // sets the a2d input channel
  67:a2d.c         **** void a2dSetChannel(unsigned char ch)
  68:a2d.c         **** {
 295               	function */
 296               	/* frame size = 1 */
 297               		std Y+1,r24
 299 00e6 CF93      	.LM21:
 300 00e8 0F92      		ldi r26,lo8(39)
 301 00ea CDB7      		ldi r27,hi8(39)
 302 00ec DEB7      		ldi r30,lo8(39)
 303               		ldi r31,hi8(39)
 304               		ld r24,Z
 305 00ee 8983      		mov r25,r24
  69:a2d.c         **** 	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 306               	o8(-32)
 307               		ldd r24,Y+1
 308 00f0 A7E2      		andi r24,lo8(31)
 309 00f2 B0E0      		or r24,r25
 310 00f4 E7E2      		st X,r24
 311 00f6 F0E0      	/* epilogue start */
 313 00fa 982F      	.LM22:
 314 00fc 907E      		pop __tmp_reg__
 315 00fe 8981      		pop r28
 316 0100 8F71      		pop r29
 317 0102 892B      		ret
 319               	.Lscope5:
  70:a2d.c         **** }
 320               	artConvert:F(0,15)",36,0,0,a2dStartConvert
 321               	.global	a2dStartConvert
 323 0108 CF91      	a2dStartConvert:
 325 010c 0895      	.LM23:
 326               	.LFBB6:
 327               		push r29
 328               		push r28
 329               		in r28,__SP_L__
 330               		in r29,__SP_H__
 331               	/* prologue: function */
  71:a2d.c         **** 
  72:a2d.c         **** // start a conversion on the current a2d input channel
  73:a2d.c         **** void a2dStartConvert(void)
  74:a2d.c         **** {
 332               	,a2dStartConvert
 333               	.global	a2dStartConvert
 335 010e DF93      	a2dStartConvert:
 337 0112 CDB7      	.LM23:
 338 0114 DEB7      	.LFBB6:
 339               		push r29
 340               		push r28
  75:a2d.c         **** 	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
 341               	dSetChannel
 342               	.Lscope5:
 344 0118 B0E0      	.global	a2dStartConvert
 346 011c F0E0      	a2dStartConvert:
 348 0120 8061      	.LM23:
 349 0122 8C93      	.LFBB6:
  76:a2d.c         **** 	sbi(ADCSR, ADSC);	// start conversion
 350               	ze	a2dSetChannel, .-a2dSetChannel
 351               	.Lscope5:
 353 0126 B0E0      	.global	a2dStartConvert
 355 012a F0E0      	a2dStartConvert:
 357 012e 8064      	.LM23:
 358 0130 8C93      	.LFBB6:
 359               		push r29
  77:a2d.c         **** }
 360               	annel, .-a2dSetChannel
 361               	.Lscope5:
 363 0134 DF91      	.global	a2dStartConvert
 365               	a2dStartConvert:
 367               	.LM23:
 368               	.LFBB6:
 369               		push r29
 370               		push r28
  78:a2d.c         **** 
  79:a2d.c         **** // return TRUE if conversion is complete
  80:a2d.c         **** u08 a2dIsComplete(void)
  81:a2d.c         **** {
 371               	dSetChannel
 372               	.Lscope5:
 374 0138 DF93      	.global	a2dStartConvert
 376 013c CDB7      	a2dStartConvert:
 378               	.LM23:
 379               	.LFBB6:
  82:a2d.c         **** 	return bit_is_set(ADCSR, ADSC);
 380               	ze	a2dSetChannel, .-a2dSetChannel
 381               	.Lscope5:
 383 0142 F0E0      	.global	a2dStartConvert
 385 0146 8074      	a2dStartConvert:
  83:a2d.c         **** }
 387               	pop r29
 388               		ret
 390 014a DF91      	.Lscope5:
 392               	.global	a2dStartConvert
 394               	a2dStartConvert:
 396               	.LM23:
 397               	.LFBB6:
 398               		push r29
  84:a2d.c         **** 
  85:a2d.c         **** // Perform a 10-bit conversion
  86:a2d.c         **** // starts conversion, waits until conversion is done, and returns result
  87:a2d.c         **** unsigned short a2dConvert10bit(unsigned char ch)
  88:a2d.c         **** {
 399               	annel, .-a2dSetChannel
 400               	.Lscope5:
 402 014e DF93      	.global	a2dStartConvert
 404 0152 0F92      	a2dStartConvert:
 406 0156 DEB7      	.LM23:
 407               	.LFBB6:
 408               		push r29
 409 0158 8983      		push r28
  89:a2d.c         **** 	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 410               	dSetChannel
 411               	.Lscope5:
  90:a2d.c         **** 	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 413               	)
 414               		or r24,r25
 415 015e A7E2      		st X,r24
 416 0160 B0E0      	/* epilogue start */
 418 0164 F0E0      	.LM22:
 419 0166 8081      		pop __tmp_reg__
 420 0168 982F      		pop r28
 421 016a 907E      		pop r29
 422 016c 8981      		ret
 424 0170 892B      	.Lscope5:
  91:a2d.c         **** 	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 426               	artConvert
 428 0174 A6E2      	a2dStartConvert:
 430 0178 E6E2      	.LM23:
 431 017a F0E0      	.LFBB6:
 432 017c 8081      		push r29
 433 017e 8061      		push r28
 434 0180 8C93      		in r28,__SP_L__
  92:a2d.c         **** 	sbi(ADCSR, ADSC);						// start conversion
 435               	e5:
 437 0182 A6E2      	.global	a2dStartConvert
 439 0186 E6E2      	a2dStartConvert:
 441 018a 8081      	.LM23:
 442 018c 8064      	.LFBB6:
 443 018e 8C93      		push r29
 444               		push r28
  93:a2d.c         **** 	//while(!a2dCompleteFlag);				// wait until conversion complete
  94:a2d.c         **** 	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
  95:a2d.c         **** 	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 445               	dSetChannel
 446               	.Lscope5:
 448 0192 F0E0      	.global	a2dStartConvert
 450 0196 882F      	a2dStartConvert:
 452 019a 8074      	.LM23:
 453 019c 9070      	.LFBB6:
 454 019e 0097      		push r29
 455 01a0 01F4      		push r28
  96:a2d.c         **** 
  97:a2d.c         **** 	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
  98:a2d.c         **** 	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
 456               	dSetChannel
 457               	.Lscope5:
 459 01a4 F0E0      	.global	a2dStartConvert
 461 01a8 282F      	a2dStartConvert:
 463 01ac E5E2      	.LM23:
 464 01ae F0E0      	.LFBB6:
 465 01b0 8081      		push r29
 466 01b2 882F      		push r28
 467 01b4 90E0      		in r28,__SP_L__
 468 01b6 982F      		in r29,__SP_H__
 469 01b8 8827      	/* prologue: function */
 470 01ba 822B      	/* frame size = 0 */
 472               	.LM24:
  99:a2d.c         **** }
 473               	ert, @function
 474               	a2dStartConvert:
 476 01c0 CF91      	.LM23:
 477 01c2 DF91      	.LFBB6:
 478 01c4 0895      		push r29
 479               		push r28
 480               		in r28,__SP_L__
 481               		in r29,__SP_H__
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 485               	.LM24:
 100:a2d.c         **** 
 101:a2d.c         **** // Perform a 8-bit conversion.
 102:a2d.c         **** // starts conversion, waits until conversion is done, and returns result
 103:a2d.c         **** unsigned char a2dConvert8bit(unsigned char ch)
 104:a2d.c         **** {
 486               	ert, @function
 487               	a2dStartConvert:
 489 01c6 DF93      	.LM23:
 490 01c8 CF93      	.LFBB6:
 491 01ca 0F92      		push r29
 492 01cc CDB7      		push r28
 493 01ce DEB7      		in r28,__SP_L__
 494               		in r29,__SP_H__
 495               	/* prologue: function */
 496 01d0 8983      	/* frame size = 0 */
 105:a2d.c         **** 	// do 10-bit conversion and return highest 8 bits
 106:a2d.c         **** 	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
 497               	al	a2dStartConvert
 499 01d2 8981      	a2dStartConvert:
 501 01d6 9695      	.LM23:
 502 01d8 8795      	.LFBB6:
 503 01da 9695      		push r29
 504 01dc 8795      		push r28
 505               		in r28,__SP_L__
 107:a2d.c         **** }
 506               	e5:
 508 01de 0F90      	.global	a2dStartConvert
 510 01e2 DF91      	a2dStartConvert:
 512               	.LM23:
 513               	.LFBB6:
 514               		push r29
 515               		push r28
 516               		in r28,__SP_L__
 517               		in r29,__SP_H__
 108:a2d.c         **** 
 109:a2d.c         **** //! Interrupt handler for ADC complete interrupt.
 110:a2d.c         **** SIGNAL(SIG_ADC)
 111:a2d.c         **** {
 518               	artConvert:F(0,15)",36,0,0,a2dStartConvert
 519               	.global	a2dStartConvert
 521 01e6 1F92      	a2dStartConvert:
 523 01ea 0FB6      	.LM23:
 524 01ec 0F92      	.LFBB6:
 525 01ee 1124      		push r29
 526 01f0 8F93      		push r28
 527 01f2 DF93      		in r28,__SP_L__
 528 01f4 CF93      		in r29,__SP_H__
 529 01f6 CDB7      	/* prologue: function */
 530 01f8 DEB7      	/* frame size = 0 */
 532               	.LM24:
 112:a2d.c         **** 	// set the a2d conversion flag to indicate "complete"
 113:a2d.c         **** 	a2dCompleteFlag = TRUE;
 533               	ert, @function
 534               	a2dStartConvert:
 536 01fc 8093 0000 	.LM23:
 537               	.LFBB6:
 114:a2d.c         **** }
 538               	ze	a2dSetChannel, .-a2dSetChannel
 539               	.Lscope5:
 541 0202 DF91      	.global	a2dStartConvert
 543 0206 0F90      	a2dStartConvert:
 545 020a 0F90      	.LM23:
 546 020c 1F90      	.LFBB6:
 547 020e 1895      		push r29
 548               		push r28
 549               		in r28,__SP_L__
 550               		in r29,__SP_H__
 551               	/* prologue: function */
 552               	/* frame size = 0 */
 554               	.LM24:
DEFINED SYMBOLS
                            *ABS*:00000000 a2d.c
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:2      *ABS*:0000003f __SREG__
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:3      *ABS*:0000003e __SP_H__
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:4      *ABS*:0000003d __SP_L__
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:5      *ABS*:00000034 __CCP__
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:7      *ABS*:00000001 __zero_reg__
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:94     .text:00000000 a2dInit
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:209    .text:0000007e a2dSetPrescaler
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:246    .text:000000a6 a2dSetReference
                            *COM*:00000001 a2dCompleteFlag
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:169    .text:00000054 a2dOff
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:294    .text:000000e4 a2dSetChannel
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:331    .text:0000010e a2dStartConvert
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:370    .text:00000138 a2dIsComplete
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:398    .text:0000014e a2dConvert10bit
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:485    .text:000001c6 a2dConvert8bit
C:\Users\YASHMA~1\AppData\Local\Temp/ccqZXOIo.s:517    .text:000001e6 __vector_14

UNDEFINED SYMBOLS
__do_clear_bss
