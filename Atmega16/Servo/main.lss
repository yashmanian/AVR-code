
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000127  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c1  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000149  00000000  00000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b6  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000073  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main (void)
{
	DDRD |= 0xFF;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0;
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 6c       	ori	r24, 0xC2	; 194
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10;
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	89 61       	ori	r24, 0x19	; 25
  7c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
  7e:	8f e1       	ldi	r24, 0x1F	; 31
  80:	9e e4       	ldi	r25, 0x4E	; 78
  82:	97 bd       	out	0x27, r25	; 39
  84:	86 bd       	out	0x26, r24	; 38
  86:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t servo_pos;
	while(1)
	{
		for(servo_pos=0;servo_pos<19;servo_pos++)
		{
			OCR1B = ICR1 - (servo_pos*1000);
  88:	a8 e1       	ldi	r26, 0x18	; 24
  8a:	bc ef       	ldi	r27, 0xFC	; 252
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	60 e9       	ldi	r22, 0x90	; 144
  8e:	71 e0       	ldi	r23, 0x01	; 1
  90:	26 b5       	in	r18, 0x26	; 38
  92:	37 b5       	in	r19, 0x27	; 39
  94:	84 2f       	mov	r24, r20
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	fc 01       	movw	r30, r24
  9a:	ea 9f       	mul	r30, r26
  9c:	c0 01       	movw	r24, r0
  9e:	eb 9f       	mul	r30, r27
  a0:	90 0d       	add	r25, r0
  a2:	fa 9f       	mul	r31, r26
  a4:	90 0d       	add	r25, r0
  a6:	11 24       	eor	r1, r1
  a8:	82 0f       	add	r24, r18
  aa:	93 1f       	adc	r25, r19
  ac:	99 bd       	out	0x29, r25	; 41
  ae:	88 bd       	out	0x28, r24	; 40
  b0:	88 ee       	ldi	r24, 0xE8	; 232
  b2:	93 e0       	ldi	r25, 0x03	; 3
  b4:	fb 01       	movw	r30, r22
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0x48>
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10;
	ICR1 = 19999;
	uint8_t servo_pos;
	while(1)
	{
		for(servo_pos=0;servo_pos<19;servo_pos++)
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	43 31       	cpi	r20, 0x13	; 19
  c2:	30 f3       	brcs	.-52     	; 0x90 <main+0x24>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	e4 cf       	rjmp	.-56     	; 0x90 <main+0x24>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
