
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  00000121  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000088  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000062  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 47 00 	jmp	0x8e	; 0x8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main (void)
{
	//initialising LEDs
	DDRD |= 1 << PIND6;
  6c:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1 << PIND6);
  6e:	96 98       	cbi	0x12, 6	; 18
	TCCR1B |= 1 << CS10 | 1 << CS12;
  70:	8e b5       	in	r24, 0x2e	; 46
  72:	85 60       	ori	r24, 0x05	; 5
  74:	8e bd       	out	0x2e, r24	; 46
	{
		//count and toggle LED
		if (TCNT1 > 15625)
		{
			TCNT1 = 0;
			PORTD ^= 1 << PIND6;	
  76:	20 e4       	ldi	r18, 0x40	; 64
	
	
	while(1)
	{
		//count and toggle LED
		if (TCNT1 > 15625)
  78:	8c b5       	in	r24, 0x2c	; 44
  7a:	9d b5       	in	r25, 0x2d	; 45
  7c:	8a 50       	subi	r24, 0x0A	; 10
  7e:	9d 43       	sbci	r25, 0x3D	; 61
  80:	d8 f3       	brcs	.-10     	; 0x78 <main+0xc>
		{
			TCNT1 = 0;
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
			PORTD ^= 1 << PIND6;	
  86:	82 b3       	in	r24, 0x12	; 18
  88:	82 27       	eor	r24, r18
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	f5 cf       	rjmp	.-22     	; 0x78 <main+0xc>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
