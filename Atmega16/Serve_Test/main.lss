
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000099  00800060  00800060  00000a9c  2**0
                  ALLOC
  2 .debug_aranges 000000a0  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000044e  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001041  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006db  00000000  00000000  00001fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c55  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000380  00000000  00000000  000032fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000574  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000009d1  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000045c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_11>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_13>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_14>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000054 <__c.1526>:
  54:	43 6f 6d 70 6c 65 74 65 0a 00                       Complete..

0000005e <__c.1524>:
  5e:	25 63 0a 00                                         %c..

00000062 <HexChars>:
  62:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
  72:	00 00                                               ..

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a9 3f       	cpi	r26, 0xF9	; 249
  8c:	b1 07       	cpc	r27, r17
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  94:	0c 94 12 05 	jmp	0xa24	; 0xa24 <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <configure_ports>:

//************CONFIGURE PORTS************
//configure ports for input or output - specific to ATmega8
void configure_ports(void)
	{
	DDRC = 0x00;  //configure all C ports for input
  9c:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00; //make sure pull-up resistors are turned off
  9e:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF;  //configure all D ports for output
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xC7;  //configure B ports 0, 1, 2, 6, 7 for output (google search '0b11000111 to hex')
  a4:	87 ec       	ldi	r24, 0xC7	; 199
  a6:	87 bb       	out	0x17, r24	; 23
	}
  a8:	08 95       	ret

000000aa <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles*16;
	while(cycles > 0)
		cycles--;
	}
  aa:	08 95       	ret

000000ac <LED_on>:
//*********SIMPLIFIED FUNCTIONS**********
//functions to make coding easier for a beginner
//but could cause port mixup confusion for intermediate users
void LED_on(void)
	{
	PORT_OFF(PORTD, 4);//turn LED on
  ac:	94 98       	cbi	0x12, 4	; 18
	}
  ae:	08 95       	ret

000000b0 <LED_off>:
void LED_off(void)
	{
	PORT_ON(PORTD, 4);//turn LED off
  b0:	94 9a       	sbi	0x12, 4	; 18
	}
  b2:	08 95       	ret

000000b4 <servo_left>:
void servo_left(signed long int speed)
	{
	PORT_ON(PORTD, 2);
  b4:	92 9a       	sbi	0x12, 2	; 18
	delay_cycles(speed);
	PORT_OFF(PORTD, 2);//keep off
  b6:	92 98       	cbi	0x12, 2	; 18
	delay_cycles(200);
	}
  b8:	08 95       	ret

000000ba <servo_right>:
void servo_right(signed long int speed)
	{
	PORT_ON(PORTD, 3);
  ba:	93 9a       	sbi	0x12, 3	; 18
	delay_cycles(speed);		
	PORT_OFF(PORTD, 3);//keep off
  bc:	93 98       	cbi	0x12, 3	; 18
	delay_cycles(200);
	}
  be:	08 95       	ret

000000c0 <main>:
#include "global.h"
#include <util/delay.h>
#include "SOR_Utils.h"

int main()
{
  c0:	9f 92       	push	r9
  c2:	af 92       	push	r10
  c4:	bf 92       	push	r11
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	uartInit();
  d6:	0e 94 24 02 	call	0x448	; 0x448 <uartInit>
	uartSetBaudRate(9600);
  da:	60 e8       	ldi	r22, 0x80	; 128
  dc:	75 e2       	ldi	r23, 0x25	; 37
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 1e 01 	call	0x23c	; 0x23c <uartSetBaudRate>
	rprintfInit(uartSendByte);
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 3d 02 	call	0x47a	; 0x47a <rprintfInit>
	DDRD|=1<<PIND6;
  ee:	8e 9a       	sbi	0x11, 6	; 17
	DDRB|= (1<<PINB3)|(1<<PINB4)|(1<<PINB5);
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	88 63       	ori	r24, 0x38	; 56
  f4:	87 bb       	out	0x17, r24	; 23
	{
		char data=uartGetByte();
		
		if(data == 'w')
		{
			rprintf("%c\n",data);
  f6:	99 24       	eor	r9, r9
  f8:	93 94       	inc	r9
  fa:	2e e5       	ldi	r18, 0x5E	; 94
  fc:	a2 2e       	mov	r10, r18
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	b2 2e       	mov	r11, r18
 102:	97 e7       	ldi	r25, 0x77	; 119
 104:	c9 2e       	mov	r12, r25
 106:	d1 2c       	mov	r13, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 108:	80 e9       	ldi	r24, 0x90	; 144
 10a:	e8 2e       	mov	r14, r24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	f8 2e       	mov	r15, r24
			PORTB&=~(1<<PINB4);
			PORTB&=~(1<<PINB3);
			PORTB|=1<<PINB5;
			_delay_ms(5);
			PORTB&=~(1<<PINB5);
			rprintf("Complete\n");
 110:	00 e2       	ldi	r16, 0x20	; 32
 112:	1e e4       	ldi	r17, 0x4E	; 78
 114:	c4 e5       	ldi	r28, 0x54	; 84
 116:	d0 e0       	ldi	r29, 0x00	; 0
	rprintfInit(uartSendByte);
	DDRD|=1<<PIND6;
	DDRB|= (1<<PINB3)|(1<<PINB4)|(1<<PINB5);
	while(1)
	{
		char data=uartGetByte();
 118:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uartGetByte>
		
		if(data == 'w')
 11c:	87 37       	cpi	r24, 0x77	; 119
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x58>
		{
			rprintf("%c\n",data);
 120:	00 d0       	rcall	.+0      	; 0x122 <main+0x62>
 122:	00 d0       	rcall	.+0      	; 0x124 <main+0x64>
 124:	0f 92       	push	r0
 126:	ed b7       	in	r30, 0x3d	; 61
 128:	fe b7       	in	r31, 0x3e	; 62
 12a:	31 96       	adiw	r30, 0x01	; 1
 12c:	ad b7       	in	r26, 0x3d	; 61
 12e:	be b7       	in	r27, 0x3e	; 62
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	9c 92       	st	X, r9
 134:	b2 82       	std	Z+2, r11	; 0x02
 136:	a1 82       	std	Z+1, r10	; 0x01
 138:	d4 82       	std	Z+4, r13	; 0x04
 13a:	c3 82       	std	Z+3, r12	; 0x03
 13c:	0e 94 98 03 	call	0x730	; 0x730 <rprintf1RamRom>
			PORTB|=1<<PINB3;
 140:	c3 9a       	sbi	0x18, 3	; 24
			PORTB&=~(1<<PINB4);
 142:	c4 98       	cbi	0x18, 4	; 24
 144:	80 ed       	ldi	r24, 0xD0	; 208
 146:	97 e0       	ldi	r25, 0x07	; 7
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	f7 01       	movw	r30, r14
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x94>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <main+0x92>
			_delay_ms(200);
			PORTB&=~(1<<PINB4);
 15c:	c4 98       	cbi	0x18, 4	; 24
			PORTB&=~(1<<PINB3);
 15e:	c3 98       	cbi	0x18, 3	; 24
			PORTB|=1<<PINB5;
 160:	c5 9a       	sbi	0x18, 5	; 24
 162:	c8 01       	movw	r24, r16
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xa4>
			_delay_ms(5);
			PORTB&=~(1<<PINB5);
 168:	c5 98       	cbi	0x18, 5	; 24
			rprintf("Complete\n");
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0xac>
 16c:	0f 92       	push	r0
 16e:	ed b7       	in	r30, 0x3d	; 61
 170:	fe b7       	in	r31, 0x3e	; 62
 172:	91 82       	std	Z+1, r9	; 0x01
 174:	d3 83       	std	Z+3, r29	; 0x03
 176:	c2 83       	std	Z+2, r28	; 0x02
 178:	0e 94 98 03 	call	0x730	; 0x730 <rprintf1RamRom>
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	ca cf       	rjmp	.-108    	; 0x118 <main+0x58>

00000184 <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
 184:	37 9a       	sbi	0x06, 7	; 6
	cbi(ADCSR, ADFR);				// default to single sample convert mode
 186:	35 98       	cbi	0x06, 5	; 6
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 188:	86 b1       	in	r24, 0x06	; 6
 18a:	88 7f       	andi	r24, 0xF8	; 248
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	86 b9       	out	0x06, r24	; 6
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 190:	87 b1       	in	r24, 0x07	; 7
 192:	8f 73       	andi	r24, 0x3F	; 63
 194:	80 64       	ori	r24, 0x40	; 64
 196:	87 b9       	out	0x07, r24	; 7
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
 198:	3d 98       	cbi	0x07, 5	; 7

	sbi(ADCSR, ADIE);				// enable ADC interrupts
 19a:	33 9a       	sbi	0x06, 3	; 6

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
 19c:	10 92 e4 00 	sts	0x00E4, r1
	sei();							// turn on interrupts (if not already on)
 1a0:	78 94       	sei
}
 1a2:	08 95       	ret

000001a4 <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
 1a4:	33 98       	cbi	0x06, 3	; 6
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
 1a6:	37 98       	cbi	0x06, 7	; 6
}
 1a8:	08 95       	ret

000001aa <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 1aa:	96 b1       	in	r25, 0x06	; 6
 1ac:	98 7f       	andi	r25, 0xF8	; 248
 1ae:	98 2b       	or	r25, r24
 1b0:	96 b9       	out	0x06, r25	; 6
}
 1b2:	08 95       	ret

000001b4 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 1b4:	97 b1       	in	r25, 0x07	; 7
 1b6:	82 95       	swap	r24
 1b8:	88 0f       	add	r24, r24
 1ba:	88 0f       	add	r24, r24
 1bc:	80 7c       	andi	r24, 0xC0	; 192
 1be:	9f 73       	andi	r25, 0x3F	; 63
 1c0:	98 2b       	or	r25, r24
 1c2:	97 b9       	out	0x07, r25	; 7
}
 1c4:	08 95       	ret

000001c6 <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 1c6:	97 b1       	in	r25, 0x07	; 7
 1c8:	8f 71       	andi	r24, 0x1F	; 31
 1ca:	90 7e       	andi	r25, 0xE0	; 224
 1cc:	89 2b       	or	r24, r25
 1ce:	87 b9       	out	0x07, r24	; 7
}
 1d0:	08 95       	ret

000001d2 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
 1d2:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);	// start conversion
 1d4:	36 9a       	sbi	0x06, 6	; 6
}
 1d6:	08 95       	ret

000001d8 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
 1d8:	86 b1       	in	r24, 0x06	; 6
}
 1da:	80 74       	andi	r24, 0x40	; 64
 1dc:	08 95       	ret

000001de <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 1de:	10 92 e4 00 	sts	0x00E4, r1
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 1e2:	97 b1       	in	r25, 0x07	; 7
 1e4:	8f 71       	andi	r24, 0x1F	; 31
 1e6:	90 7e       	andi	r25, 0xE0	; 224
 1e8:	89 2b       	or	r24, r25
 1ea:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 1ec:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
 1ee:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 1f0:	36 99       	sbic	0x06, 6	; 6
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
 1f4:	24 b1       	in	r18, 0x04	; 4
 1f6:	45 b1       	in	r20, 0x05	; 5
 1f8:	94 2f       	mov	r25, r20
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	28 2b       	or	r18, r24
 200:	39 2b       	or	r19, r25
}
 202:	c9 01       	movw	r24, r18
 204:	08 95       	ret

00000206 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
 206:	0e 94 ef 00 	call	0x1de	; 0x1de <a2dConvert10bit>
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
}
 212:	08 95       	ret

00000214 <__vector_14>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	80 93 e4 00 	sts	0x00E4, r24
}
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <uartSetRxHandler>:

// redirects received data to a user function
void uartSetRxHandler(void (*rx_func)(unsigned char c))
{
	// set the receive interrupt to run the supplied user function
	UartRxFunc = rx_func;
 232:	90 93 e1 00 	sts	0x00E1, r25
 236:	80 93 e0 00 	sts	0x00E0, r24
}
 23a:	08 95       	ret

0000023c <uartSetBaudRate>:

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 23c:	9b 01       	movw	r18, r22
 23e:	ac 01       	movw	r20, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 240:	60 58       	subi	r22, 0x80	; 128
 242:	7b 47       	sbci	r23, 0x7B	; 123
 244:	81 4e       	sbci	r24, 0xE1	; 225
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	f3 e0       	ldi	r31, 0x03	; 3
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	88 1f       	adc	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	fa 95       	dec	r31
 254:	d1 f7       	brne	.-12     	; 0x24a <uartSetBaudRate+0xe>
 256:	e4 e0       	ldi	r30, 0x04	; 4
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	44 1f       	adc	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	ea 95       	dec	r30
 262:	d1 f7       	brne	.-12     	; 0x258 <uartSetBaudRate+0x1c>
 264:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	30 40       	sbci	r19, 0x00	; 0
	outb(UBRRL, bauddiv);
 26c:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 26e:	30 bd       	out	0x20, r19	; 32
	#endif
}
 270:	08 95       	ret

00000272 <uartGetRxBuffer>:
// returns the receive buffer structure 
cBuffer* uartGetRxBuffer(void)
{
	// return rx buffer pointer
	return &uartRxBuffer;
}
 272:	86 ee       	ldi	r24, 0xE6	; 230
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret

00000278 <uartGetTxBuffer>:
// returns the transmit buffer structure 
cBuffer* uartGetTxBuffer(void)
{
	// return tx buffer pointer
	return &uartTxBuffer;
}
 278:	8f ee       	ldi	r24, 0xEF	; 239
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret

0000027e <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
 27e:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 280:	80 91 e5 00 	lds	r24, 0x00E5
 284:	88 23       	and	r24, r24
 286:	e1 f3       	breq	.-8      	; 0x280 <uartSendByte+0x2>
	// send byte
	outb(UDR, txData);
 288:	9c b9       	out	0x0c, r25	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 28a:	10 92 e5 00 	sts	0x00E5, r1
}
 28e:	08 95       	ret

00000290 <uartFlushReceiveBuffer>:
void uartFlushReceiveBuffer(void)
{
	// flush all data from receive buffer
	//bufferFlush(&uartRxBuffer);
	// same effect as above
	uartRxBuffer.datalength = 0;
 290:	10 92 eb 00 	sts	0x00EB, r1
 294:	10 92 ea 00 	sts	0x00EA, r1
}
 298:	08 95       	ret

0000029a <uartReceiveBufferIsEmpty>:

// return true if uart receive buffer is empty
u08 uartReceiveBufferIsEmpty(void)
{
	if(uartRxBuffer.datalength == 0)
 29a:	80 91 ea 00 	lds	r24, 0x00EA
 29e:	90 91 eb 00 	lds	r25, 0x00EB
 2a2:	89 2b       	or	r24, r25
 2a4:	11 f0       	breq	.+4      	; 0x2aa <uartReceiveBufferIsEmpty+0x10>
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		return FALSE;
	}
}
 2ac:	08 95       	ret

000002ae <__vector_11>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 2d0:	6c b1       	in	r22, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 2d2:	80 91 e0 00 	lds	r24, 0x00E0
 2d6:	90 91 e1 00 	lds	r25, 0x00E1
 2da:	89 2b       	or	r24, r25
 2dc:	39 f0       	breq	.+14     	; 0x2ec <__vector_11+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 2de:	e0 91 e0 00 	lds	r30, 0x00E0
 2e2:	f0 91 e1 00 	lds	r31, 0x00E1
 2e6:	86 2f       	mov	r24, r22
 2e8:	09 95       	icall
 2ea:	0f c0       	rjmp	.+30     	; 0x30a <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 2ec:	86 ee       	ldi	r24, 0xE6	; 230
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 a2 04 	call	0x944	; 0x944 <bufferAddToEnd>
 2f4:	88 23       	and	r24, r24
 2f6:	49 f4       	brne	.+18     	; 0x30a <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 2f8:	80 91 f7 00 	lds	r24, 0x00F7
 2fc:	90 91 f8 00 	lds	r25, 0x00F8
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 f8 00 	sts	0x00F8, r25
 306:	80 93 f7 00 	sts	0x00F7, r24
		}
	}
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <uartAddToTxBuffer>:
	}
}

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
 32c:	68 2f       	mov	r22, r24
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
 32e:	8f ee       	ldi	r24, 0xEF	; 239
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 a2 04 	call	0x944	; 0x944 <bufferAddToEnd>
}
 336:	08 95       	ret

00000338 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 35a:	80 91 ee 00 	lds	r24, 0x00EE
 35e:	88 23       	and	r24, r24
 360:	71 f0       	breq	.+28     	; 0x37e <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 362:	80 91 f3 00 	lds	r24, 0x00F3
 366:	90 91 f4 00 	lds	r25, 0x00F4
 36a:	89 2b       	or	r24, r25
 36c:	31 f0       	breq	.+12     	; 0x37a <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 36e:	8f ee       	ldi	r24, 0xEF	; 239
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 39 04 	call	0x872	; 0x872 <bufferGetFromFront>
 376:	8c b9       	out	0x0c, r24	; 12
 378:	05 c0       	rjmp	.+10     	; 0x384 <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 37a:	10 92 ee 00 	sts	0x00EE, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	80 93 e5 00 	sts	0x00E5, r24
	}
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	80 93 ee 00 	sts	0x00EE, r24
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
 3ac:	8f ee       	ldi	r24, 0xEF	; 239
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 39 04 	call	0x872	; 0x872 <bufferGetFromFront>
 3b4:	98 2f       	mov	r25, r24

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 3b6:	80 91 e5 00 	lds	r24, 0x00E5
 3ba:	88 23       	and	r24, r24
 3bc:	e1 f3       	breq	.-8      	; 0x3b6 <uartSendTxBuffer+0x10>
	// send byte
	outb(UDR, txData);
 3be:	9c b9       	out	0x0c, r25	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 3c0:	10 92 e5 00 	sts	0x00E5, r1
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
}
 3c4:	08 95       	ret

000003c6 <uartReceiveByte>:
		return -1;
}

// gets a byte (if available) from the uart receive buffer
u08 uartReceiveByte(u08* rxData)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	ec 01       	movw	r28, r24
	// make sure we have a receive buffer
	if(uartRxBuffer.size)
 3cc:	80 91 e8 00 	lds	r24, 0x00E8
 3d0:	90 91 e9 00 	lds	r25, 0x00E9
 3d4:	89 2b       	or	r24, r25
 3d6:	69 f0       	breq	.+26     	; 0x3f2 <uartReceiveByte+0x2c>
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
 3d8:	80 91 ea 00 	lds	r24, 0x00EA
 3dc:	90 91 eb 00 	lds	r25, 0x00EB
 3e0:	89 2b       	or	r24, r25
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <uartReceiveByte+0x2c>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer);
 3e4:	86 ee       	ldi	r24, 0xE6	; 230
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 39 04 	call	0x872	; 0x872 <bufferGetFromFront>
 3ec:	88 83       	st	Y, r24
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <uartReceiveByte+0x2e>
			return TRUE;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// no buffer
		return FALSE;
	}
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <uartGetByte>:
	uartReadyTx = FALSE;
}

// gets a single byte from the uart receive buffer (getchar-style)
int uartGetByte(void)
{
 3fa:	df 93       	push	r29
 3fc:	cf 93       	push	r28
 3fe:	0f 92       	push	r0
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	if(uartReceiveByte(&c))
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <uartReceiveByte>
 40c:	88 23       	and	r24, r24
 40e:	19 f4       	brne	.+6      	; 0x416 <uartGetByte+0x1c>
 410:	2f ef       	ldi	r18, 0xFF	; 255
 412:	3f ef       	ldi	r19, 0xFF	; 255
 414:	03 c0       	rjmp	.+6      	; 0x41c <uartGetByte+0x22>
		return c;
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	28 2f       	mov	r18, r24
 41a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
 41c:	c9 01       	movw	r24, r18
 41e:	0f 90       	pop	r0
 420:	cf 91       	pop	r28
 422:	df 91       	pop	r29
 424:	08 95       	ret

00000426 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, uartRxData, UART_RX_BUFFER_SIZE);
 426:	86 ee       	ldi	r24, 0xE6	; 230
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	60 e6       	ldi	r22, 0x60	; 96
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	40 e4       	ldi	r20, 0x40	; 64
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	0e 94 2c 04 	call	0x858	; 0x858 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, uartTxData, UART_TX_BUFFER_SIZE);
 436:	8f ee       	ldi	r24, 0xEF	; 239
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	60 ea       	ldi	r22, 0xA0	; 160
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	40 e4       	ldi	r20, 0x40	; 64
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	0e 94 2c 04 	call	0x858	; 0x858 <bufferInit>
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (u08*) UART_RX_BUFFER_ADDR, UART_RX_BUFFER_SIZE);
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (u08*) UART_TX_BUFFER_ADDR, UART_TX_BUFFER_SIZE);
	#endif
}
 446:	08 95       	ret

00000448 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 448:	0e 94 13 02 	call	0x426	; 0x426 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 44c:	10 92 e1 00 	sts	0x00E1, r1
 450:	10 92 e0 00 	sts	0x00E0, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 454:	88 ed       	ldi	r24, 0xD8	; 216
 456:	8a b9       	out	0x0a, r24	; 10

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
 458:	60 e8       	ldi	r22, 0x80	; 128
 45a:	75 e2       	ldi	r23, 0x25	; 37
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 1e 01 	call	0x23c	; 0x23c <uartSetBaudRate>
	// initialize states
	uartReadyTx = TRUE;
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	80 93 e5 00 	sts	0x00E5, r24
	uartBufferedTx = FALSE;
 46a:	10 92 ee 00 	sts	0x00EE, r1
	// clear overflow count
	uartRxOverflow = 0;
 46e:	10 92 f8 00 	sts	0x00F8, r1
 472:	10 92 f7 00 	sts	0x00F7, r1
	// enable interrupts
	sei();
 476:	78 94       	sei
}
 478:	08 95       	ret

0000047a <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 47a:	90 93 e3 00 	sts	0x00E3, r25
 47e:	80 93 e2 00 	sts	0x00E2, r24
}
 482:	08 95       	ret

00000484 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 484:	1f 93       	push	r17
 486:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 488:	8a 30       	cpi	r24, 0x0A	; 10
 48a:	31 f4       	brne	.+12     	; 0x498 <rprintfChar+0x14>
		rputchar('\r');
 48c:	e0 91 e2 00 	lds	r30, 0x00E2
 490:	f0 91 e3 00 	lds	r31, 0x00E3
 494:	8d e0       	ldi	r24, 0x0D	; 13
 496:	09 95       	icall
	// send character
	rputchar(c);
 498:	e0 91 e2 00 	lds	r30, 0x00E2
 49c:	f0 91 e3 00 	lds	r31, 0x00E3
 4a0:	81 2f       	mov	r24, r17
 4a2:	09 95       	icall
}
 4a4:	1f 91       	pop	r17
 4a6:	08 95       	ret

000004a8 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	21 f4       	brne	.+8      	; 0x4ba <rprintfStr+0x12>
 4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
 4b4:	21 96       	adiw	r28, 0x01	; 1
 4b6:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
 4ba:	88 81       	ld	r24, Y
 4bc:	88 23       	and	r24, r24
 4be:	d1 f7       	brne	.-12     	; 0x4b4 <rprintfStr+0xc>
		rprintfChar(*str++);
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
 4c6:	ef 92       	push	r14
 4c8:	ff 92       	push	r15
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	8c 01       	movw	r16, r24
 4d4:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	e9 f0       	breq	.+58     	; 0x514 <rprintfStrLen+0x4e>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
 4de:	26 17       	cp	r18, r22
 4e0:	37 07       	cpc	r19, r23
 4e2:	38 f4       	brcc	.+14     	; 0x4f2 <rprintfStrLen+0x2c>
 4e4:	f8 01       	movw	r30, r16
 4e6:	81 91       	ld	r24, Z+
 4e8:	8f 01       	movw	r16, r30
 4ea:	2f 5f       	subi	r18, 0xFF	; 255
 4ec:	3f 4f       	sbci	r19, 0xFF	; 255
 4ee:	88 23       	and	r24, r24
 4f0:	b1 f7       	brne	.-20     	; 0x4de <rprintfStrLen+0x18>
 4f2:	c0 e0       	ldi	r28, 0x00	; 0
 4f4:	d0 e0       	ldi	r29, 0x00	; 0
 4f6:	0b c0       	rjmp	.+22     	; 0x50e <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 4f8:	f8 01       	movw	r30, r16
 4fa:	80 81       	ld	r24, Z
 4fc:	88 23       	and	r24, r24
 4fe:	19 f0       	breq	.+6      	; 0x506 <rprintfStrLen+0x40>
			rprintfChar(*str++);
 500:	0f 5f       	subi	r16, 0xFF	; 255
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	01 c0       	rjmp	.+2      	; 0x508 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
 506:	80 e2       	ldi	r24, 0x20	; 32
 508:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
 50c:	21 96       	adiw	r28, 0x01	; 1
 50e:	ce 15       	cp	r28, r14
 510:	df 05       	cpc	r29, r15
 512:	90 f3       	brcs	.-28     	; 0x4f8 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	ff 90       	pop	r15
 51e:	ef 90       	pop	r14
 520:	08 95       	ret

00000522 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	19 f4       	brne	.+6      	; 0x532 <rprintfProgStr+0x10>
 52c:	07 c0       	rjmp	.+14     	; 0x53c <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
 52e:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
 532:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
 534:	21 96       	adiw	r28, 0x01	; 1
 536:	84 91       	lpm	r24, Z+
 538:	88 23       	and	r24, r24
 53a:	c9 f7       	brne	.-14     	; 0x52e <rprintfProgStr+0xc>
		rprintfChar(c);
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
 542:	8a e0       	ldi	r24, 0x0A	; 10
 544:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
}
 548:	08 95       	ret

0000054a <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 54a:	e8 2f       	mov	r30, r24
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	ef 70       	andi	r30, 0x0F	; 15
 550:	f0 70       	andi	r31, 0x00	; 0
 552:	ee 59       	subi	r30, 0x9E	; 158
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	e4 91       	lpm	r30, Z+
 558:	8e 2f       	mov	r24, r30
 55a:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
}
 55e:	08 95       	ret

00000560 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
 560:	1f 93       	push	r17
 562:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
 564:	82 95       	swap	r24
 566:	8f 70       	andi	r24, 0x0F	; 15
 568:	0e 94 a5 02 	call	0x54a	; 0x54a <rprintfu04>
	rprintfu04(data);
 56c:	81 2f       	mov	r24, r17
 56e:	0e 94 a5 02 	call	0x54a	; 0x54a <rprintfu04>
}
 572:	1f 91       	pop	r17
 574:	08 95       	ret

00000576 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
 576:	1f 93       	push	r17
 578:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
 57a:	89 2f       	mov	r24, r25
 57c:	0e 94 b0 02 	call	0x560	; 0x560 <rprintfu08>
	rprintfu08(data);
 580:	81 2f       	mov	r24, r17
 582:	0e 94 b0 02 	call	0x560	; 0x560 <rprintfu08>
}
 586:	1f 91       	pop	r17
 588:	08 95       	ret

0000058a <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	7b 01       	movw	r14, r22
 594:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
 596:	c8 01       	movw	r24, r16
 598:	aa 27       	eor	r26, r26
 59a:	bb 27       	eor	r27, r27
 59c:	0e 94 bb 02 	call	0x576	; 0x576 <rprintfu16>
	rprintfu16(data);
 5a0:	c7 01       	movw	r24, r14
 5a2:	0e 94 bb 02 	call	0x576	; 0x576 <rprintfu16>
}
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	08 95       	ret

000005b0 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
 5b0:	2f 92       	push	r2
 5b2:	3f 92       	push	r3
 5b4:	4f 92       	push	r4
 5b6:	5f 92       	push	r5
 5b8:	6f 92       	push	r6
 5ba:	7f 92       	push	r7
 5bc:	8f 92       	push	r8
 5be:	9f 92       	push	r9
 5c0:	af 92       	push	r10
 5c2:	bf 92       	push	r11
 5c4:	cf 92       	push	r12
 5c6:	df 92       	push	r13
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
 5d0:	df 93       	push	r29
 5d2:	cf 93       	push	r28
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	a3 97       	sbiw	r28, 0x23	; 35
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	cd bf       	out	0x3d, r28	; 61
 5e4:	6a a3       	std	Y+34, r22	; 0x22
 5e6:	24 2e       	mov	r2, r20
 5e8:	2b a3       	std	Y+35, r18	; 0x23
 5ea:	37 01       	movw	r6, r14
 5ec:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
 5ee:	44 23       	and	r20, r20
 5f0:	51 f0       	breq	.+20     	; 0x606 <rprintfNum+0x56>
 5f2:	17 ff       	sbrs	r17, 7
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <rprintfNum+0x56>
	{
		x = -n;
 5f6:	ee 24       	eor	r14, r14
 5f8:	ff 24       	eor	r15, r15
 5fa:	87 01       	movw	r16, r14
 5fc:	e6 18       	sub	r14, r6
 5fe:	f7 08       	sbc	r15, r7
 600:	08 09       	sbc	r16, r8
 602:	19 09       	sbc	r17, r9
 604:	02 c0       	rjmp	.+4      	; 0x60a <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
 606:	84 01       	movw	r16, r8
 608:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
 60a:	2a a1       	ldd	r18, Y+34	; 0x22
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	21 10       	cpse	r2, r1
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	29 1b       	sub	r18, r25
 616:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
 618:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
 61a:	a8 2e       	mov	r10, r24
 61c:	bb 24       	eor	r11, r11
 61e:	cc 24       	eor	r12, r12
 620:	dd 24       	eor	r13, r13
 622:	c8 01       	movw	r24, r16
 624:	b7 01       	movw	r22, r14
 626:	a6 01       	movw	r20, r12
 628:	95 01       	movw	r18, r10
 62a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
 62e:	fb 01       	movw	r30, r22
 630:	ef 70       	andi	r30, 0x0F	; 15
 632:	f0 70       	andi	r31, 0x00	; 0
 634:	ee 59       	subi	r30, 0x9E	; 158
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	64 91       	lpm	r22, Z+
 63a:	6f 8f       	std	Y+31, r22	; 0x1f
 63c:	c8 01       	movw	r24, r16
 63e:	b7 01       	movw	r22, r14
 640:	a6 01       	movw	r20, r12
 642:	95 01       	movw	r18, r10
 644:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
 648:	c9 01       	movw	r24, r18
 64a:	da 01       	movw	r26, r20
 64c:	7c 01       	movw	r14, r24
 64e:	8d 01       	movw	r16, r26
 650:	9e e1       	ldi	r25, 0x1E	; 30
 652:	49 2e       	mov	r4, r25
 654:	51 2c       	mov	r5, r1
 656:	4c 0e       	add	r4, r28
 658:	5d 1e       	adc	r5, r29
 65a:	39 a0       	ldd	r3, Y+33	; 0x21
 65c:	25 c0       	rjmp	.+74     	; 0x6a8 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
 65e:	e1 14       	cp	r14, r1
 660:	f1 04       	cpc	r15, r1
 662:	01 05       	cpc	r16, r1
 664:	11 05       	cpc	r17, r1
 666:	c9 f0       	breq	.+50     	; 0x69a <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
 668:	c8 01       	movw	r24, r16
 66a:	b7 01       	movw	r22, r14
 66c:	a6 01       	movw	r20, r12
 66e:	95 01       	movw	r18, r10
 670:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
 674:	fb 01       	movw	r30, r22
 676:	ef 70       	andi	r30, 0x0F	; 15
 678:	f0 70       	andi	r31, 0x00	; 0
 67a:	ee 59       	subi	r30, 0x9E	; 158
 67c:	ff 4f       	sbci	r31, 0xFF	; 255
 67e:	64 91       	lpm	r22, Z+
 680:	f2 01       	movw	r30, r4
 682:	60 83       	st	Z, r22
 684:	c8 01       	movw	r24, r16
 686:	b7 01       	movw	r22, r14
 688:	a6 01       	movw	r20, r12
 68a:	95 01       	movw	r18, r10
 68c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
 690:	c9 01       	movw	r24, r18
 692:	da 01       	movw	r26, r20
 694:	7c 01       	movw	r14, r24
 696:	8d 01       	movw	r16, r26
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
 69a:	2b a1       	ldd	r18, Y+35	; 0x23
 69c:	f2 01       	movw	r30, r4
 69e:	20 83       	st	Z, r18
 6a0:	3a 94       	dec	r3
 6a2:	08 94       	sec
 6a4:	41 08       	sbc	r4, r1
 6a6:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
 6a8:	33 20       	and	r3, r3
 6aa:	c9 f6       	brne	.-78     	; 0x65e <rprintfNum+0xae>
 6ac:	ce 01       	movw	r24, r28
 6ae:	4f 96       	adiw	r24, 0x1f	; 31
 6b0:	8c 01       	movw	r16, r24
 6b2:	e9 a1       	ldd	r30, Y+33	; 0x21
 6b4:	0e 1b       	sub	r16, r30
 6b6:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
 6b8:	22 20       	and	r2, r2
 6ba:	f1 f0       	breq	.+60     	; 0x6f8 <rprintfNum+0x148>
	{
		if(n < 0)
 6bc:	97 fe       	sbrs	r9, 7
 6be:	05 c0       	rjmp	.+10     	; 0x6ca <rprintfNum+0x11a>
		{
   			*--p = '-';
 6c0:	8d e2       	ldi	r24, 0x2D	; 45
 6c2:	f8 01       	movw	r30, r16
 6c4:	82 93       	st	-Z, r24
 6c6:	8f 01       	movw	r16, r30
 6c8:	17 c0       	rjmp	.+46     	; 0x6f8 <rprintfNum+0x148>
 6ca:	c8 01       	movw	r24, r16
 6cc:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
 6ce:	61 14       	cp	r6, r1
 6d0:	71 04       	cpc	r7, r1
 6d2:	81 04       	cpc	r8, r1
 6d4:	91 04       	cpc	r9, r1
 6d6:	19 f0       	breq	.+6      	; 0x6de <rprintfNum+0x12e>
		{
	   		*--p = '+';
 6d8:	8c 01       	movw	r16, r24
 6da:	8b e2       	ldi	r24, 0x2B	; 43
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
 6de:	8c 01       	movw	r16, r24
 6e0:	80 e2       	ldi	r24, 0x20	; 32
 6e2:	f8 01       	movw	r30, r16
 6e4:	80 83       	st	Z, r24
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
 6e8:	f8 01       	movw	r30, r16
 6ea:	81 91       	ld	r24, Z+
 6ec:	8f 01       	movw	r16, r30
 6ee:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
 6f2:	fa a1       	ldd	r31, Y+34	; 0x22
 6f4:	f1 50       	subi	r31, 0x01	; 1
 6f6:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
 6f8:	2a a1       	ldd	r18, Y+34	; 0x22
 6fa:	22 23       	and	r18, r18
 6fc:	a9 f7       	brne	.-22     	; 0x6e8 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
 6fe:	a3 96       	adiw	r28, 0x23	; 35
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
 70a:	cf 91       	pop	r28
 70c:	df 91       	pop	r29
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	ef 90       	pop	r14
 716:	df 90       	pop	r13
 718:	cf 90       	pop	r12
 71a:	bf 90       	pop	r11
 71c:	af 90       	pop	r10
 71e:	9f 90       	pop	r9
 720:	8f 90       	pop	r8
 722:	7f 90       	pop	r7
 724:	6f 90       	pop	r6
 726:	5f 90       	pop	r5
 728:	4f 90       	pop	r4
 72a:	3f 90       	pop	r3
 72c:	2f 90       	pop	r2
 72e:	08 95       	ret

00000730 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 730:	7f 92       	push	r7
 732:	8f 92       	push	r8
 734:	9f 92       	push	r9
 736:	af 92       	push	r10
 738:	bf 92       	push	r11
 73a:	cf 92       	push	r12
 73c:	df 92       	push	r13
 73e:	ef 92       	push	r14
 740:	ff 92       	push	r15
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	df 93       	push	r29
 748:	cf 93       	push	r28
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	78 88       	ldd	r7, Y+16	; 0x10
 750:	c9 88       	ldd	r12, Y+17	; 0x11
 752:	da 88       	ldd	r13, Y+18	; 0x12
 754:	53 e1       	ldi	r21, 0x13	; 19
 756:	e5 2e       	mov	r14, r21
 758:	f1 2c       	mov	r15, r1
 75a:	ec 0e       	add	r14, r28
 75c:	fd 1e       	adc	r15, r29
 75e:	14 c0       	rjmp	.+40     	; 0x788 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 760:	88 23       	and	r24, r24
 762:	81 f4       	brne	.+32     	; 0x784 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	cf 91       	pop	r28
 76a:	df 91       	pop	r29
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	df 90       	pop	r13
 776:	cf 90       	pop	r12
 778:	bf 90       	pop	r11
 77a:	af 90       	pop	r10
 77c:	9f 90       	pop	r9
 77e:	8f 90       	pop	r8
 780:	7f 90       	pop	r7
 782:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 784:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
 788:	96 01       	movw	r18, r12
 78a:	2f 5f       	subi	r18, 0xFF	; 255
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 78e:	77 20       	and	r7, r7
 790:	21 f0       	breq	.+8      	; 0x79a <rprintf1RamRom+0x6a>
 792:	f6 01       	movw	r30, r12
 794:	69 01       	movw	r12, r18
 796:	84 91       	lpm	r24, Z+
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <rprintf1RamRom+0x70>
 79a:	f6 01       	movw	r30, r12
 79c:	80 81       	ld	r24, Z
 79e:	69 01       	movw	r12, r18
 7a0:	85 32       	cpi	r24, 0x25	; 37
 7a2:	f1 f6       	brne	.-68     	; 0x760 <rprintf1RamRom+0x30>
 7a4:	2f 5f       	subi	r18, 0xFF	; 255
 7a6:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 7a8:	77 20       	and	r7, r7
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <rprintf1RamRom+0x84>
 7ac:	f6 01       	movw	r30, r12
 7ae:	69 01       	movw	r12, r18
 7b0:	84 91       	lpm	r24, Z+
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <rprintf1RamRom+0x8a>
 7b4:	f6 01       	movw	r30, r12
 7b6:	80 81       	ld	r24, Z
 7b8:	69 01       	movw	r12, r18
 7ba:	84 36       	cpi	r24, 0x64	; 100
 7bc:	29 f0       	breq	.+10     	; 0x7c8 <rprintf1RamRom+0x98>
 7be:	88 37       	cpi	r24, 0x78	; 120
 7c0:	81 f0       	breq	.+32     	; 0x7e2 <rprintf1RamRom+0xb2>
 7c2:	83 36       	cpi	r24, 0x63	; 99
 7c4:	f9 f6       	brne	.-66     	; 0x784 <rprintf1RamRom+0x54>
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <rprintf1RamRom+0xa4>
 7c8:	00 e1       	ldi	r16, 0x10	; 16
 7ca:	17 e2       	ldi	r17, 0x27	; 39
 7cc:	4a e0       	ldi	r20, 0x0A	; 10
 7ce:	a4 2e       	mov	r10, r20
 7d0:	b1 2c       	mov	r11, r1
 7d2:	0c c0       	rjmp	.+24     	; 0x7ec <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
 7d4:	f7 01       	movw	r30, r14
 7d6:	80 81       	ld	r24, Z
 7d8:	22 e0       	ldi	r18, 0x02	; 2
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	e2 0e       	add	r14, r18
 7de:	f3 1e       	adc	r15, r19
 7e0:	d1 cf       	rjmp	.-94     	; 0x784 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
 7e2:	00 e0       	ldi	r16, 0x00	; 0
 7e4:	10 e1       	ldi	r17, 0x10	; 16
 7e6:	30 e1       	ldi	r19, 0x10	; 16
 7e8:	a3 2e       	mov	r10, r19
 7ea:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 7ec:	22 e0       	ldi	r18, 0x02	; 2
 7ee:	82 2e       	mov	r8, r18
 7f0:	91 2c       	mov	r9, r1
 7f2:	8e 0c       	add	r8, r14
 7f4:	9f 1c       	adc	r9, r15
 7f6:	f7 01       	movw	r30, r14
 7f8:	e0 80       	ld	r14, Z
 7fa:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
 7fc:	84 36       	cpi	r24, 0x64	; 100
 7fe:	b1 f4       	brne	.+44     	; 0x82c <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
 800:	f7 fe       	sbrs	r15, 7
 802:	11 c0       	rjmp	.+34     	; 0x826 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
 804:	f0 94       	com	r15
 806:	e1 94       	neg	r14
 808:	f1 08       	sbc	r15, r1
 80a:	f3 94       	inc	r15
					rprintfChar('-');
 80c:	8d e2       	ldi	r24, 0x2D	; 45
 80e:	0e 94 42 02 	call	0x484	; 0x484 <rprintfChar>
 812:	09 c0       	rjmp	.+18     	; 0x826 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 814:	c8 01       	movw	r24, r16
 816:	6a e0       	ldi	r22, 0x0A	; 10
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodhi4>
 81e:	8b 01       	movw	r16, r22
 820:	62 30       	cpi	r22, 0x02	; 2
 822:	71 05       	cpc	r23, r1
 824:	18 f0       	brcs	.+6      	; 0x82c <rprintf1RamRom+0xfc>
 826:	e0 16       	cp	r14, r16
 828:	f1 06       	cpc	r15, r17
 82a:	a0 f3       	brcs	.-24     	; 0x814 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 82c:	c7 01       	movw	r24, r14
 82e:	b8 01       	movw	r22, r16
 830:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodhi4>
 834:	86 2f       	mov	r24, r22
 836:	0e 94 a5 02 	call	0x54a	; 0x54a <rprintfu04>
				u_val %= div_val;
 83a:	c7 01       	movw	r24, r14
 83c:	b8 01       	movw	r22, r16
 83e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodhi4>
 842:	7c 01       	movw	r14, r24
				div_val /= base;
 844:	c8 01       	movw	r24, r16
 846:	b5 01       	movw	r22, r10
 848:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodhi4>
 84c:	8b 01       	movw	r16, r22
			} while (div_val);
 84e:	61 15       	cp	r22, r1
 850:	71 05       	cpc	r23, r1
 852:	61 f7       	brne	.-40     	; 0x82c <rprintf1RamRom+0xfc>
 854:	74 01       	movw	r14, r8
 856:	98 cf       	rjmp	.-208    	; 0x788 <rprintf1RamRom+0x58>

00000858 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
 858:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 85a:	8f b7       	in	r24, 0x3f	; 63
 85c:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
 85e:	71 83       	std	Z+1, r23	; 0x01
 860:	60 83       	st	Z, r22
	buffer->size = size;
 862:	53 83       	std	Z+3, r21	; 0x03
 864:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
 866:	17 82       	std	Z+7, r1	; 0x07
 868:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
 86a:	15 82       	std	Z+5, r1	; 0x05
 86c:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 86e:	8f bf       	out	0x3f, r24	; 63
}
 870:	08 95       	ret

00000872 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 872:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 874:	4f b7       	in	r20, 0x3f	; 63
 876:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 878:	14 96       	adiw	r26, 0x04	; 4
 87a:	8d 91       	ld	r24, X+
 87c:	9c 91       	ld	r25, X
 87e:	15 97       	sbiw	r26, 0x05	; 5
 880:	89 2b       	or	r24, r25
 882:	11 f4       	brne	.+4      	; 0x888 <bufferGetFromFront+0x16>
 884:	e0 e0       	ldi	r30, 0x00	; 0
 886:	25 c0       	rjmp	.+74     	; 0x8d2 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 888:	16 96       	adiw	r26, 0x06	; 6
 88a:	8d 91       	ld	r24, X+
 88c:	9c 91       	ld	r25, X
 88e:	17 97       	sbiw	r26, 0x07	; 7
 890:	ed 91       	ld	r30, X+
 892:	fc 91       	ld	r31, X
 894:	11 97       	sbiw	r26, 0x01	; 1
 896:	e8 0f       	add	r30, r24
 898:	f9 1f       	adc	r31, r25
 89a:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
 89c:	01 96       	adiw	r24, 0x01	; 1
 89e:	17 96       	adiw	r26, 0x07	; 7
 8a0:	9c 93       	st	X, r25
 8a2:	8e 93       	st	-X, r24
 8a4:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
 8a6:	12 96       	adiw	r26, 0x02	; 2
 8a8:	2d 91       	ld	r18, X+
 8aa:	3c 91       	ld	r19, X
 8ac:	13 97       	sbiw	r26, 0x03	; 3
 8ae:	82 17       	cp	r24, r18
 8b0:	93 07       	cpc	r25, r19
 8b2:	30 f0       	brcs	.+12     	; 0x8c0 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
 8b4:	82 1b       	sub	r24, r18
 8b6:	93 0b       	sbc	r25, r19
 8b8:	17 96       	adiw	r26, 0x07	; 7
 8ba:	9c 93       	st	X, r25
 8bc:	8e 93       	st	-X, r24
 8be:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
 8c0:	14 96       	adiw	r26, 0x04	; 4
 8c2:	8d 91       	ld	r24, X+
 8c4:	9c 91       	ld	r25, X
 8c6:	15 97       	sbiw	r26, 0x05	; 5
 8c8:	01 97       	sbiw	r24, 0x01	; 1
 8ca:	15 96       	adiw	r26, 0x05	; 5
 8cc:	9c 93       	st	X, r25
 8ce:	8e 93       	st	-X, r24
 8d0:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
 8d2:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
 8d4:	8e 2f       	mov	r24, r30
 8d6:	08 95       	ret

000008d8 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
 8d8:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 8da:	4f b7       	in	r20, 0x3f	; 63
 8dc:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
 8de:	84 81       	ldd	r24, Z+4	; 0x04
 8e0:	95 81       	ldd	r25, Z+5	; 0x05
 8e2:	68 17       	cp	r22, r24
 8e4:	79 07       	cpc	r23, r25
 8e6:	b0 f4       	brcc	.+44     	; 0x914 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
 8e8:	86 81       	ldd	r24, Z+6	; 0x06
 8ea:	97 81       	ldd	r25, Z+7	; 0x07
 8ec:	86 0f       	add	r24, r22
 8ee:	97 1f       	adc	r25, r23
 8f0:	97 83       	std	Z+7, r25	; 0x07
 8f2:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
 8f4:	22 81       	ldd	r18, Z+2	; 0x02
 8f6:	33 81       	ldd	r19, Z+3	; 0x03
 8f8:	82 17       	cp	r24, r18
 8fa:	93 07       	cpc	r25, r19
 8fc:	20 f0       	brcs	.+8      	; 0x906 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
 8fe:	82 1b       	sub	r24, r18
 900:	93 0b       	sbc	r25, r19
 902:	97 83       	std	Z+7, r25	; 0x07
 904:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
 906:	84 81       	ldd	r24, Z+4	; 0x04
 908:	95 81       	ldd	r25, Z+5	; 0x05
 90a:	86 1b       	sub	r24, r22
 90c:	97 0b       	sbc	r25, r23
 90e:	95 83       	std	Z+5, r25	; 0x05
 910:	84 83       	std	Z+4, r24	; 0x04
 912:	02 c0       	rjmp	.+4      	; 0x918 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
 914:	15 82       	std	Z+5, r1	; 0x05
 916:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
 918:	4f bf       	out	0x3f, r20	; 63
}
 91a:	08 95       	ret

0000091c <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
 91c:	fc 01       	movw	r30, r24
 91e:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
 920:	2f b7       	in	r18, 0x3f	; 63
 922:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
 924:	2f bf       	out	0x3f, r18	; 63
 926:	26 81       	ldd	r18, Z+6	; 0x06
 928:	37 81       	ldd	r19, Z+7	; 0x07
 92a:	62 81       	ldd	r22, Z+2	; 0x02
 92c:	73 81       	ldd	r23, Z+3	; 0x03
 92e:	82 0f       	add	r24, r18
 930:	93 1f       	adc	r25, r19
 932:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodhi4>
 936:	01 90       	ld	r0, Z+
 938:	f0 81       	ld	r31, Z
 93a:	e0 2d       	mov	r30, r0
 93c:	e8 0f       	add	r30, r24
 93e:	f9 1f       	adc	r31, r25
	return data;
}
 940:	80 81       	ld	r24, Z
 942:	08 95       	ret

00000944 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 944:	1f 93       	push	r17
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	ec 01       	movw	r28, r24
 94c:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
 94e:	4f b7       	in	r20, 0x3f	; 63
 950:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 952:	2c 81       	ldd	r18, Y+4	; 0x04
 954:	3d 81       	ldd	r19, Y+5	; 0x05
 956:	6a 81       	ldd	r22, Y+2	; 0x02
 958:	7b 81       	ldd	r23, Y+3	; 0x03
 95a:	26 17       	cp	r18, r22
 95c:	37 07       	cpc	r19, r23
 95e:	98 f4       	brcc	.+38     	; 0x986 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 960:	8e 81       	ldd	r24, Y+6	; 0x06
 962:	9f 81       	ldd	r25, Y+7	; 0x07
 964:	82 0f       	add	r24, r18
 966:	93 1f       	adc	r25, r19
 968:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodhi4>
 96c:	e8 81       	ld	r30, Y
 96e:	f9 81       	ldd	r31, Y+1	; 0x01
 970:	e8 0f       	add	r30, r24
 972:	f9 1f       	adc	r31, r25
 974:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
 976:	8c 81       	ldd	r24, Y+4	; 0x04
 978:	9d 81       	ldd	r25, Y+5	; 0x05
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	9d 83       	std	Y+5, r25	; 0x05
 97e:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 980:	4f bf       	out	0x3f, r20	; 63
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	02 c0       	rjmp	.+4      	; 0x98a <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
 986:	4f bf       	out	0x3f, r20	; 63
 988:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
 98a:	df 91       	pop	r29
 98c:	cf 91       	pop	r28
 98e:	1f 91       	pop	r17
 990:	08 95       	ret

00000992 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 992:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 994:	8f b7       	in	r24, 0x3f	; 63
 996:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
 998:	8f bf       	out	0x3f, r24	; 63
 99a:	22 81       	ldd	r18, Z+2	; 0x02
 99c:	33 81       	ldd	r19, Z+3	; 0x03
 99e:	84 81       	ldd	r24, Z+4	; 0x04
 9a0:	95 81       	ldd	r25, Z+5	; 0x05
 9a2:	28 1b       	sub	r18, r24
 9a4:	39 0b       	sbc	r19, r25
	return bytesleft;
}
 9a6:	c9 01       	movw	r24, r18
 9a8:	08 95       	ret

000009aa <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
 9aa:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 9ac:	8f b7       	in	r24, 0x3f	; 63
 9ae:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
 9b0:	15 82       	std	Z+5, r1	; 0x05
 9b2:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 9b4:	8f bf       	out	0x3f, r24	; 63
}
 9b6:	08 95       	ret

000009b8 <__udivmodhi4>:
 9b8:	aa 1b       	sub	r26, r26
 9ba:	bb 1b       	sub	r27, r27
 9bc:	51 e1       	ldi	r21, 0x11	; 17
 9be:	07 c0       	rjmp	.+14     	; 0x9ce <__udivmodhi4_ep>

000009c0 <__udivmodhi4_loop>:
 9c0:	aa 1f       	adc	r26, r26
 9c2:	bb 1f       	adc	r27, r27
 9c4:	a6 17       	cp	r26, r22
 9c6:	b7 07       	cpc	r27, r23
 9c8:	10 f0       	brcs	.+4      	; 0x9ce <__udivmodhi4_ep>
 9ca:	a6 1b       	sub	r26, r22
 9cc:	b7 0b       	sbc	r27, r23

000009ce <__udivmodhi4_ep>:
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	5a 95       	dec	r21
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <__udivmodhi4_loop>
 9d6:	80 95       	com	r24
 9d8:	90 95       	com	r25
 9da:	bc 01       	movw	r22, r24
 9dc:	cd 01       	movw	r24, r26
 9de:	08 95       	ret

000009e0 <__udivmodsi4>:
 9e0:	a1 e2       	ldi	r26, 0x21	; 33
 9e2:	1a 2e       	mov	r1, r26
 9e4:	aa 1b       	sub	r26, r26
 9e6:	bb 1b       	sub	r27, r27
 9e8:	fd 01       	movw	r30, r26
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__udivmodsi4_ep>

000009ec <__udivmodsi4_loop>:
 9ec:	aa 1f       	adc	r26, r26
 9ee:	bb 1f       	adc	r27, r27
 9f0:	ee 1f       	adc	r30, r30
 9f2:	ff 1f       	adc	r31, r31
 9f4:	a2 17       	cp	r26, r18
 9f6:	b3 07       	cpc	r27, r19
 9f8:	e4 07       	cpc	r30, r20
 9fa:	f5 07       	cpc	r31, r21
 9fc:	20 f0       	brcs	.+8      	; 0xa06 <__udivmodsi4_ep>
 9fe:	a2 1b       	sub	r26, r18
 a00:	b3 0b       	sbc	r27, r19
 a02:	e4 0b       	sbc	r30, r20
 a04:	f5 0b       	sbc	r31, r21

00000a06 <__udivmodsi4_ep>:
 a06:	66 1f       	adc	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	1a 94       	dec	r1
 a10:	69 f7       	brne	.-38     	; 0x9ec <__udivmodsi4_loop>
 a12:	60 95       	com	r22
 a14:	70 95       	com	r23
 a16:	80 95       	com	r24
 a18:	90 95       	com	r25
 a1a:	9b 01       	movw	r18, r22
 a1c:	ac 01       	movw	r20, r24
 a1e:	bd 01       	movw	r22, r26
 a20:	cf 01       	movw	r24, r30
 a22:	08 95       	ret

00000a24 <_exit>:
 a24:	f8 94       	cli

00000a26 <__stop_program>:
 a26:	ff cf       	rjmp	.-2      	; 0xa26 <__stop_program>
