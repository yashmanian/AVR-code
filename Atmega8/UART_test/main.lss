
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000099  00800060  00800060  00000ca0  2**0
                  ALLOC
  2 .debug_aranges 000000c0  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000004ec  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000015f8  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000939  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000010ad  00000000  00000000  0000317d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000460  00000000  00000000  0000422c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000651  00000000  00000000  0000468c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d23  00000000  00000000  00004cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
   2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	b6 c1       	rjmp	.+876    	; 0x384 <__vector_11>
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	f7 c1       	rjmp	.+1006   	; 0x40a <__vector_13>
  1c:	67 c1       	rjmp	.+718    	; 0x2ec <__vector_14>
  1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>

00000026 <__c.1538>:
  26:	25 63 0a 0d 00                                      %c...

0000002b <__c.1536>:
  2b:	72 69 67 68 74 0a 00                                right..

00000032 <__c.1534>:
  32:	25 63 0a 0d 00                                      %c...

00000037 <__c.1532>:
  37:	6c 65 66 74 0a 00                                   left..

0000003d <__c.1530>:
  3d:	25 63 0a 0d 00                                      %c...

00000042 <__c.1528>:
  42:	72 65 76 65 72 73 65 0a 00                          reverse..

0000004b <__c.1526>:
  4b:	25 63 0a 0d 00                                      %c...

00000050 <__c.1524>:
  50:	66 6f 72 77 61 72 64 0a 00                          forward..

00000059 <HexChars>:
  59:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
  69:	00                                                  .

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d4 e0       	ldi	r29, 0x04	; 4
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3f       	cpi	r26, 0xF9	; 249
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	14 d0       	rcall	.+40     	; 0xb0 <main>
  88:	cf c5       	rjmp	.+2974   	; 0xc28 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <configure_ports>:

//************CONFIGURE PORTS************
//configure ports for input or output - specific to ATmega8
void configure_ports(void)
	{
	DDRC = 0x00;  //configure all C ports for input
  8c:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00; //make sure pull-up resistors are turned off
  8e:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF;  //configure all D ports for output
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xC7;  //configure B ports 0, 1, 2, 6, 7 for output (google search '0b11000111 to hex')
  94:	87 ec       	ldi	r24, 0xC7	; 199
  96:	87 bb       	out	0x17, r24	; 23
	}
  98:	08 95       	ret

0000009a <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles*16;
	while(cycles > 0)
		cycles--;
	}
  9a:	08 95       	ret

0000009c <LED_on>:
//*********SIMPLIFIED FUNCTIONS**********
//functions to make coding easier for a beginner
//but could cause port mixup confusion for intermediate users
void LED_on(void)
	{
	PORT_OFF(PORTD, 4);//turn LED on
  9c:	94 98       	cbi	0x12, 4	; 18
	}
  9e:	08 95       	ret

000000a0 <LED_off>:
void LED_off(void)
	{
	PORT_ON(PORTD, 4);//turn LED off
  a0:	94 9a       	sbi	0x12, 4	; 18
	}
  a2:	08 95       	ret

000000a4 <servo_left>:
void servo_left(signed long int speed)
	{
	PORT_ON(PORTD, 2);
  a4:	92 9a       	sbi	0x12, 2	; 18
	delay_cycles(speed);
	PORT_OFF(PORTD, 2);//keep off
  a6:	92 98       	cbi	0x12, 2	; 18
	delay_cycles(200);
	}
  a8:	08 95       	ret

000000aa <servo_right>:
void servo_right(signed long int speed)
	{
	PORT_ON(PORTD, 3);
  aa:	93 9a       	sbi	0x12, 3	; 18
	delay_cycles(speed);		
	PORT_OFF(PORTD, 3);//keep off
  ac:	93 98       	cbi	0x12, 3	; 18
	delay_cycles(200);
	}
  ae:	08 95       	ret

000000b0 <main>:
#include "global.h"
#include <util/delay.h>
#include "SOR_Utils.h"

int main()
{
  b0:	2f 92       	push	r2
  b2:	3f 92       	push	r3
  b4:	4f 92       	push	r4
  b6:	5f 92       	push	r5
  b8:	6f 92       	push	r6
  ba:	7f 92       	push	r7
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	uartInit();
  d2:	1d d2       	rcall	.+1082   	; 0x50e <uartInit>
	uartSetBaudRate(9600);
  d4:	60 e8       	ldi	r22, 0x80	; 128
  d6:	75 e2       	ldi	r23, 0x25	; 37
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	1b d1       	rcall	.+566    	; 0x314 <uartSetBaudRate>
	rprintfInit(uartSendByte);
  de:	8a ea       	ldi	r24, 0xAA	; 170
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	2c d2       	rcall	.+1112   	; 0x53c <rprintfInit>
		
		char data=uartGetByte();
		
		if(data == 'w')
		{
			rprintf("forward\n");
  e4:	11 e0       	ldi	r17, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	c0 e9       	ldi	r28, 0x90	; 144
  e8:	d1 e0       	ldi	r29, 0x01	; 1
			
		}
		else if(data == 'd')
		{
			rprintf("right\n");
			rprintf("%c\n\r",data);
  ea:	64 e6       	ldi	r22, 0x64	; 100
  ec:	26 2e       	mov	r2, r22
  ee:	31 2c       	mov	r3, r1
			rprintf("%c\n\r",data);
			_delay_ms(20);		
		}
		else if(data == 'a')
		{
			rprintf("left\n");
  f0:	57 e3       	ldi	r21, 0x37	; 55
  f2:	45 2e       	mov	r4, r21
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	55 2e       	mov	r5, r21
			rprintf("%c\n\r",data);
  f8:	42 e3       	ldi	r20, 0x32	; 50
  fa:	64 2e       	mov	r6, r20
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	74 2e       	mov	r7, r20
 100:	31 e6       	ldi	r19, 0x61	; 97
 102:	83 2e       	mov	r8, r19
 104:	91 2c       	mov	r9, r1
			rprintf("%c\n\r",data);
			_delay_ms(20);
		}
		else if(data == 's')
		{
			rprintf("reverse\n");
 106:	22 e4       	ldi	r18, 0x42	; 66
 108:	a2 2e       	mov	r10, r18
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	b2 2e       	mov	r11, r18
			rprintf("%c\n\r",data);
 10e:	9d e3       	ldi	r25, 0x3D	; 61
 110:	c9 2e       	mov	r12, r25
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	d9 2e       	mov	r13, r25
 116:	83 e7       	ldi	r24, 0x73	; 115
 118:	e8 2e       	mov	r14, r24
 11a:	f1 2c       	mov	r15, r1
	uartSetBaudRate(9600);
	rprintfInit(uartSendByte);
	while(1)
	{
		
		char data=uartGetByte();
 11c:	d4 d1       	rcall	.+936    	; 0x4c6 <uartGetByte>
		
		if(data == 'w')
 11e:	87 37       	cpi	r24, 0x77	; 119
 120:	61 f5       	brne	.+88     	; 0x17a <main+0xca>
		{
			rprintf("forward\n");
 122:	00 d0       	rcall	.+0      	; 0x124 <main+0x74>
 124:	0f 92       	push	r0
 126:	ad b7       	in	r26, 0x3d	; 61
 128:	be b7       	in	r27, 0x3e	; 62
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	1c 93       	st	X, r17
 12e:	11 97       	sbiw	r26, 0x01	; 1
 130:	e0 e5       	ldi	r30, 0x50	; 80
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	13 96       	adiw	r26, 0x03	; 3
 136:	fc 93       	st	X, r31
 138:	ee 93       	st	-X, r30
 13a:	12 97       	sbiw	r26, 0x02	; 2
 13c:	4a d3       	rcall	.+1684   	; 0x7d2 <rprintf1RamRom>
			rprintf("%c\n\r",data);
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x90>
 140:	ed b7       	in	r30, 0x3d	; 61
 142:	fe b7       	in	r31, 0x3e	; 62
 144:	31 96       	adiw	r30, 0x01	; 1
 146:	ad b7       	in	r26, 0x3d	; 61
 148:	be b7       	in	r27, 0x3e	; 62
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	1c 93       	st	X, r17
 14e:	8b e4       	ldi	r24, 0x4B	; 75
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	92 83       	std	Z+2, r25	; 0x02
 154:	81 83       	std	Z+1, r24	; 0x01
 156:	a7 e7       	ldi	r26, 0x77	; 119
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	b4 83       	std	Z+4, r27	; 0x04
 15c:	a3 83       	std	Z+3, r26	; 0x03
 15e:	39 d3       	rcall	.+1650   	; 0x7d2 <rprintf1RamRom>
 160:	88 ec       	ldi	r24, 0xC8	; 200
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	fe 01       	movw	r30, r28
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0xc0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 176:	d9 f7       	brne	.-10     	; 0x16e <main+0xbe>
 178:	d1 cf       	rjmp	.-94     	; 0x11c <main+0x6c>
			_delay_ms(20);
		}
		else if(data == 's')
 17a:	83 37       	cpi	r24, 0x73	; 115
 17c:	11 f5       	brne	.+68     	; 0x1c2 <main+0x112>
		{
			rprintf("reverse\n");
 17e:	00 d0       	rcall	.+0      	; 0x180 <main+0xd0>
 180:	0f 92       	push	r0
 182:	ed b7       	in	r30, 0x3d	; 61
 184:	fe b7       	in	r31, 0x3e	; 62
 186:	11 83       	std	Z+1, r17	; 0x01
 188:	b3 82       	std	Z+3, r11	; 0x03
 18a:	a2 82       	std	Z+2, r10	; 0x02
 18c:	22 d3       	rcall	.+1604   	; 0x7d2 <rprintf1RamRom>
			rprintf("%c\n\r",data);
 18e:	00 d0       	rcall	.+0      	; 0x190 <main+0xe0>
 190:	ed b7       	in	r30, 0x3d	; 61
 192:	fe b7       	in	r31, 0x3e	; 62
 194:	31 96       	adiw	r30, 0x01	; 1
 196:	ad b7       	in	r26, 0x3d	; 61
 198:	be b7       	in	r27, 0x3e	; 62
 19a:	11 96       	adiw	r26, 0x01	; 1
 19c:	1c 93       	st	X, r17
 19e:	d2 82       	std	Z+2, r13	; 0x02
 1a0:	c1 82       	std	Z+1, r12	; 0x01
 1a2:	f4 82       	std	Z+4, r15	; 0x04
 1a4:	e3 82       	std	Z+3, r14	; 0x03
 1a6:	15 d3       	rcall	.+1578   	; 0x7d2 <rprintf1RamRom>
 1a8:	88 ec       	ldi	r24, 0xC8	; 200
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	fe 01       	movw	r30, r28
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <main+0x106>
 1c0:	ad cf       	rjmp	.-166    	; 0x11c <main+0x6c>
			_delay_ms(20);		
		}
		else if(data == 'a')
 1c2:	81 36       	cpi	r24, 0x61	; 97
 1c4:	11 f5       	brne	.+68     	; 0x20a <main+0x15a>
		{
			rprintf("left\n");
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <main+0x118>
 1c8:	0f 92       	push	r0
 1ca:	ed b7       	in	r30, 0x3d	; 61
 1cc:	fe b7       	in	r31, 0x3e	; 62
 1ce:	11 83       	std	Z+1, r17	; 0x01
 1d0:	53 82       	std	Z+3, r5	; 0x03
 1d2:	42 82       	std	Z+2, r4	; 0x02
 1d4:	fe d2       	rcall	.+1532   	; 0x7d2 <rprintf1RamRom>
			rprintf("%c\n\r",data);
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0x128>
 1d8:	ed b7       	in	r30, 0x3d	; 61
 1da:	fe b7       	in	r31, 0x3e	; 62
 1dc:	31 96       	adiw	r30, 0x01	; 1
 1de:	ad b7       	in	r26, 0x3d	; 61
 1e0:	be b7       	in	r27, 0x3e	; 62
 1e2:	11 96       	adiw	r26, 0x01	; 1
 1e4:	1c 93       	st	X, r17
 1e6:	72 82       	std	Z+2, r7	; 0x02
 1e8:	61 82       	std	Z+1, r6	; 0x01
 1ea:	94 82       	std	Z+4, r9	; 0x04
 1ec:	83 82       	std	Z+3, r8	; 0x03
 1ee:	f1 d2       	rcall	.+1506   	; 0x7d2 <rprintf1RamRom>
 1f0:	88 ec       	ldi	r24, 0xC8	; 200
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	fe 01       	movw	r30, r28
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x150>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 204:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 206:	d9 f7       	brne	.-10     	; 0x1fe <main+0x14e>
 208:	89 cf       	rjmp	.-238    	; 0x11c <main+0x6c>
			_delay_ms(20);
			
		}
		else if(data == 'd')
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	31 f5       	brne	.+76     	; 0x25a <main+0x1aa>
		{
			rprintf("right\n");
 20e:	00 d0       	rcall	.+0      	; 0x210 <main+0x160>
 210:	0f 92       	push	r0
 212:	ed b7       	in	r30, 0x3d	; 61
 214:	fe b7       	in	r31, 0x3e	; 62
 216:	11 83       	std	Z+1, r17	; 0x01
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	93 83       	std	Z+3, r25	; 0x03
 21e:	82 83       	std	Z+2, r24	; 0x02
 220:	d8 d2       	rcall	.+1456   	; 0x7d2 <rprintf1RamRom>
			rprintf("%c\n\r",data);
 222:	00 d0       	rcall	.+0      	; 0x224 <main+0x174>
 224:	ed b7       	in	r30, 0x3d	; 61
 226:	fe b7       	in	r31, 0x3e	; 62
 228:	31 96       	adiw	r30, 0x01	; 1
 22a:	ad b7       	in	r26, 0x3d	; 61
 22c:	be b7       	in	r27, 0x3e	; 62
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	1c 93       	st	X, r17
 232:	86 e2       	ldi	r24, 0x26	; 38
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	92 83       	std	Z+2, r25	; 0x02
 238:	81 83       	std	Z+1, r24	; 0x01
 23a:	34 82       	std	Z+4, r3	; 0x04
 23c:	23 82       	std	Z+3, r2	; 0x03
 23e:	c9 d2       	rcall	.+1426   	; 0x7d2 <rprintf1RamRom>
 240:	88 ec       	ldi	r24, 0xC8	; 200
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	fe 01       	movw	r30, r28
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x1a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 256:	d9 f7       	brne	.-10     	; 0x24e <main+0x19e>
 258:	61 cf       	rjmp	.-318    	; 0x11c <main+0x6c>
			_delay_ms(20);
		}
		else
		{
			PORTB=0b00000000;
 25a:	18 ba       	out	0x18, r1	; 24
 25c:	5f cf       	rjmp	.-322    	; 0x11c <main+0x6c>

0000025e <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
 25e:	37 9a       	sbi	0x06, 7	; 6
	cbi(ADCSR, ADFR);				// default to single sample convert mode
 260:	35 98       	cbi	0x06, 5	; 6
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 262:	86 b1       	in	r24, 0x06	; 6
 264:	88 7f       	andi	r24, 0xF8	; 248
 266:	86 60       	ori	r24, 0x06	; 6
 268:	86 b9       	out	0x06, r24	; 6
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 26a:	87 b1       	in	r24, 0x07	; 7
 26c:	8f 73       	andi	r24, 0x3F	; 63
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	87 b9       	out	0x07, r24	; 7
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
 272:	3d 98       	cbi	0x07, 5	; 7

	sbi(ADCSR, ADIE);				// enable ADC interrupts
 274:	33 9a       	sbi	0x06, 3	; 6

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
 276:	10 92 e4 00 	sts	0x00E4, r1
	sei();							// turn on interrupts (if not already on)
 27a:	78 94       	sei
}
 27c:	08 95       	ret

0000027e <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
 27e:	33 98       	cbi	0x06, 3	; 6
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
 280:	37 98       	cbi	0x06, 7	; 6
}
 282:	08 95       	ret

00000284 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 284:	96 b1       	in	r25, 0x06	; 6
 286:	98 7f       	andi	r25, 0xF8	; 248
 288:	98 2b       	or	r25, r24
 28a:	96 b9       	out	0x06, r25	; 6
}
 28c:	08 95       	ret

0000028e <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 28e:	97 b1       	in	r25, 0x07	; 7
 290:	82 95       	swap	r24
 292:	88 0f       	add	r24, r24
 294:	88 0f       	add	r24, r24
 296:	80 7c       	andi	r24, 0xC0	; 192
 298:	9f 73       	andi	r25, 0x3F	; 63
 29a:	98 2b       	or	r25, r24
 29c:	97 b9       	out	0x07, r25	; 7
}
 29e:	08 95       	ret

000002a0 <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 2a0:	97 b1       	in	r25, 0x07	; 7
 2a2:	8f 71       	andi	r24, 0x1F	; 31
 2a4:	90 7e       	andi	r25, 0xE0	; 224
 2a6:	89 2b       	or	r24, r25
 2a8:	87 b9       	out	0x07, r24	; 7
}
 2aa:	08 95       	ret

000002ac <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
 2ac:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);	// start conversion
 2ae:	36 9a       	sbi	0x06, 6	; 6
}
 2b0:	08 95       	ret

000002b2 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
 2b2:	86 b1       	in	r24, 0x06	; 6
}
 2b4:	80 74       	andi	r24, 0x40	; 64
 2b6:	08 95       	ret

000002b8 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 2b8:	10 92 e4 00 	sts	0x00E4, r1
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 2bc:	97 b1       	in	r25, 0x07	; 7
 2be:	8f 71       	andi	r24, 0x1F	; 31
 2c0:	90 7e       	andi	r25, 0xE0	; 224
 2c2:	89 2b       	or	r24, r25
 2c4:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 2c6:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
 2c8:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 2ca:	36 99       	sbic	0x06, 6	; 6
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
 2ce:	24 b1       	in	r18, 0x04	; 4
 2d0:	45 b1       	in	r20, 0x05	; 5
 2d2:	94 2f       	mov	r25, r20
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	28 2b       	or	r18, r24
 2da:	39 2b       	or	r19, r25
}
 2dc:	c9 01       	movw	r24, r18
 2de:	08 95       	ret

000002e0 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
 2e0:	eb df       	rcall	.-42     	; 0x2b8 <a2dConvert10bit>
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
}
 2ea:	08 95       	ret

000002ec <__vector_14>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	80 93 e4 00 	sts	0x00E4, r24
}
 2fe:	8f 91       	pop	r24
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <uartSetRxHandler>:

// redirects received data to a user function
void uartSetRxHandler(void (*rx_func)(unsigned char c))
{
	// set the receive interrupt to run the supplied user function
	UartRxFunc = rx_func;
 30a:	90 93 e1 00 	sts	0x00E1, r25
 30e:	80 93 e0 00 	sts	0x00E0, r24
}
 312:	08 95       	ret

00000314 <uartSetBaudRate>:

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 314:	9b 01       	movw	r18, r22
 316:	ac 01       	movw	r20, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 318:	60 58       	subi	r22, 0x80	; 128
 31a:	7b 47       	sbci	r23, 0x7B	; 123
 31c:	81 4e       	sbci	r24, 0xE1	; 225
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	f3 e0       	ldi	r31, 0x03	; 3
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	fa 95       	dec	r31
 32c:	d1 f7       	brne	.-12     	; 0x322 <uartSetBaudRate+0xe>
 32e:	e4 e0       	ldi	r30, 0x04	; 4
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	44 1f       	adc	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	ea 95       	dec	r30
 33a:	d1 f7       	brne	.-12     	; 0x330 <uartSetBaudRate+0x1c>
 33c:	53 d4       	rcall	.+2214   	; 0xbe4 <__udivmodsi4>
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	30 40       	sbci	r19, 0x00	; 0
	outb(UBRRL, bauddiv);
 342:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 344:	30 bd       	out	0x20, r19	; 32
	#endif
}
 346:	08 95       	ret

00000348 <uartGetRxBuffer>:
// returns the receive buffer structure 
cBuffer* uartGetRxBuffer(void)
{
	// return rx buffer pointer
	return &uartRxBuffer;
}
 348:	86 ee       	ldi	r24, 0xE6	; 230
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	08 95       	ret

0000034e <uartGetTxBuffer>:
// returns the transmit buffer structure 
cBuffer* uartGetTxBuffer(void)
{
	// return tx buffer pointer
	return &uartTxBuffer;
}
 34e:	8f ee       	ldi	r24, 0xEF	; 239
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	08 95       	ret

00000354 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
 354:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 356:	80 91 e5 00 	lds	r24, 0x00E5
 35a:	88 23       	and	r24, r24
 35c:	e1 f3       	breq	.-8      	; 0x356 <uartSendByte+0x2>
	// send byte
	outb(UDR, txData);
 35e:	9c b9       	out	0x0c, r25	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 360:	10 92 e5 00 	sts	0x00E5, r1
}
 364:	08 95       	ret

00000366 <uartFlushReceiveBuffer>:
void uartFlushReceiveBuffer(void)
{
	// flush all data from receive buffer
	//bufferFlush(&uartRxBuffer);
	// same effect as above
	uartRxBuffer.datalength = 0;
 366:	10 92 eb 00 	sts	0x00EB, r1
 36a:	10 92 ea 00 	sts	0x00EA, r1
}
 36e:	08 95       	ret

00000370 <uartReceiveBufferIsEmpty>:

// return true if uart receive buffer is empty
u08 uartReceiveBufferIsEmpty(void)
{
	if(uartRxBuffer.datalength == 0)
 370:	80 91 ea 00 	lds	r24, 0x00EA
 374:	90 91 eb 00 	lds	r25, 0x00EB
 378:	89 2b       	or	r24, r25
 37a:	11 f0       	breq	.+4      	; 0x380 <uartReceiveBufferIsEmpty+0x10>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		return FALSE;
	}
}
 382:	08 95       	ret

00000384 <__vector_11>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 3a6:	6c b1       	in	r22, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 3a8:	80 91 e0 00 	lds	r24, 0x00E0
 3ac:	90 91 e1 00 	lds	r25, 0x00E1
 3b0:	89 2b       	or	r24, r25
 3b2:	39 f0       	breq	.+14     	; 0x3c2 <__vector_11+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 3b4:	e0 91 e0 00 	lds	r30, 0x00E0
 3b8:	f0 91 e1 00 	lds	r31, 0x00E1
 3bc:	86 2f       	mov	r24, r22
 3be:	09 95       	icall
 3c0:	0e c0       	rjmp	.+28     	; 0x3de <__vector_11+0x5a>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 3c2:	86 ee       	ldi	r24, 0xE6	; 230
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	07 d3       	rcall	.+1550   	; 0x9d6 <bufferAddToEnd>
 3c8:	88 23       	and	r24, r24
 3ca:	49 f4       	brne	.+18     	; 0x3de <__vector_11+0x5a>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 3cc:	80 91 f7 00 	lds	r24, 0x00F7
 3d0:	90 91 f8 00 	lds	r25, 0x00F8
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 f8 00 	sts	0x00F8, r25
 3da:	80 93 f7 00 	sts	0x00F7, r24
		}
	}
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <uartAddToTxBuffer>:
	}
}

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
 400:	68 2f       	mov	r22, r24
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
 402:	8f ee       	ldi	r24, 0xEF	; 239
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	e7 d2       	rcall	.+1486   	; 0x9d6 <bufferAddToEnd>
}
 408:	08 95       	ret

0000040a <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 42c:	80 91 ee 00 	lds	r24, 0x00EE
 430:	88 23       	and	r24, r24
 432:	69 f0       	breq	.+26     	; 0x44e <__vector_13+0x44>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 434:	80 91 f3 00 	lds	r24, 0x00F3
 438:	90 91 f4 00 	lds	r25, 0x00F4
 43c:	89 2b       	or	r24, r25
 43e:	29 f0       	breq	.+10     	; 0x44a <__vector_13+0x40>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 440:	8f ee       	ldi	r24, 0xEF	; 239
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	60 d2       	rcall	.+1216   	; 0x906 <bufferGetFromFront>
 446:	8c b9       	out	0x0c, r24	; 12
 448:	05 c0       	rjmp	.+10     	; 0x454 <__vector_13+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 44a:	10 92 ee 00 	sts	0x00EE, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	80 93 e5 00 	sts	0x00E5, r24
	}
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	80 93 ee 00 	sts	0x00EE, r24
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
 47c:	8f ee       	ldi	r24, 0xEF	; 239
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	42 d2       	rcall	.+1156   	; 0x906 <bufferGetFromFront>
 482:	98 2f       	mov	r25, r24

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 484:	80 91 e5 00 	lds	r24, 0x00E5
 488:	88 23       	and	r24, r24
 48a:	e1 f3       	breq	.-8      	; 0x484 <uartSendTxBuffer+0xe>
	// send byte
	outb(UDR, txData);
 48c:	9c b9       	out	0x0c, r25	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 48e:	10 92 e5 00 	sts	0x00E5, r1
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
}
 492:	08 95       	ret

00000494 <uartReceiveByte>:
		return -1;
}

// gets a byte (if available) from the uart receive buffer
u08 uartReceiveByte(u08* rxData)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ec 01       	movw	r28, r24
	// make sure we have a receive buffer
	if(uartRxBuffer.size)
 49a:	80 91 e8 00 	lds	r24, 0x00E8
 49e:	90 91 e9 00 	lds	r25, 0x00E9
 4a2:	89 2b       	or	r24, r25
 4a4:	61 f0       	breq	.+24     	; 0x4be <uartReceiveByte+0x2a>
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
 4a6:	80 91 ea 00 	lds	r24, 0x00EA
 4aa:	90 91 eb 00 	lds	r25, 0x00EB
 4ae:	89 2b       	or	r24, r25
 4b0:	31 f0       	breq	.+12     	; 0x4be <uartReceiveByte+0x2a>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer);
 4b2:	86 ee       	ldi	r24, 0xE6	; 230
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	27 d2       	rcall	.+1102   	; 0x906 <bufferGetFromFront>
 4b8:	88 83       	st	Y, r24
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <uartReceiveByte+0x2c>
			return TRUE;
 4be:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// no buffer
		return FALSE;
	}
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <uartGetByte>:
	uartReadyTx = FALSE;
}

// gets a single byte from the uart receive buffer (getchar-style)
int uartGetByte(void)
{
 4c6:	df 93       	push	r29
 4c8:	cf 93       	push	r28
 4ca:	0f 92       	push	r0
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	if(uartReceiveByte(&c))
 4d0:	ce 01       	movw	r24, r28
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	df df       	rcall	.-66     	; 0x494 <uartReceiveByte>
 4d6:	88 23       	and	r24, r24
 4d8:	19 f4       	brne	.+6      	; 0x4e0 <uartGetByte+0x1a>
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	3f ef       	ldi	r19, 0xFF	; 255
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <uartGetByte+0x20>
		return c;
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
 4e6:	c9 01       	movw	r24, r18
 4e8:	0f 90       	pop	r0
 4ea:	cf 91       	pop	r28
 4ec:	df 91       	pop	r29
 4ee:	08 95       	ret

000004f0 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, uartRxData, UART_RX_BUFFER_SIZE);
 4f0:	86 ee       	ldi	r24, 0xE6	; 230
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	60 e6       	ldi	r22, 0x60	; 96
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	40 e4       	ldi	r20, 0x40	; 64
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	f7 d1       	rcall	.+1006   	; 0x8ec <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, uartTxData, UART_TX_BUFFER_SIZE);
 4fe:	8f ee       	ldi	r24, 0xEF	; 239
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	60 ea       	ldi	r22, 0xA0	; 160
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	40 e4       	ldi	r20, 0x40	; 64
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	f0 d1       	rcall	.+992    	; 0x8ec <bufferInit>
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (u08*) UART_RX_BUFFER_ADDR, UART_RX_BUFFER_SIZE);
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (u08*) UART_TX_BUFFER_ADDR, UART_TX_BUFFER_SIZE);
	#endif
}
 50c:	08 95       	ret

0000050e <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 50e:	f0 df       	rcall	.-32     	; 0x4f0 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 510:	10 92 e1 00 	sts	0x00E1, r1
 514:	10 92 e0 00 	sts	0x00E0, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 518:	88 ed       	ldi	r24, 0xD8	; 216
 51a:	8a b9       	out	0x0a, r24	; 10

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
 51c:	60 e8       	ldi	r22, 0x80	; 128
 51e:	75 e2       	ldi	r23, 0x25	; 37
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	f7 de       	rcall	.-530    	; 0x314 <uartSetBaudRate>
	// initialize states
	uartReadyTx = TRUE;
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	80 93 e5 00 	sts	0x00E5, r24
	uartBufferedTx = FALSE;
 52c:	10 92 ee 00 	sts	0x00EE, r1
	// clear overflow count
	uartRxOverflow = 0;
 530:	10 92 f8 00 	sts	0x00F8, r1
 534:	10 92 f7 00 	sts	0x00F7, r1
	// enable interrupts
	sei();
 538:	78 94       	sei
}
 53a:	08 95       	ret

0000053c <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 53c:	90 93 e3 00 	sts	0x00E3, r25
 540:	80 93 e2 00 	sts	0x00E2, r24
}
 544:	08 95       	ret

00000546 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 546:	1f 93       	push	r17
 548:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 54a:	8a 30       	cpi	r24, 0x0A	; 10
 54c:	31 f4       	brne	.+12     	; 0x55a <rprintfChar+0x14>
		rputchar('\r');
 54e:	e0 91 e2 00 	lds	r30, 0x00E2
 552:	f0 91 e3 00 	lds	r31, 0x00E3
 556:	8d e0       	ldi	r24, 0x0D	; 13
 558:	09 95       	icall
	// send character
	rputchar(c);
 55a:	e0 91 e2 00 	lds	r30, 0x00E2
 55e:	f0 91 e3 00 	lds	r31, 0x00E3
 562:	81 2f       	mov	r24, r17
 564:	09 95       	icall
}
 566:	1f 91       	pop	r17
 568:	08 95       	ret

0000056a <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	19 f4       	brne	.+6      	; 0x57a <rprintfStr+0x10>
 574:	05 c0       	rjmp	.+10     	; 0x580 <rprintfStr+0x16>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
 576:	21 96       	adiw	r28, 0x01	; 1
 578:	e6 df       	rcall	.-52     	; 0x546 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
 57a:	88 81       	ld	r24, Y
 57c:	88 23       	and	r24, r24
 57e:	d9 f7       	brne	.-10     	; 0x576 <rprintfStr+0xc>
		rprintfChar(*str++);
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	8c 01       	movw	r16, r24
 594:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	e1 f0       	breq	.+56     	; 0x5d2 <rprintfStrLen+0x4c>
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
 59e:	26 17       	cp	r18, r22
 5a0:	37 07       	cpc	r19, r23
 5a2:	38 f4       	brcc	.+14     	; 0x5b2 <rprintfStrLen+0x2c>
 5a4:	f8 01       	movw	r30, r16
 5a6:	81 91       	ld	r24, Z+
 5a8:	8f 01       	movw	r16, r30
 5aa:	2f 5f       	subi	r18, 0xFF	; 255
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	88 23       	and	r24, r24
 5b0:	b1 f7       	brne	.-20     	; 0x59e <rprintfStrLen+0x18>
 5b2:	c0 e0       	ldi	r28, 0x00	; 0
 5b4:	d0 e0       	ldi	r29, 0x00	; 0
 5b6:	0a c0       	rjmp	.+20     	; 0x5cc <rprintfStrLen+0x46>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
 5b8:	f8 01       	movw	r30, r16
 5ba:	80 81       	ld	r24, Z
 5bc:	88 23       	and	r24, r24
 5be:	19 f0       	breq	.+6      	; 0x5c6 <rprintfStrLen+0x40>
			rprintfChar(*str++);
 5c0:	0f 5f       	subi	r16, 0xFF	; 255
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
 5c6:	80 e2       	ldi	r24, 0x20	; 32
 5c8:	be df       	rcall	.-132    	; 0x546 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
 5ca:	21 96       	adiw	r28, 0x01	; 1
 5cc:	ce 15       	cp	r28, r14
 5ce:	df 05       	cpc	r29, r15
 5d0:	98 f3       	brcs	.-26     	; 0x5b8 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	08 95       	ret

000005e0 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	11 f4       	brne	.+4      	; 0x5ee <rprintfProgStr+0xe>
 5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <rprintfProgStr+0x18>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
 5ec:	ac df       	rcall	.-168    	; 0x546 <rprintfChar>
 5ee:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
 5f0:	21 96       	adiw	r28, 0x01	; 1
 5f2:	84 91       	lpm	r24, Z+
 5f4:	88 23       	and	r24, r24
 5f6:	d1 f7       	brne	.-12     	; 0x5ec <rprintfProgStr+0xc>
		rprintfChar(c);
}
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
 5fe:	8a e0       	ldi	r24, 0x0A	; 10
 600:	a2 df       	rcall	.-188    	; 0x546 <rprintfChar>
}
 602:	08 95       	ret

00000604 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 604:	e8 2f       	mov	r30, r24
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	ef 70       	andi	r30, 0x0F	; 15
 60a:	f0 70       	andi	r31, 0x00	; 0
 60c:	e7 5a       	subi	r30, 0xA7	; 167
 60e:	ff 4f       	sbci	r31, 0xFF	; 255
 610:	e4 91       	lpm	r30, Z+
 612:	8e 2f       	mov	r24, r30
 614:	98 df       	rcall	.-208    	; 0x546 <rprintfChar>
}
 616:	08 95       	ret

00000618 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
 618:	1f 93       	push	r17
 61a:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
 61c:	82 95       	swap	r24
 61e:	8f 70       	andi	r24, 0x0F	; 15
 620:	f1 df       	rcall	.-30     	; 0x604 <rprintfu04>
	rprintfu04(data);
 622:	81 2f       	mov	r24, r17
 624:	ef df       	rcall	.-34     	; 0x604 <rprintfu04>
}
 626:	1f 91       	pop	r17
 628:	08 95       	ret

0000062a <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
 62a:	1f 93       	push	r17
 62c:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
 62e:	89 2f       	mov	r24, r25
 630:	f3 df       	rcall	.-26     	; 0x618 <rprintfu08>
	rprintfu08(data);
 632:	81 2f       	mov	r24, r17
 634:	f1 df       	rcall	.-30     	; 0x618 <rprintfu08>
}
 636:	1f 91       	pop	r17
 638:	08 95       	ret

0000063a <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
 63a:	ef 92       	push	r14
 63c:	ff 92       	push	r15
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	7b 01       	movw	r14, r22
 644:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
 646:	c8 01       	movw	r24, r16
 648:	aa 27       	eor	r26, r26
 64a:	bb 27       	eor	r27, r27
 64c:	ee df       	rcall	.-36     	; 0x62a <rprintfu16>
	rprintfu16(data);
 64e:	c7 01       	movw	r24, r14
 650:	ec df       	rcall	.-40     	; 0x62a <rprintfu16>
}
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	08 95       	ret

0000065c <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
 65c:	2f 92       	push	r2
 65e:	3f 92       	push	r3
 660:	4f 92       	push	r4
 662:	5f 92       	push	r5
 664:	6f 92       	push	r6
 666:	7f 92       	push	r7
 668:	8f 92       	push	r8
 66a:	9f 92       	push	r9
 66c:	af 92       	push	r10
 66e:	bf 92       	push	r11
 670:	cf 92       	push	r12
 672:	df 92       	push	r13
 674:	ef 92       	push	r14
 676:	ff 92       	push	r15
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	a3 97       	sbiw	r28, 0x23	; 35
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	6a a3       	std	Y+34, r22	; 0x22
 692:	24 2e       	mov	r2, r20
 694:	2b a3       	std	Y+35, r18	; 0x23
 696:	37 01       	movw	r6, r14
 698:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
 69a:	44 23       	and	r20, r20
 69c:	51 f0       	breq	.+20     	; 0x6b2 <rprintfNum+0x56>
 69e:	17 ff       	sbrs	r17, 7
 6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <rprintfNum+0x56>
	{
		x = -n;
 6a2:	ee 24       	eor	r14, r14
 6a4:	ff 24       	eor	r15, r15
 6a6:	87 01       	movw	r16, r14
 6a8:	e6 18       	sub	r14, r6
 6aa:	f7 08       	sbc	r15, r7
 6ac:	08 09       	sbc	r16, r8
 6ae:	19 09       	sbc	r17, r9
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
 6b2:	84 01       	movw	r16, r8
 6b4:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
 6b6:	2a a1       	ldd	r18, Y+34	; 0x22
 6b8:	21 50       	subi	r18, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	21 10       	cpse	r2, r1
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	29 1b       	sub	r18, r25
 6c2:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
 6c4:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
 6c6:	a8 2e       	mov	r10, r24
 6c8:	bb 24       	eor	r11, r11
 6ca:	cc 24       	eor	r12, r12
 6cc:	dd 24       	eor	r13, r13
 6ce:	c8 01       	movw	r24, r16
 6d0:	b7 01       	movw	r22, r14
 6d2:	a6 01       	movw	r20, r12
 6d4:	95 01       	movw	r18, r10
 6d6:	86 d2       	rcall	.+1292   	; 0xbe4 <__udivmodsi4>
 6d8:	fb 01       	movw	r30, r22
 6da:	ef 70       	andi	r30, 0x0F	; 15
 6dc:	f0 70       	andi	r31, 0x00	; 0
 6de:	e7 5a       	subi	r30, 0xA7	; 167
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	64 91       	lpm	r22, Z+
 6e4:	6f 8f       	std	Y+31, r22	; 0x1f
 6e6:	c8 01       	movw	r24, r16
 6e8:	b7 01       	movw	r22, r14
 6ea:	a6 01       	movw	r20, r12
 6ec:	95 01       	movw	r18, r10
 6ee:	7a d2       	rcall	.+1268   	; 0xbe4 <__udivmodsi4>
 6f0:	c9 01       	movw	r24, r18
 6f2:	da 01       	movw	r26, r20
 6f4:	7c 01       	movw	r14, r24
 6f6:	8d 01       	movw	r16, r26
 6f8:	9e e1       	ldi	r25, 0x1E	; 30
 6fa:	49 2e       	mov	r4, r25
 6fc:	51 2c       	mov	r5, r1
 6fe:	4c 0e       	add	r4, r28
 700:	5d 1e       	adc	r5, r29
 702:	39 a0       	ldd	r3, Y+33	; 0x21
 704:	23 c0       	rjmp	.+70     	; 0x74c <rprintfNum+0xf0>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
 706:	e1 14       	cp	r14, r1
 708:	f1 04       	cpc	r15, r1
 70a:	01 05       	cpc	r16, r1
 70c:	11 05       	cpc	r17, r1
 70e:	b9 f0       	breq	.+46     	; 0x73e <rprintfNum+0xe2>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
 710:	c8 01       	movw	r24, r16
 712:	b7 01       	movw	r22, r14
 714:	a6 01       	movw	r20, r12
 716:	95 01       	movw	r18, r10
 718:	65 d2       	rcall	.+1226   	; 0xbe4 <__udivmodsi4>
 71a:	fb 01       	movw	r30, r22
 71c:	ef 70       	andi	r30, 0x0F	; 15
 71e:	f0 70       	andi	r31, 0x00	; 0
 720:	e7 5a       	subi	r30, 0xA7	; 167
 722:	ff 4f       	sbci	r31, 0xFF	; 255
 724:	64 91       	lpm	r22, Z+
 726:	f2 01       	movw	r30, r4
 728:	60 83       	st	Z, r22
 72a:	c8 01       	movw	r24, r16
 72c:	b7 01       	movw	r22, r14
 72e:	a6 01       	movw	r20, r12
 730:	95 01       	movw	r18, r10
 732:	58 d2       	rcall	.+1200   	; 0xbe4 <__udivmodsi4>
 734:	c9 01       	movw	r24, r18
 736:	da 01       	movw	r26, r20
 738:	7c 01       	movw	r14, r24
 73a:	8d 01       	movw	r16, r26
 73c:	03 c0       	rjmp	.+6      	; 0x744 <rprintfNum+0xe8>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
 73e:	2b a1       	ldd	r18, Y+35	; 0x23
 740:	f2 01       	movw	r30, r4
 742:	20 83       	st	Z, r18
 744:	3a 94       	dec	r3
 746:	08 94       	sec
 748:	41 08       	sbc	r4, r1
 74a:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
 74c:	33 20       	and	r3, r3
 74e:	d9 f6       	brne	.-74     	; 0x706 <rprintfNum+0xaa>
 750:	ce 01       	movw	r24, r28
 752:	4f 96       	adiw	r24, 0x1f	; 31
 754:	8c 01       	movw	r16, r24
 756:	e9 a1       	ldd	r30, Y+33	; 0x21
 758:	0e 1b       	sub	r16, r30
 75a:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
 75c:	22 20       	and	r2, r2
 75e:	e9 f0       	breq	.+58     	; 0x79a <rprintfNum+0x13e>
	{
		if(n < 0)
 760:	97 fe       	sbrs	r9, 7
 762:	05 c0       	rjmp	.+10     	; 0x76e <rprintfNum+0x112>
		{
   			*--p = '-';
 764:	8d e2       	ldi	r24, 0x2D	; 45
 766:	f8 01       	movw	r30, r16
 768:	82 93       	st	-Z, r24
 76a:	8f 01       	movw	r16, r30
 76c:	16 c0       	rjmp	.+44     	; 0x79a <rprintfNum+0x13e>
 76e:	c8 01       	movw	r24, r16
 770:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
 772:	61 14       	cp	r6, r1
 774:	71 04       	cpc	r7, r1
 776:	81 04       	cpc	r8, r1
 778:	91 04       	cpc	r9, r1
 77a:	19 f0       	breq	.+6      	; 0x782 <rprintfNum+0x126>
		{
	   		*--p = '+';
 77c:	8c 01       	movw	r16, r24
 77e:	8b e2       	ldi	r24, 0x2B	; 43
 780:	02 c0       	rjmp	.+4      	; 0x786 <rprintfNum+0x12a>
		}
		else
		{
	   		*--p = ' ';
 782:	8c 01       	movw	r16, r24
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	f8 01       	movw	r30, r16
 788:	80 83       	st	Z, r24
 78a:	07 c0       	rjmp	.+14     	; 0x79a <rprintfNum+0x13e>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
 78c:	f8 01       	movw	r30, r16
 78e:	81 91       	ld	r24, Z+
 790:	8f 01       	movw	r16, r30
 792:	d9 de       	rcall	.-590    	; 0x546 <rprintfChar>
 794:	fa a1       	ldd	r31, Y+34	; 0x22
 796:	f1 50       	subi	r31, 0x01	; 1
 798:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
 79a:	2a a1       	ldd	r18, Y+34	; 0x22
 79c:	22 23       	and	r18, r18
 79e:	b1 f7       	brne	.-20     	; 0x78c <rprintfNum+0x130>
	{
		rprintfChar(*p++);
	}
}
 7a0:	a3 96       	adiw	r28, 0x23	; 35
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	df 90       	pop	r13
 7ba:	cf 90       	pop	r12
 7bc:	bf 90       	pop	r11
 7be:	af 90       	pop	r10
 7c0:	9f 90       	pop	r9
 7c2:	8f 90       	pop	r8
 7c4:	7f 90       	pop	r7
 7c6:	6f 90       	pop	r6
 7c8:	5f 90       	pop	r5
 7ca:	4f 90       	pop	r4
 7cc:	3f 90       	pop	r3
 7ce:	2f 90       	pop	r2
 7d0:	08 95       	ret

000007d2 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 7d2:	7f 92       	push	r7
 7d4:	8f 92       	push	r8
 7d6:	9f 92       	push	r9
 7d8:	af 92       	push	r10
 7da:	bf 92       	push	r11
 7dc:	cf 92       	push	r12
 7de:	df 92       	push	r13
 7e0:	ef 92       	push	r14
 7e2:	ff 92       	push	r15
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	78 88       	ldd	r7, Y+16	; 0x10
 7f2:	c9 88       	ldd	r12, Y+17	; 0x11
 7f4:	da 88       	ldd	r13, Y+18	; 0x12
 7f6:	53 e1       	ldi	r21, 0x13	; 19
 7f8:	e5 2e       	mov	r14, r21
 7fa:	f1 2c       	mov	r15, r1
 7fc:	ec 0e       	add	r14, r28
 7fe:	fd 1e       	adc	r15, r29
 800:	13 c0       	rjmp	.+38     	; 0x828 <rprintf1RamRom+0x56>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 802:	88 23       	and	r24, r24
 804:	81 f4       	brne	.+32     	; 0x826 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	cf 91       	pop	r28
 80c:	df 91       	pop	r29
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	ff 90       	pop	r15
 814:	ef 90       	pop	r14
 816:	df 90       	pop	r13
 818:	cf 90       	pop	r12
 81a:	bf 90       	pop	r11
 81c:	af 90       	pop	r10
 81e:	9f 90       	pop	r9
 820:	8f 90       	pop	r8
 822:	7f 90       	pop	r7
 824:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 826:	8f de       	rcall	.-738    	; 0x546 <rprintfChar>
 828:	96 01       	movw	r18, r12
 82a:	2f 5f       	subi	r18, 0xFF	; 255
 82c:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 82e:	77 20       	and	r7, r7
 830:	21 f0       	breq	.+8      	; 0x83a <rprintf1RamRom+0x68>
 832:	f6 01       	movw	r30, r12
 834:	69 01       	movw	r12, r18
 836:	84 91       	lpm	r24, Z+
 838:	03 c0       	rjmp	.+6      	; 0x840 <rprintf1RamRom+0x6e>
 83a:	f6 01       	movw	r30, r12
 83c:	80 81       	ld	r24, Z
 83e:	69 01       	movw	r12, r18
 840:	85 32       	cpi	r24, 0x25	; 37
 842:	f9 f6       	brne	.-66     	; 0x802 <rprintf1RamRom+0x30>
 844:	2f 5f       	subi	r18, 0xFF	; 255
 846:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 848:	77 20       	and	r7, r7
 84a:	21 f0       	breq	.+8      	; 0x854 <rprintf1RamRom+0x82>
 84c:	f6 01       	movw	r30, r12
 84e:	69 01       	movw	r12, r18
 850:	84 91       	lpm	r24, Z+
 852:	03 c0       	rjmp	.+6      	; 0x85a <rprintf1RamRom+0x88>
 854:	f6 01       	movw	r30, r12
 856:	80 81       	ld	r24, Z
 858:	69 01       	movw	r12, r18
 85a:	84 36       	cpi	r24, 0x64	; 100
 85c:	29 f0       	breq	.+10     	; 0x868 <rprintf1RamRom+0x96>
 85e:	88 37       	cpi	r24, 0x78	; 120
 860:	81 f0       	breq	.+32     	; 0x882 <rprintf1RamRom+0xb0>
 862:	83 36       	cpi	r24, 0x63	; 99
 864:	01 f7       	brne	.-64     	; 0x826 <rprintf1RamRom+0x54>
 866:	06 c0       	rjmp	.+12     	; 0x874 <rprintf1RamRom+0xa2>
 868:	00 e1       	ldi	r16, 0x10	; 16
 86a:	17 e2       	ldi	r17, 0x27	; 39
 86c:	4a e0       	ldi	r20, 0x0A	; 10
 86e:	a4 2e       	mov	r10, r20
 870:	b1 2c       	mov	r11, r1
 872:	0c c0       	rjmp	.+24     	; 0x88c <rprintf1RamRom+0xba>
		{
			case 'c': format_flag = va_arg(ap,int);
 874:	f7 01       	movw	r30, r14
 876:	80 81       	ld	r24, Z
 878:	22 e0       	ldi	r18, 0x02	; 2
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	e2 0e       	add	r14, r18
 87e:	f3 1e       	adc	r15, r19
 880:	d2 cf       	rjmp	.-92     	; 0x826 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
 882:	00 e0       	ldi	r16, 0x00	; 0
 884:	10 e1       	ldi	r17, 0x10	; 16
 886:	30 e1       	ldi	r19, 0x10	; 16
 888:	a3 2e       	mov	r10, r19
 88a:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 88c:	22 e0       	ldi	r18, 0x02	; 2
 88e:	82 2e       	mov	r8, r18
 890:	91 2c       	mov	r9, r1
 892:	8e 0c       	add	r8, r14
 894:	9f 1c       	adc	r9, r15
 896:	f7 01       	movw	r30, r14
 898:	e0 80       	ld	r14, Z
 89a:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
 89c:	84 36       	cpi	r24, 0x64	; 100
 89e:	a1 f4       	brne	.+40     	; 0x8c8 <rprintf1RamRom+0xf6>
			{
				if (((int)u_val) < 0)
 8a0:	f7 fe       	sbrs	r15, 7
 8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <rprintf1RamRom+0xf0>
				{
					u_val = - u_val;
 8a4:	f0 94       	com	r15
 8a6:	e1 94       	neg	r14
 8a8:	f1 08       	sbc	r15, r1
 8aa:	f3 94       	inc	r15
					rprintfChar('-');
 8ac:	8d e2       	ldi	r24, 0x2D	; 45
 8ae:	4b de       	rcall	.-874    	; 0x546 <rprintfChar>
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <rprintf1RamRom+0xf0>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 8b2:	c8 01       	movw	r24, r16
 8b4:	6a e0       	ldi	r22, 0x0A	; 10
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	81 d1       	rcall	.+770    	; 0xbbc <__udivmodhi4>
 8ba:	8b 01       	movw	r16, r22
 8bc:	62 30       	cpi	r22, 0x02	; 2
 8be:	71 05       	cpc	r23, r1
 8c0:	18 f0       	brcs	.+6      	; 0x8c8 <rprintf1RamRom+0xf6>
 8c2:	e0 16       	cp	r14, r16
 8c4:	f1 06       	cpc	r15, r17
 8c6:	a8 f3       	brcs	.-22     	; 0x8b2 <rprintf1RamRom+0xe0>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 8c8:	c7 01       	movw	r24, r14
 8ca:	b8 01       	movw	r22, r16
 8cc:	77 d1       	rcall	.+750    	; 0xbbc <__udivmodhi4>
 8ce:	86 2f       	mov	r24, r22
 8d0:	99 de       	rcall	.-718    	; 0x604 <rprintfu04>
				u_val %= div_val;
 8d2:	c7 01       	movw	r24, r14
 8d4:	b8 01       	movw	r22, r16
 8d6:	72 d1       	rcall	.+740    	; 0xbbc <__udivmodhi4>
 8d8:	7c 01       	movw	r14, r24
				div_val /= base;
 8da:	c8 01       	movw	r24, r16
 8dc:	b5 01       	movw	r22, r10
 8de:	6e d1       	rcall	.+732    	; 0xbbc <__udivmodhi4>
 8e0:	8b 01       	movw	r16, r22
			} while (div_val);
 8e2:	61 15       	cp	r22, r1
 8e4:	71 05       	cpc	r23, r1
 8e6:	81 f7       	brne	.-32     	; 0x8c8 <rprintf1RamRom+0xf6>
 8e8:	74 01       	movw	r14, r8
 8ea:	9e cf       	rjmp	.-196    	; 0x828 <rprintf1RamRom+0x56>

000008ec <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
 8ec:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 8ee:	8f b7       	in	r24, 0x3f	; 63
 8f0:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
 8f2:	71 83       	std	Z+1, r23	; 0x01
 8f4:	60 83       	st	Z, r22
	buffer->size = size;
 8f6:	53 83       	std	Z+3, r21	; 0x03
 8f8:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
 8fa:	17 82       	std	Z+7, r1	; 0x07
 8fc:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
 8fe:	15 82       	std	Z+5, r1	; 0x05
 900:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 902:	8f bf       	out	0x3f, r24	; 63
}
 904:	08 95       	ret

00000906 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 906:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 908:	4f b7       	in	r20, 0x3f	; 63
 90a:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 90c:	14 96       	adiw	r26, 0x04	; 4
 90e:	8d 91       	ld	r24, X+
 910:	9c 91       	ld	r25, X
 912:	15 97       	sbiw	r26, 0x05	; 5
 914:	89 2b       	or	r24, r25
 916:	11 f4       	brne	.+4      	; 0x91c <bufferGetFromFront+0x16>
 918:	e0 e0       	ldi	r30, 0x00	; 0
 91a:	25 c0       	rjmp	.+74     	; 0x966 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 91c:	16 96       	adiw	r26, 0x06	; 6
 91e:	8d 91       	ld	r24, X+
 920:	9c 91       	ld	r25, X
 922:	17 97       	sbiw	r26, 0x07	; 7
 924:	ed 91       	ld	r30, X+
 926:	fc 91       	ld	r31, X
 928:	11 97       	sbiw	r26, 0x01	; 1
 92a:	e8 0f       	add	r30, r24
 92c:	f9 1f       	adc	r31, r25
 92e:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
 930:	01 96       	adiw	r24, 0x01	; 1
 932:	17 96       	adiw	r26, 0x07	; 7
 934:	9c 93       	st	X, r25
 936:	8e 93       	st	-X, r24
 938:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
 93a:	12 96       	adiw	r26, 0x02	; 2
 93c:	2d 91       	ld	r18, X+
 93e:	3c 91       	ld	r19, X
 940:	13 97       	sbiw	r26, 0x03	; 3
 942:	82 17       	cp	r24, r18
 944:	93 07       	cpc	r25, r19
 946:	30 f0       	brcs	.+12     	; 0x954 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
 948:	82 1b       	sub	r24, r18
 94a:	93 0b       	sbc	r25, r19
 94c:	17 96       	adiw	r26, 0x07	; 7
 94e:	9c 93       	st	X, r25
 950:	8e 93       	st	-X, r24
 952:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
 954:	14 96       	adiw	r26, 0x04	; 4
 956:	8d 91       	ld	r24, X+
 958:	9c 91       	ld	r25, X
 95a:	15 97       	sbiw	r26, 0x05	; 5
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	15 96       	adiw	r26, 0x05	; 5
 960:	9c 93       	st	X, r25
 962:	8e 93       	st	-X, r24
 964:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
 966:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
 968:	8e 2f       	mov	r24, r30
 96a:	08 95       	ret

0000096c <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
 96c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 96e:	4f b7       	in	r20, 0x3f	; 63
 970:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
 972:	84 81       	ldd	r24, Z+4	; 0x04
 974:	95 81       	ldd	r25, Z+5	; 0x05
 976:	68 17       	cp	r22, r24
 978:	79 07       	cpc	r23, r25
 97a:	b0 f4       	brcc	.+44     	; 0x9a8 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
 97c:	86 81       	ldd	r24, Z+6	; 0x06
 97e:	97 81       	ldd	r25, Z+7	; 0x07
 980:	86 0f       	add	r24, r22
 982:	97 1f       	adc	r25, r23
 984:	97 83       	std	Z+7, r25	; 0x07
 986:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
 988:	22 81       	ldd	r18, Z+2	; 0x02
 98a:	33 81       	ldd	r19, Z+3	; 0x03
 98c:	82 17       	cp	r24, r18
 98e:	93 07       	cpc	r25, r19
 990:	20 f0       	brcs	.+8      	; 0x99a <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
 992:	82 1b       	sub	r24, r18
 994:	93 0b       	sbc	r25, r19
 996:	97 83       	std	Z+7, r25	; 0x07
 998:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
 99a:	84 81       	ldd	r24, Z+4	; 0x04
 99c:	95 81       	ldd	r25, Z+5	; 0x05
 99e:	86 1b       	sub	r24, r22
 9a0:	97 0b       	sbc	r25, r23
 9a2:	95 83       	std	Z+5, r25	; 0x05
 9a4:	84 83       	std	Z+4, r24	; 0x04
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
 9a8:	15 82       	std	Z+5, r1	; 0x05
 9aa:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
 9ac:	4f bf       	out	0x3f, r20	; 63
}
 9ae:	08 95       	ret

000009b0 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
 9b0:	fc 01       	movw	r30, r24
 9b2:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
 9b4:	2f b7       	in	r18, 0x3f	; 63
 9b6:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
 9b8:	2f bf       	out	0x3f, r18	; 63
 9ba:	26 81       	ldd	r18, Z+6	; 0x06
 9bc:	37 81       	ldd	r19, Z+7	; 0x07
 9be:	62 81       	ldd	r22, Z+2	; 0x02
 9c0:	73 81       	ldd	r23, Z+3	; 0x03
 9c2:	82 0f       	add	r24, r18
 9c4:	93 1f       	adc	r25, r19
 9c6:	fa d0       	rcall	.+500    	; 0xbbc <__udivmodhi4>
 9c8:	01 90       	ld	r0, Z+
 9ca:	f0 81       	ld	r31, Z
 9cc:	e0 2d       	mov	r30, r0
 9ce:	e8 0f       	add	r30, r24
 9d0:	f9 1f       	adc	r31, r25
	return data;
}
 9d2:	80 81       	ld	r24, Z
 9d4:	08 95       	ret

000009d6 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 9d6:	1f 93       	push	r17
 9d8:	cf 93       	push	r28
 9da:	df 93       	push	r29
 9dc:	ec 01       	movw	r28, r24
 9de:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
 9e0:	4f b7       	in	r20, 0x3f	; 63
 9e2:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 9e4:	2c 81       	ldd	r18, Y+4	; 0x04
 9e6:	3d 81       	ldd	r19, Y+5	; 0x05
 9e8:	6a 81       	ldd	r22, Y+2	; 0x02
 9ea:	7b 81       	ldd	r23, Y+3	; 0x03
 9ec:	26 17       	cp	r18, r22
 9ee:	37 07       	cpc	r19, r23
 9f0:	90 f4       	brcc	.+36     	; 0xa16 <bufferAddToEnd+0x40>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 9f2:	8e 81       	ldd	r24, Y+6	; 0x06
 9f4:	9f 81       	ldd	r25, Y+7	; 0x07
 9f6:	82 0f       	add	r24, r18
 9f8:	93 1f       	adc	r25, r19
 9fa:	e0 d0       	rcall	.+448    	; 0xbbc <__udivmodhi4>
 9fc:	e8 81       	ld	r30, Y
 9fe:	f9 81       	ldd	r31, Y+1	; 0x01
 a00:	e8 0f       	add	r30, r24
 a02:	f9 1f       	adc	r31, r25
 a04:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
 a06:	8c 81       	ldd	r24, Y+4	; 0x04
 a08:	9d 81       	ldd	r25, Y+5	; 0x05
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	9d 83       	std	Y+5, r25	; 0x05
 a0e:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 a10:	4f bf       	out	0x3f, r20	; 63
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <bufferAddToEnd+0x44>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
 a16:	4f bf       	out	0x3f, r20	; 63
 a18:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	08 95       	ret

00000a22 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 a22:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 a24:	8f b7       	in	r24, 0x3f	; 63
 a26:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
 a28:	8f bf       	out	0x3f, r24	; 63
 a2a:	22 81       	ldd	r18, Z+2	; 0x02
 a2c:	33 81       	ldd	r19, Z+3	; 0x03
 a2e:	84 81       	ldd	r24, Z+4	; 0x04
 a30:	95 81       	ldd	r25, Z+5	; 0x05
 a32:	28 1b       	sub	r18, r24
 a34:	39 0b       	sbc	r19, r25
	return bytesleft;
}
 a36:	c9 01       	movw	r24, r18
 a38:	08 95       	ret

00000a3a <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
 a3a:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 a3c:	8f b7       	in	r24, 0x3f	; 63
 a3e:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
 a40:	15 82       	std	Z+5, r1	; 0x05
 a42:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 a44:	8f bf       	out	0x3f, r24	; 63
}
 a46:	08 95       	ret

00000a48 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 a48:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 a4a:	66 23       	and	r22, r22
 a4c:	11 f0       	breq	.+4      	; 0xa52 <lcd_write+0xa>
       lcd_rs_high();
 a4e:	c4 9a       	sbi	0x18, 4	; 24
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 a52:	c4 98       	cbi	0x18, 4	; 24
    }
    lcd_rw_low();
 a54:	c5 98       	cbi	0x18, 5	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 a56:	87 b3       	in	r24, 0x17	; 23
 a58:	8f 60       	ori	r24, 0x0F	; 15
 a5a:	87 bb       	out	0x17, r24	; 23

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 a5c:	98 b3       	in	r25, 0x18	; 24
 a5e:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 a60:	82 2f       	mov	r24, r18
 a62:	82 95       	swap	r24
 a64:	8f 70       	andi	r24, 0x0F	; 15
 a66:	89 2b       	or	r24, r25
 a68:	88 bb       	out	0x18, r24	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 a6a:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
 a6c:	00 c0       	rjmp	.+0      	; 0xa6e <lcd_write+0x26>
    lcd_e_low();
 a6e:	c6 98       	cbi	0x18, 6	; 24
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 a70:	2f 70       	andi	r18, 0x0F	; 15
 a72:	29 2b       	or	r18, r25
 a74:	28 bb       	out	0x18, r18	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 a76:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
 a78:	00 c0       	rjmp	.+0      	; 0xa7a <lcd_write+0x32>
    lcd_e_low();
 a7a:	c6 98       	cbi	0x18, 6	; 24
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 a7c:	9f 60       	ori	r25, 0x0F	; 15
 a7e:	98 bb       	out	0x18, r25	; 24
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 a80:	08 95       	ret

00000a82 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 a82:	88 23       	and	r24, r24
 a84:	11 f0       	breq	.+4      	; 0xa8a <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 a86:	c4 9a       	sbi	0x18, 4	; 24
 a88:	01 c0       	rjmp	.+2      	; 0xa8c <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 a8a:	c4 98       	cbi	0x18, 4	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
 a8c:	c5 9a       	sbi	0x18, 5	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 a8e:	87 b3       	in	r24, 0x17	; 23
 a90:	80 7f       	andi	r24, 0xF0	; 240
 a92:	87 bb       	out	0x17, r24	; 23
        
        lcd_e_high();
 a94:	c6 9a       	sbi	0x18, 6	; 24
        lcd_e_delay();        
 a96:	00 c0       	rjmp	.+0      	; 0xa98 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 a98:	96 b3       	in	r25, 0x16	; 22
        lcd_e_low();
 a9a:	c6 98       	cbi	0x18, 6	; 24
        
        lcd_e_delay();                       /* Enable 500ns low       */
 a9c:	00 c0       	rjmp	.+0      	; 0xa9e <lcd_read+0x1c>
        
        lcd_e_high();
 a9e:	c6 9a       	sbi	0x18, 6	; 24
        lcd_e_delay();
 aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 aa2:	86 b3       	in	r24, 0x16	; 22
 aa4:	8f 70       	andi	r24, 0x0F	; 15
 aa6:	92 95       	swap	r25
 aa8:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
 aaa:	c6 98       	cbi	0x18, 6	; 24
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 aac:	89 2b       	or	r24, r25
 aae:	08 95       	ret

00000ab0 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	e7 df       	rcall	.-50     	; 0xa82 <lcd_read>
 ab4:	87 fd       	sbrc	r24, 7
 ab6:	fc cf       	rjmp	.-8      	; 0xab0 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 ab8:	88 e0       	ldi	r24, 0x08	; 8
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	01 97       	sbiw	r24, 0x01	; 1
 abe:	f1 f7       	brne	.-4      	; 0xabc <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	df df       	rcall	.-66     	; 0xa82 <lcd_read>
    
}/* lcd_waitbusy */
 ac4:	08 95       	ret

00000ac6 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 ac6:	1f 93       	push	r17
 ac8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 aca:	f2 df       	rcall	.-28     	; 0xab0 <lcd_waitbusy>
    lcd_write(cmd,0);
 acc:	81 2f       	mov	r24, r17
 ace:	60 e0       	ldi	r22, 0x00	; 0
 ad0:	bb df       	rcall	.-138    	; 0xa48 <lcd_write>
}
 ad2:	1f 91       	pop	r17
 ad4:	08 95       	ret

00000ad6 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 ad6:	1f 93       	push	r17
 ad8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 ada:	ea df       	rcall	.-44     	; 0xab0 <lcd_waitbusy>
    lcd_write(data,1);
 adc:	81 2f       	mov	r24, r17
 ade:	61 e0       	ldi	r22, 0x01	; 1
 ae0:	b3 df       	rcall	.-154    	; 0xa48 <lcd_write>
}
 ae2:	1f 91       	pop	r17
 ae4:	08 95       	ret

00000ae6 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 ae6:	66 23       	and	r22, r22
 ae8:	11 f4       	brne	.+4      	; 0xaee <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 aea:	80 58       	subi	r24, 0x80	; 128
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 aee:	80 54       	subi	r24, 0x40	; 64
 af0:	ea df       	rcall	.-44     	; 0xac6 <lcd_command>
 af2:	08 95       	ret

00000af4 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 af4:	dd df       	rcall	.-70     	; 0xab0 <lcd_waitbusy>
}
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	08 95       	ret

00000afa <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	e4 df       	rcall	.-56     	; 0xac6 <lcd_command>
}
 afe:	08 95       	ret

00000b00 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 b00:	82 e0       	ldi	r24, 0x02	; 2
 b02:	e1 df       	rcall	.-62     	; 0xac6 <lcd_command>
}
 b04:	08 95       	ret

00000b06 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 b06:	1f 93       	push	r17
 b08:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 b0a:	d2 df       	rcall	.-92     	; 0xab0 <lcd_waitbusy>
    if (c=='\n')
 b0c:	1a 30       	cpi	r17, 0x0A	; 10
 b0e:	41 f4       	brne	.+16     	; 0xb20 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 b10:	80 34       	cpi	r24, 0x40	; 64
 b12:	10 f0       	brcs	.+4      	; 0xb18 <lcd_putc+0x12>
 b14:	80 e0       	ldi	r24, 0x00	; 0
 b16:	01 c0       	rjmp	.+2      	; 0xb1a <lcd_putc+0x14>
 b18:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 b1a:	80 58       	subi	r24, 0x80	; 128
 b1c:	d4 df       	rcall	.-88     	; 0xac6 <lcd_command>
 b1e:	03 c0       	rjmp	.+6      	; 0xb26 <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 b20:	81 2f       	mov	r24, r17
 b22:	61 e0       	ldi	r22, 0x01	; 1
 b24:	91 df       	rcall	.-222    	; 0xa48 <lcd_write>
    }

}/* lcd_putc */
 b26:	1f 91       	pop	r17
 b28:	08 95       	ret

00000b2a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	ec 01       	movw	r28, r24
 b30:	01 c0       	rjmp	.+2      	; 0xb34 <lcd_puts+0xa>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 b32:	e9 df       	rcall	.-46     	; 0xb06 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 b34:	89 91       	ld	r24, Y+
 b36:	88 23       	and	r24, r24
 b38:	e1 f7       	brne	.-8      	; 0xb32 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 b3a:	df 91       	pop	r29
 b3c:	cf 91       	pop	r28
 b3e:	08 95       	ret

00000b40 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	ec 01       	movw	r28, r24
 b46:	01 c0       	rjmp	.+2      	; 0xb4a <lcd_puts_p+0xa>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 b48:	de df       	rcall	.-68     	; 0xb06 <lcd_putc>
 b4a:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 b4c:	21 96       	adiw	r28, 0x01	; 1
 b4e:	84 91       	lpm	r24, Z+
 b50:	88 23       	and	r24, r24
 b52:	d1 f7       	brne	.-12     	; 0xb48 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	08 95       	ret

00000b5a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 b5a:	1f 93       	push	r17
 b5c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 b5e:	87 b3       	in	r24, 0x17	; 23
 b60:	8f 67       	ori	r24, 0x7F	; 127
 b62:	87 bb       	out	0x17, r24	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 b64:	80 e0       	ldi	r24, 0x00	; 0
 b66:	9a ef       	ldi	r25, 0xFA	; 250
 b68:	01 97       	sbiw	r24, 0x01	; 1
 b6a:	f1 f7       	brne	.-4      	; 0xb68 <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 b6c:	c1 9a       	sbi	0x18, 1	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 b6e:	c0 9a       	sbi	0x18, 0	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 b70:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
 b72:	00 c0       	rjmp	.+0      	; 0xb74 <lcd_init+0x1a>
    lcd_e_low();
 b74:	c6 98       	cbi	0x18, 6	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	9e e4       	ldi	r25, 0x4E	; 78
 b7a:	01 97       	sbiw	r24, 0x01	; 1
 b7c:	f1 f7       	brne	.-4      	; 0xb7a <lcd_init+0x20>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 b7e:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <lcd_init+0x28>
    lcd_e_low();
 b82:	c6 98       	cbi	0x18, 6	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	91 e0       	ldi	r25, 0x01	; 1
 b88:	fc 01       	movw	r30, r24
 b8a:	31 97       	sbiw	r30, 0x01	; 1
 b8c:	f1 f7       	brne	.-4      	; 0xb8a <lcd_init+0x30>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 b8e:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
 b90:	00 c0       	rjmp	.+0      	; 0xb92 <lcd_init+0x38>
    lcd_e_low();
 b92:	c6 98       	cbi	0x18, 6	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 b94:	fc 01       	movw	r30, r24
 b96:	31 97       	sbiw	r30, 0x01	; 1
 b98:	f1 f7       	brne	.-4      	; 0xb96 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 b9a:	c0 98       	cbi	0x18, 0	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 b9c:	c6 9a       	sbi	0x18, 6	; 24
    lcd_e_delay();
 b9e:	00 c0       	rjmp	.+0      	; 0xba0 <lcd_init+0x46>
    lcd_e_low();
 ba0:	c6 98       	cbi	0x18, 6	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 ba2:	01 97       	sbiw	r24, 0x01	; 1
 ba4:	f1 f7       	brne	.-4      	; 0xba2 <lcd_init+0x48>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 ba6:	88 e2       	ldi	r24, 0x28	; 40
 ba8:	8e df       	rcall	.-228    	; 0xac6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 baa:	88 e0       	ldi	r24, 0x08	; 8
 bac:	8c df       	rcall	.-232    	; 0xac6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 bae:	a5 df       	rcall	.-182    	; 0xafa <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 bb0:	86 e0       	ldi	r24, 0x06	; 6
 bb2:	89 df       	rcall	.-238    	; 0xac6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 bb4:	81 2f       	mov	r24, r17
 bb6:	87 df       	rcall	.-242    	; 0xac6 <lcd_command>

}/* lcd_init */
 bb8:	1f 91       	pop	r17
 bba:	08 95       	ret

00000bbc <__udivmodhi4>:
 bbc:	aa 1b       	sub	r26, r26
 bbe:	bb 1b       	sub	r27, r27
 bc0:	51 e1       	ldi	r21, 0x11	; 17
 bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <__udivmodhi4_ep>

00000bc4 <__udivmodhi4_loop>:
 bc4:	aa 1f       	adc	r26, r26
 bc6:	bb 1f       	adc	r27, r27
 bc8:	a6 17       	cp	r26, r22
 bca:	b7 07       	cpc	r27, r23
 bcc:	10 f0       	brcs	.+4      	; 0xbd2 <__udivmodhi4_ep>
 bce:	a6 1b       	sub	r26, r22
 bd0:	b7 0b       	sbc	r27, r23

00000bd2 <__udivmodhi4_ep>:
 bd2:	88 1f       	adc	r24, r24
 bd4:	99 1f       	adc	r25, r25
 bd6:	5a 95       	dec	r21
 bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__udivmodhi4_loop>
 bda:	80 95       	com	r24
 bdc:	90 95       	com	r25
 bde:	bc 01       	movw	r22, r24
 be0:	cd 01       	movw	r24, r26
 be2:	08 95       	ret

00000be4 <__udivmodsi4>:
 be4:	a1 e2       	ldi	r26, 0x21	; 33
 be6:	1a 2e       	mov	r1, r26
 be8:	aa 1b       	sub	r26, r26
 bea:	bb 1b       	sub	r27, r27
 bec:	fd 01       	movw	r30, r26
 bee:	0d c0       	rjmp	.+26     	; 0xc0a <__udivmodsi4_ep>

00000bf0 <__udivmodsi4_loop>:
 bf0:	aa 1f       	adc	r26, r26
 bf2:	bb 1f       	adc	r27, r27
 bf4:	ee 1f       	adc	r30, r30
 bf6:	ff 1f       	adc	r31, r31
 bf8:	a2 17       	cp	r26, r18
 bfa:	b3 07       	cpc	r27, r19
 bfc:	e4 07       	cpc	r30, r20
 bfe:	f5 07       	cpc	r31, r21
 c00:	20 f0       	brcs	.+8      	; 0xc0a <__udivmodsi4_ep>
 c02:	a2 1b       	sub	r26, r18
 c04:	b3 0b       	sbc	r27, r19
 c06:	e4 0b       	sbc	r30, r20
 c08:	f5 0b       	sbc	r31, r21

00000c0a <__udivmodsi4_ep>:
 c0a:	66 1f       	adc	r22, r22
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 1f       	adc	r24, r24
 c10:	99 1f       	adc	r25, r25
 c12:	1a 94       	dec	r1
 c14:	69 f7       	brne	.-38     	; 0xbf0 <__udivmodsi4_loop>
 c16:	60 95       	com	r22
 c18:	70 95       	com	r23
 c1a:	80 95       	com	r24
 c1c:	90 95       	com	r25
 c1e:	9b 01       	movw	r18, r22
 c20:	ac 01       	movw	r20, r24
 c22:	bd 01       	movw	r22, r26
 c24:	cf 01       	movw	r24, r30
 c26:	08 95       	ret

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>
